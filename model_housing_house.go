/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HousingHouse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HousingHouse{}

// HousingHouse Information about a player's house.
type HousingHouse struct {
	// The UUID of this house.
	Uuid string `json:"uuid"`
	// The UUID of the owner of this house.
	Owner string `json:"owner"`
	// The name of this house, may contain Minecraft color symbols.
	Name NullableString `json:"name"`
	// The time this house was created.
	CreatedAt float32 `json:"createdAt"`
	// The number of players in this house.
	Players float32 `json:"players"`
	Cookies HousingHouseCookies `json:"cookies"`
}

type _HousingHouse HousingHouse

// NewHousingHouse instantiates a new HousingHouse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHousingHouse(uuid string, owner string, name NullableString, createdAt float32, players float32, cookies HousingHouseCookies) *HousingHouse {
	this := HousingHouse{}
	this.Uuid = uuid
	this.Owner = owner
	this.Name = name
	this.CreatedAt = createdAt
	this.Players = players
	this.Cookies = cookies
	return &this
}

// NewHousingHouseWithDefaults instantiates a new HousingHouse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHousingHouseWithDefaults() *HousingHouse {
	this := HousingHouse{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *HousingHouse) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *HousingHouse) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *HousingHouse) SetUuid(v string) {
	o.Uuid = v
}

// GetOwner returns the Owner field value
func (o *HousingHouse) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *HousingHouse) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *HousingHouse) SetOwner(v string) {
	o.Owner = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HousingHouse) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HousingHouse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *HousingHouse) SetName(v string) {
	o.Name.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *HousingHouse) GetCreatedAt() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *HousingHouse) GetCreatedAtOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *HousingHouse) SetCreatedAt(v float32) {
	o.CreatedAt = v
}

// GetPlayers returns the Players field value
func (o *HousingHouse) GetPlayers() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Players
}

// GetPlayersOk returns a tuple with the Players field value
// and a boolean to check if the value has been set.
func (o *HousingHouse) GetPlayersOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Players, true
}

// SetPlayers sets field value
func (o *HousingHouse) SetPlayers(v float32) {
	o.Players = v
}

// GetCookies returns the Cookies field value
func (o *HousingHouse) GetCookies() HousingHouseCookies {
	if o == nil {
		var ret HousingHouseCookies
		return ret
	}

	return o.Cookies
}

// GetCookiesOk returns a tuple with the Cookies field value
// and a boolean to check if the value has been set.
func (o *HousingHouse) GetCookiesOk() (*HousingHouseCookies, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cookies, true
}

// SetCookies sets field value
func (o *HousingHouse) SetCookies(v HousingHouseCookies) {
	o.Cookies = v
}

func (o HousingHouse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HousingHouse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["owner"] = o.Owner
	toSerialize["name"] = o.Name.Get()
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["players"] = o.Players
	toSerialize["cookies"] = o.Cookies
	return toSerialize, nil
}

func (o *HousingHouse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"owner",
		"name",
		"createdAt",
		"players",
		"cookies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHousingHouse := _HousingHouse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHousingHouse)

	if err != nil {
		return err
	}

	*o = HousingHouse(varHousingHouse)

	return err
}

type NullableHousingHouse struct {
	value *HousingHouse
	isSet bool
}

func (v NullableHousingHouse) Get() *HousingHouse {
	return v.value
}

func (v *NullableHousingHouse) Set(val *HousingHouse) {
	v.value = val
	v.isSet = true
}

func (v NullableHousingHouse) IsSet() bool {
	return v.isSet
}

func (v *NullableHousingHouse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousingHouse(val *HousingHouse) *NullableHousingHouse {
	return &NullableHousingHouse{value: val, isSet: true}
}

func (v NullableHousingHouse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousingHouse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


