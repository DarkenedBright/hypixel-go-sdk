/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberDungeonsDungeonTypesBestRuns type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberDungeonsDungeonTypesBestRuns{}

// SkyBlockProfileMemberDungeonsDungeonTypesBestRuns struct for SkyBlockProfileMemberDungeonsDungeonTypesBestRuns
type SkyBlockProfileMemberDungeonsDungeonTypesBestRuns struct {
	AllyHealing      *float64 `json:"ally_healing,omitempty"`
	DamageDealt      *float64 `json:"damage_dealt,omitempty"`
	DamageMitigated  *float64 `json:"damage_mitigated,omitempty"`
	Deaths           *int64   `json:"deaths,omitempty"`
	DungeonClass     *string  `json:"dungeon_class,omitempty"`
	ElapsedTime      *int64   `json:"elapsed_time,omitempty"`
	MobsKilled       *int64   `json:"mobs_killed,omitempty"`
	ScoreBonus       *int64   `json:"score_bonus,omitempty"`
	ScoreExploration *int64   `json:"score_exploration,omitempty"`
	ScoreSkill       *int64   `json:"score_skill,omitempty"`
	ScoreSpeed       *int64   `json:"score_speed,omitempty"`
	SecretsFound     *int64   `json:"secrets_found,omitempty"`
	Teammates        []string `json:"teammates,omitempty"`
	Timestamp        *int64   `json:"timestamp,omitempty"`
}

// NewSkyBlockProfileMemberDungeonsDungeonTypesBestRuns instantiates a new SkyBlockProfileMemberDungeonsDungeonTypesBestRuns object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberDungeonsDungeonTypesBestRuns() *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns {
	this := SkyBlockProfileMemberDungeonsDungeonTypesBestRuns{}
	return &this
}

// NewSkyBlockProfileMemberDungeonsDungeonTypesBestRunsWithDefaults instantiates a new SkyBlockProfileMemberDungeonsDungeonTypesBestRuns object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberDungeonsDungeonTypesBestRunsWithDefaults() *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns {
	this := SkyBlockProfileMemberDungeonsDungeonTypesBestRuns{}
	return &this
}

// GetAllyHealing returns the AllyHealing field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetAllyHealing() float64 {
	if o == nil || IsNil(o.AllyHealing) {
		var ret float64
		return ret
	}
	return *o.AllyHealing
}

// GetAllyHealingOk returns a tuple with the AllyHealing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetAllyHealingOk() (*float64, bool) {
	if o == nil || IsNil(o.AllyHealing) {
		return nil, false
	}
	return o.AllyHealing, true
}

// HasAllyHealing returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasAllyHealing() bool {
	if o != nil && !IsNil(o.AllyHealing) {
		return true
	}

	return false
}

// SetAllyHealing gets a reference to the given float64 and assigns it to the AllyHealing field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetAllyHealing(v float64) {
	o.AllyHealing = &v
}

// GetDamageDealt returns the DamageDealt field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetDamageDealt() float64 {
	if o == nil || IsNil(o.DamageDealt) {
		var ret float64
		return ret
	}
	return *o.DamageDealt
}

// GetDamageDealtOk returns a tuple with the DamageDealt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetDamageDealtOk() (*float64, bool) {
	if o == nil || IsNil(o.DamageDealt) {
		return nil, false
	}
	return o.DamageDealt, true
}

// HasDamageDealt returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasDamageDealt() bool {
	if o != nil && !IsNil(o.DamageDealt) {
		return true
	}

	return false
}

// SetDamageDealt gets a reference to the given float64 and assigns it to the DamageDealt field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetDamageDealt(v float64) {
	o.DamageDealt = &v
}

// GetDamageMitigated returns the DamageMitigated field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetDamageMitigated() float64 {
	if o == nil || IsNil(o.DamageMitigated) {
		var ret float64
		return ret
	}
	return *o.DamageMitigated
}

// GetDamageMitigatedOk returns a tuple with the DamageMitigated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetDamageMitigatedOk() (*float64, bool) {
	if o == nil || IsNil(o.DamageMitigated) {
		return nil, false
	}
	return o.DamageMitigated, true
}

// HasDamageMitigated returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasDamageMitigated() bool {
	if o != nil && !IsNil(o.DamageMitigated) {
		return true
	}

	return false
}

// SetDamageMitigated gets a reference to the given float64 and assigns it to the DamageMitigated field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetDamageMitigated(v float64) {
	o.DamageMitigated = &v
}

// GetDeaths returns the Deaths field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetDeaths() int64 {
	if o == nil || IsNil(o.Deaths) {
		var ret int64
		return ret
	}
	return *o.Deaths
}

// GetDeathsOk returns a tuple with the Deaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetDeathsOk() (*int64, bool) {
	if o == nil || IsNil(o.Deaths) {
		return nil, false
	}
	return o.Deaths, true
}

// HasDeaths returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasDeaths() bool {
	if o != nil && !IsNil(o.Deaths) {
		return true
	}

	return false
}

// SetDeaths gets a reference to the given int64 and assigns it to the Deaths field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetDeaths(v int64) {
	o.Deaths = &v
}

// GetDungeonClass returns the DungeonClass field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetDungeonClass() string {
	if o == nil || IsNil(o.DungeonClass) {
		var ret string
		return ret
	}
	return *o.DungeonClass
}

// GetDungeonClassOk returns a tuple with the DungeonClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetDungeonClassOk() (*string, bool) {
	if o == nil || IsNil(o.DungeonClass) {
		return nil, false
	}
	return o.DungeonClass, true
}

// HasDungeonClass returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasDungeonClass() bool {
	if o != nil && !IsNil(o.DungeonClass) {
		return true
	}

	return false
}

// SetDungeonClass gets a reference to the given string and assigns it to the DungeonClass field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetDungeonClass(v string) {
	o.DungeonClass = &v
}

// GetElapsedTime returns the ElapsedTime field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetElapsedTime() int64 {
	if o == nil || IsNil(o.ElapsedTime) {
		var ret int64
		return ret
	}
	return *o.ElapsedTime
}

// GetElapsedTimeOk returns a tuple with the ElapsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetElapsedTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ElapsedTime) {
		return nil, false
	}
	return o.ElapsedTime, true
}

// HasElapsedTime returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasElapsedTime() bool {
	if o != nil && !IsNil(o.ElapsedTime) {
		return true
	}

	return false
}

// SetElapsedTime gets a reference to the given int64 and assigns it to the ElapsedTime field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetElapsedTime(v int64) {
	o.ElapsedTime = &v
}

// GetMobsKilled returns the MobsKilled field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetMobsKilled() int64 {
	if o == nil || IsNil(o.MobsKilled) {
		var ret int64
		return ret
	}
	return *o.MobsKilled
}

// GetMobsKilledOk returns a tuple with the MobsKilled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetMobsKilledOk() (*int64, bool) {
	if o == nil || IsNil(o.MobsKilled) {
		return nil, false
	}
	return o.MobsKilled, true
}

// HasMobsKilled returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasMobsKilled() bool {
	if o != nil && !IsNil(o.MobsKilled) {
		return true
	}

	return false
}

// SetMobsKilled gets a reference to the given int64 and assigns it to the MobsKilled field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetMobsKilled(v int64) {
	o.MobsKilled = &v
}

// GetScoreBonus returns the ScoreBonus field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetScoreBonus() int64 {
	if o == nil || IsNil(o.ScoreBonus) {
		var ret int64
		return ret
	}
	return *o.ScoreBonus
}

// GetScoreBonusOk returns a tuple with the ScoreBonus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetScoreBonusOk() (*int64, bool) {
	if o == nil || IsNil(o.ScoreBonus) {
		return nil, false
	}
	return o.ScoreBonus, true
}

// HasScoreBonus returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasScoreBonus() bool {
	if o != nil && !IsNil(o.ScoreBonus) {
		return true
	}

	return false
}

// SetScoreBonus gets a reference to the given int64 and assigns it to the ScoreBonus field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetScoreBonus(v int64) {
	o.ScoreBonus = &v
}

// GetScoreExploration returns the ScoreExploration field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetScoreExploration() int64 {
	if o == nil || IsNil(o.ScoreExploration) {
		var ret int64
		return ret
	}
	return *o.ScoreExploration
}

// GetScoreExplorationOk returns a tuple with the ScoreExploration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetScoreExplorationOk() (*int64, bool) {
	if o == nil || IsNil(o.ScoreExploration) {
		return nil, false
	}
	return o.ScoreExploration, true
}

// HasScoreExploration returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasScoreExploration() bool {
	if o != nil && !IsNil(o.ScoreExploration) {
		return true
	}

	return false
}

// SetScoreExploration gets a reference to the given int64 and assigns it to the ScoreExploration field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetScoreExploration(v int64) {
	o.ScoreExploration = &v
}

// GetScoreSkill returns the ScoreSkill field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetScoreSkill() int64 {
	if o == nil || IsNil(o.ScoreSkill) {
		var ret int64
		return ret
	}
	return *o.ScoreSkill
}

// GetScoreSkillOk returns a tuple with the ScoreSkill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetScoreSkillOk() (*int64, bool) {
	if o == nil || IsNil(o.ScoreSkill) {
		return nil, false
	}
	return o.ScoreSkill, true
}

// HasScoreSkill returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasScoreSkill() bool {
	if o != nil && !IsNil(o.ScoreSkill) {
		return true
	}

	return false
}

// SetScoreSkill gets a reference to the given int64 and assigns it to the ScoreSkill field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetScoreSkill(v int64) {
	o.ScoreSkill = &v
}

// GetScoreSpeed returns the ScoreSpeed field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetScoreSpeed() int64 {
	if o == nil || IsNil(o.ScoreSpeed) {
		var ret int64
		return ret
	}
	return *o.ScoreSpeed
}

// GetScoreSpeedOk returns a tuple with the ScoreSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetScoreSpeedOk() (*int64, bool) {
	if o == nil || IsNil(o.ScoreSpeed) {
		return nil, false
	}
	return o.ScoreSpeed, true
}

// HasScoreSpeed returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasScoreSpeed() bool {
	if o != nil && !IsNil(o.ScoreSpeed) {
		return true
	}

	return false
}

// SetScoreSpeed gets a reference to the given int64 and assigns it to the ScoreSpeed field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetScoreSpeed(v int64) {
	o.ScoreSpeed = &v
}

// GetSecretsFound returns the SecretsFound field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetSecretsFound() int64 {
	if o == nil || IsNil(o.SecretsFound) {
		var ret int64
		return ret
	}
	return *o.SecretsFound
}

// GetSecretsFoundOk returns a tuple with the SecretsFound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetSecretsFoundOk() (*int64, bool) {
	if o == nil || IsNil(o.SecretsFound) {
		return nil, false
	}
	return o.SecretsFound, true
}

// HasSecretsFound returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasSecretsFound() bool {
	if o != nil && !IsNil(o.SecretsFound) {
		return true
	}

	return false
}

// SetSecretsFound gets a reference to the given int64 and assigns it to the SecretsFound field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetSecretsFound(v int64) {
	o.SecretsFound = &v
}

// GetTeammates returns the Teammates field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetTeammates() []string {
	if o == nil || IsNil(o.Teammates) {
		var ret []string
		return ret
	}
	return o.Teammates
}

// GetTeammatesOk returns a tuple with the Teammates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetTeammatesOk() ([]string, bool) {
	if o == nil || IsNil(o.Teammates) {
		return nil, false
	}
	return o.Teammates, true
}

// HasTeammates returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasTeammates() bool {
	if o != nil && !IsNil(o.Teammates) {
		return true
	}

	return false
}

// SetTeammates gets a reference to the given []string and assigns it to the Teammates field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetTeammates(v []string) {
	o.Teammates = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) SetTimestamp(v int64) {
	o.Timestamp = &v
}

func (o SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllyHealing) {
		toSerialize["ally_healing"] = o.AllyHealing
	}
	if !IsNil(o.DamageDealt) {
		toSerialize["damage_dealt"] = o.DamageDealt
	}
	if !IsNil(o.DamageMitigated) {
		toSerialize["damage_mitigated"] = o.DamageMitigated
	}
	if !IsNil(o.Deaths) {
		toSerialize["deaths"] = o.Deaths
	}
	if !IsNil(o.DungeonClass) {
		toSerialize["dungeon_class"] = o.DungeonClass
	}
	if !IsNil(o.ElapsedTime) {
		toSerialize["elapsed_time"] = o.ElapsedTime
	}
	if !IsNil(o.MobsKilled) {
		toSerialize["mobs_killed"] = o.MobsKilled
	}
	if !IsNil(o.ScoreBonus) {
		toSerialize["score_bonus"] = o.ScoreBonus
	}
	if !IsNil(o.ScoreExploration) {
		toSerialize["score_exploration"] = o.ScoreExploration
	}
	if !IsNil(o.ScoreSkill) {
		toSerialize["score_skill"] = o.ScoreSkill
	}
	if !IsNil(o.ScoreSpeed) {
		toSerialize["score_speed"] = o.ScoreSpeed
	}
	if !IsNil(o.SecretsFound) {
		toSerialize["secrets_found"] = o.SecretsFound
	}
	if !IsNil(o.Teammates) {
		toSerialize["teammates"] = o.Teammates
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns struct {
	value *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns
	isSet bool
}

func (v NullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns) Get() *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns {
	return v.value
}

func (v *NullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns) Set(val *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns(val *SkyBlockProfileMemberDungeonsDungeonTypesBestRuns) *NullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns {
	return &NullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberDungeonsDungeonTypesBestRuns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
