/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal the model 'SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal'
type SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal string

// List of SkyBlockProfileMemberJacobsContestContests_value_claimed_medal
const (
	SKYBLOCKPROFILEMEMBERJACOBSCONTESTCONTESTSVALUECLAIMEDMEDAL_BRONZE   SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal = "bronze"
	SKYBLOCKPROFILEMEMBERJACOBSCONTESTCONTESTSVALUECLAIMEDMEDAL_DIAMOND  SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal = "diamond"
	SKYBLOCKPROFILEMEMBERJACOBSCONTESTCONTESTSVALUECLAIMEDMEDAL_GOLD     SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal = "gold"
	SKYBLOCKPROFILEMEMBERJACOBSCONTESTCONTESTSVALUECLAIMEDMEDAL_PLATINUM SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal = "platinum"
	SKYBLOCKPROFILEMEMBERJACOBSCONTESTCONTESTSVALUECLAIMEDMEDAL_SILVER   SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal = "silver"
)

// All allowed values of SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal enum
var AllowedSkyBlockProfileMemberJacobsContestContestsValueClaimedMedalEnumValues = []SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal{
	"bronze",
	"diamond",
	"gold",
	"platinum",
	"silver",
}

func (v *SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal(value)
	for _, existing := range AllowedSkyBlockProfileMemberJacobsContestContestsValueClaimedMedalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal", value)
}

// NewSkyBlockProfileMemberJacobsContestContestsValueClaimedMedalFromValue returns a pointer to a valid SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberJacobsContestContestsValueClaimedMedalFromValue(v string) (*SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal, error) {
	ev := SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal: valid values are %v", v, AllowedSkyBlockProfileMemberJacobsContestContestsValueClaimedMedalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberJacobsContestContestsValueClaimedMedalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberJacobsContestContests_value_claimed_medal value
func (v SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) Ptr() *SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal {
	return &v
}

type NullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal struct {
	value *SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal
	isSet bool
}

func (v NullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) Get() *SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal {
	return v.value
}

func (v *NullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) Set(val *SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal(val *SkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) *NullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal {
	return &NullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberJacobsContestContestsValueClaimedMedal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
