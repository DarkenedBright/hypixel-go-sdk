/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts{}

// SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts struct for SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts
type SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts struct {
	COMMON    *float64 `json:"COMMON,omitempty"`
	EPIC      *float64 `json:"EPIC,omitempty"`
	LEGENDARY *float64 `json:"LEGENDARY,omitempty"`
	MYTHIC    *float64 `json:"MYTHIC,omitempty"`
	RARE      *float64 `json:"RARE,omitempty"`
	SPECIAL   *float64 `json:"SPECIAL,omitempty"`
	ULTIMATE  *float64 `json:"ULTIMATE,omitempty"`
	UNCOMMON  *float64 `json:"UNCOMMON,omitempty"`
	Total     *float64 `json:"total,omitempty"`
}

// NewSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts instantiates a new SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts() *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts {
	this := SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts{}
	return &this
}

// NewSkyBlockProfileMemberPlayerStatsAuctionsTotalCountsWithDefaults instantiates a new SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberPlayerStatsAuctionsTotalCountsWithDefaults() *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts {
	this := SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts{}
	return &this
}

// GetCOMMON returns the COMMON field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetCOMMON() float64 {
	if o == nil || IsNil(o.COMMON) {
		var ret float64
		return ret
	}
	return *o.COMMON
}

// GetCOMMONOk returns a tuple with the COMMON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetCOMMONOk() (*float64, bool) {
	if o == nil || IsNil(o.COMMON) {
		return nil, false
	}
	return o.COMMON, true
}

// HasCOMMON returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) HasCOMMON() bool {
	if o != nil && !IsNil(o.COMMON) {
		return true
	}

	return false
}

// SetCOMMON gets a reference to the given float64 and assigns it to the COMMON field.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) SetCOMMON(v float64) {
	o.COMMON = &v
}

// GetEPIC returns the EPIC field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetEPIC() float64 {
	if o == nil || IsNil(o.EPIC) {
		var ret float64
		return ret
	}
	return *o.EPIC
}

// GetEPICOk returns a tuple with the EPIC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetEPICOk() (*float64, bool) {
	if o == nil || IsNil(o.EPIC) {
		return nil, false
	}
	return o.EPIC, true
}

// HasEPIC returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) HasEPIC() bool {
	if o != nil && !IsNil(o.EPIC) {
		return true
	}

	return false
}

// SetEPIC gets a reference to the given float64 and assigns it to the EPIC field.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) SetEPIC(v float64) {
	o.EPIC = &v
}

// GetLEGENDARY returns the LEGENDARY field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetLEGENDARY() float64 {
	if o == nil || IsNil(o.LEGENDARY) {
		var ret float64
		return ret
	}
	return *o.LEGENDARY
}

// GetLEGENDARYOk returns a tuple with the LEGENDARY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetLEGENDARYOk() (*float64, bool) {
	if o == nil || IsNil(o.LEGENDARY) {
		return nil, false
	}
	return o.LEGENDARY, true
}

// HasLEGENDARY returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) HasLEGENDARY() bool {
	if o != nil && !IsNil(o.LEGENDARY) {
		return true
	}

	return false
}

// SetLEGENDARY gets a reference to the given float64 and assigns it to the LEGENDARY field.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) SetLEGENDARY(v float64) {
	o.LEGENDARY = &v
}

// GetMYTHIC returns the MYTHIC field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetMYTHIC() float64 {
	if o == nil || IsNil(o.MYTHIC) {
		var ret float64
		return ret
	}
	return *o.MYTHIC
}

// GetMYTHICOk returns a tuple with the MYTHIC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetMYTHICOk() (*float64, bool) {
	if o == nil || IsNil(o.MYTHIC) {
		return nil, false
	}
	return o.MYTHIC, true
}

// HasMYTHIC returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) HasMYTHIC() bool {
	if o != nil && !IsNil(o.MYTHIC) {
		return true
	}

	return false
}

// SetMYTHIC gets a reference to the given float64 and assigns it to the MYTHIC field.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) SetMYTHIC(v float64) {
	o.MYTHIC = &v
}

// GetRARE returns the RARE field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetRARE() float64 {
	if o == nil || IsNil(o.RARE) {
		var ret float64
		return ret
	}
	return *o.RARE
}

// GetRAREOk returns a tuple with the RARE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetRAREOk() (*float64, bool) {
	if o == nil || IsNil(o.RARE) {
		return nil, false
	}
	return o.RARE, true
}

// HasRARE returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) HasRARE() bool {
	if o != nil && !IsNil(o.RARE) {
		return true
	}

	return false
}

// SetRARE gets a reference to the given float64 and assigns it to the RARE field.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) SetRARE(v float64) {
	o.RARE = &v
}

// GetSPECIAL returns the SPECIAL field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetSPECIAL() float64 {
	if o == nil || IsNil(o.SPECIAL) {
		var ret float64
		return ret
	}
	return *o.SPECIAL
}

// GetSPECIALOk returns a tuple with the SPECIAL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetSPECIALOk() (*float64, bool) {
	if o == nil || IsNil(o.SPECIAL) {
		return nil, false
	}
	return o.SPECIAL, true
}

// HasSPECIAL returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) HasSPECIAL() bool {
	if o != nil && !IsNil(o.SPECIAL) {
		return true
	}

	return false
}

// SetSPECIAL gets a reference to the given float64 and assigns it to the SPECIAL field.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) SetSPECIAL(v float64) {
	o.SPECIAL = &v
}

// GetULTIMATE returns the ULTIMATE field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetULTIMATE() float64 {
	if o == nil || IsNil(o.ULTIMATE) {
		var ret float64
		return ret
	}
	return *o.ULTIMATE
}

// GetULTIMATEOk returns a tuple with the ULTIMATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetULTIMATEOk() (*float64, bool) {
	if o == nil || IsNil(o.ULTIMATE) {
		return nil, false
	}
	return o.ULTIMATE, true
}

// HasULTIMATE returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) HasULTIMATE() bool {
	if o != nil && !IsNil(o.ULTIMATE) {
		return true
	}

	return false
}

// SetULTIMATE gets a reference to the given float64 and assigns it to the ULTIMATE field.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) SetULTIMATE(v float64) {
	o.ULTIMATE = &v
}

// GetUNCOMMON returns the UNCOMMON field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetUNCOMMON() float64 {
	if o == nil || IsNil(o.UNCOMMON) {
		var ret float64
		return ret
	}
	return *o.UNCOMMON
}

// GetUNCOMMONOk returns a tuple with the UNCOMMON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetUNCOMMONOk() (*float64, bool) {
	if o == nil || IsNil(o.UNCOMMON) {
		return nil, false
	}
	return o.UNCOMMON, true
}

// HasUNCOMMON returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) HasUNCOMMON() bool {
	if o != nil && !IsNil(o.UNCOMMON) {
		return true
	}

	return false
}

// SetUNCOMMON gets a reference to the given float64 and assigns it to the UNCOMMON field.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) SetUNCOMMON(v float64) {
	o.UNCOMMON = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetTotal() float64 {
	if o == nil || IsNil(o.Total) {
		var ret float64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) GetTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float64 and assigns it to the Total field.
func (o *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) SetTotal(v float64) {
	o.Total = &v
}

func (o SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.COMMON) {
		toSerialize["COMMON"] = o.COMMON
	}
	if !IsNil(o.EPIC) {
		toSerialize["EPIC"] = o.EPIC
	}
	if !IsNil(o.LEGENDARY) {
		toSerialize["LEGENDARY"] = o.LEGENDARY
	}
	if !IsNil(o.MYTHIC) {
		toSerialize["MYTHIC"] = o.MYTHIC
	}
	if !IsNil(o.RARE) {
		toSerialize["RARE"] = o.RARE
	}
	if !IsNil(o.SPECIAL) {
		toSerialize["SPECIAL"] = o.SPECIAL
	}
	if !IsNil(o.ULTIMATE) {
		toSerialize["ULTIMATE"] = o.ULTIMATE
	}
	if !IsNil(o.UNCOMMON) {
		toSerialize["UNCOMMON"] = o.UNCOMMON
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts struct {
	value *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts
	isSet bool
}

func (v NullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) Get() *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts {
	return v.value
}

func (v *NullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) Set(val *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts(val *SkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) *NullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts {
	return &NullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberPlayerStatsAuctionsTotalCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
