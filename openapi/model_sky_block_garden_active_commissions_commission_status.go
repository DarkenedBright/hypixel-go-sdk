/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockGardenActiveCommissionsCommissionStatus the model 'SkyBlockGardenActiveCommissionsCommissionStatus'
type SkyBlockGardenActiveCommissionsCommissionStatus string

// List of SkyBlockGardenActiveCommissionsCommission_status
const (
	SKYBLOCKGARDENACTIVECOMMISSIONSCOMMISSIONSTATUS_NOT_STARTED SkyBlockGardenActiveCommissionsCommissionStatus = "NOT_STARTED"
	SKYBLOCKGARDENACTIVECOMMISSIONSCOMMISSIONSTATUS_STARTED     SkyBlockGardenActiveCommissionsCommissionStatus = "STARTED"
)

// All allowed values of SkyBlockGardenActiveCommissionsCommissionStatus enum
var AllowedSkyBlockGardenActiveCommissionsCommissionStatusEnumValues = []SkyBlockGardenActiveCommissionsCommissionStatus{
	"NOT_STARTED",
	"STARTED",
}

func (v *SkyBlockGardenActiveCommissionsCommissionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockGardenActiveCommissionsCommissionStatus(value)
	for _, existing := range AllowedSkyBlockGardenActiveCommissionsCommissionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockGardenActiveCommissionsCommissionStatus", value)
}

// NewSkyBlockGardenActiveCommissionsCommissionStatusFromValue returns a pointer to a valid SkyBlockGardenActiveCommissionsCommissionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockGardenActiveCommissionsCommissionStatusFromValue(v string) (*SkyBlockGardenActiveCommissionsCommissionStatus, error) {
	ev := SkyBlockGardenActiveCommissionsCommissionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockGardenActiveCommissionsCommissionStatus: valid values are %v", v, AllowedSkyBlockGardenActiveCommissionsCommissionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockGardenActiveCommissionsCommissionStatus) IsValid() bool {
	for _, existing := range AllowedSkyBlockGardenActiveCommissionsCommissionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockGardenActiveCommissionsCommission_status value
func (v SkyBlockGardenActiveCommissionsCommissionStatus) Ptr() *SkyBlockGardenActiveCommissionsCommissionStatus {
	return &v
}

type NullableSkyBlockGardenActiveCommissionsCommissionStatus struct {
	value *SkyBlockGardenActiveCommissionsCommissionStatus
	isSet bool
}

func (v NullableSkyBlockGardenActiveCommissionsCommissionStatus) Get() *SkyBlockGardenActiveCommissionsCommissionStatus {
	return v.value
}

func (v *NullableSkyBlockGardenActiveCommissionsCommissionStatus) Set(val *SkyBlockGardenActiveCommissionsCommissionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockGardenActiveCommissionsCommissionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockGardenActiveCommissionsCommissionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockGardenActiveCommissionsCommissionStatus(val *SkyBlockGardenActiveCommissionsCommissionStatus) *NullableSkyBlockGardenActiveCommissionsCommissionStatus {
	return &NullableSkyBlockGardenActiveCommissionsCommissionStatus{value: val, isSet: true}
}

func (v NullableSkyBlockGardenActiveCommissionsCommissionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockGardenActiveCommissionsCommissionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
