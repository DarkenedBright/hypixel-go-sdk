/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberInventory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberInventory{}

// SkyBlockProfileMemberInventory struct for SkyBlockProfileMemberInventory
type SkyBlockProfileMemberInventory struct {
	BackpackContents      *map[string]SkyBlockProfileMemberInventoryBase64GzipData `json:"backpack_contents,omitempty"`
	BackpackIcons         *map[string]SkyBlockProfileMemberInventoryBase64GzipData `json:"backpack_icons,omitempty"`
	BagContents           *SkyBlockProfileMemberInventoryBagContents               `json:"bag_contents,omitempty"`
	EnderChestContents    *SkyBlockProfileMemberInventoryBase64GzipData            `json:"ender_chest_contents,omitempty"`
	EquipmentContents     *SkyBlockProfileMemberInventoryBase64GzipData            `json:"equipment_contents,omitempty"`
	InvArmor              *SkyBlockProfileMemberInventoryBase64GzipData            `json:"inv_armor,omitempty"`
	InvContents           *SkyBlockProfileMemberInventoryBase64GzipData            `json:"inv_contents,omitempty"`
	PersonalVaultContents *SkyBlockProfileMemberInventoryBase64GzipData            `json:"personal_vault_contents,omitempty"`
	SacksCounts           *map[string]int64                                        `json:"sacks_counts,omitempty"`
	WardrobeContents      *SkyBlockProfileMemberInventoryBase64GzipData            `json:"wardrobe_contents,omitempty"`
	WardrobeEquippedSlot  *int64                                                   `json:"wardrobe_equipped_slot,omitempty"`
}

// NewSkyBlockProfileMemberInventory instantiates a new SkyBlockProfileMemberInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberInventory() *SkyBlockProfileMemberInventory {
	this := SkyBlockProfileMemberInventory{}
	return &this
}

// NewSkyBlockProfileMemberInventoryWithDefaults instantiates a new SkyBlockProfileMemberInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberInventoryWithDefaults() *SkyBlockProfileMemberInventory {
	this := SkyBlockProfileMemberInventory{}
	return &this
}

// GetBackpackContents returns the BackpackContents field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetBackpackContents() map[string]SkyBlockProfileMemberInventoryBase64GzipData {
	if o == nil || IsNil(o.BackpackContents) {
		var ret map[string]SkyBlockProfileMemberInventoryBase64GzipData
		return ret
	}
	return *o.BackpackContents
}

// GetBackpackContentsOk returns a tuple with the BackpackContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetBackpackContentsOk() (*map[string]SkyBlockProfileMemberInventoryBase64GzipData, bool) {
	if o == nil || IsNil(o.BackpackContents) {
		return nil, false
	}
	return o.BackpackContents, true
}

// HasBackpackContents returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasBackpackContents() bool {
	if o != nil && !IsNil(o.BackpackContents) {
		return true
	}

	return false
}

// SetBackpackContents gets a reference to the given map[string]SkyBlockProfileMemberInventoryBase64GzipData and assigns it to the BackpackContents field.
func (o *SkyBlockProfileMemberInventory) SetBackpackContents(v map[string]SkyBlockProfileMemberInventoryBase64GzipData) {
	o.BackpackContents = &v
}

// GetBackpackIcons returns the BackpackIcons field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetBackpackIcons() map[string]SkyBlockProfileMemberInventoryBase64GzipData {
	if o == nil || IsNil(o.BackpackIcons) {
		var ret map[string]SkyBlockProfileMemberInventoryBase64GzipData
		return ret
	}
	return *o.BackpackIcons
}

// GetBackpackIconsOk returns a tuple with the BackpackIcons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetBackpackIconsOk() (*map[string]SkyBlockProfileMemberInventoryBase64GzipData, bool) {
	if o == nil || IsNil(o.BackpackIcons) {
		return nil, false
	}
	return o.BackpackIcons, true
}

// HasBackpackIcons returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasBackpackIcons() bool {
	if o != nil && !IsNil(o.BackpackIcons) {
		return true
	}

	return false
}

// SetBackpackIcons gets a reference to the given map[string]SkyBlockProfileMemberInventoryBase64GzipData and assigns it to the BackpackIcons field.
func (o *SkyBlockProfileMemberInventory) SetBackpackIcons(v map[string]SkyBlockProfileMemberInventoryBase64GzipData) {
	o.BackpackIcons = &v
}

// GetBagContents returns the BagContents field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetBagContents() SkyBlockProfileMemberInventoryBagContents {
	if o == nil || IsNil(o.BagContents) {
		var ret SkyBlockProfileMemberInventoryBagContents
		return ret
	}
	return *o.BagContents
}

// GetBagContentsOk returns a tuple with the BagContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetBagContentsOk() (*SkyBlockProfileMemberInventoryBagContents, bool) {
	if o == nil || IsNil(o.BagContents) {
		return nil, false
	}
	return o.BagContents, true
}

// HasBagContents returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasBagContents() bool {
	if o != nil && !IsNil(o.BagContents) {
		return true
	}

	return false
}

// SetBagContents gets a reference to the given SkyBlockProfileMemberInventoryBagContents and assigns it to the BagContents field.
func (o *SkyBlockProfileMemberInventory) SetBagContents(v SkyBlockProfileMemberInventoryBagContents) {
	o.BagContents = &v
}

// GetEnderChestContents returns the EnderChestContents field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetEnderChestContents() SkyBlockProfileMemberInventoryBase64GzipData {
	if o == nil || IsNil(o.EnderChestContents) {
		var ret SkyBlockProfileMemberInventoryBase64GzipData
		return ret
	}
	return *o.EnderChestContents
}

// GetEnderChestContentsOk returns a tuple with the EnderChestContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetEnderChestContentsOk() (*SkyBlockProfileMemberInventoryBase64GzipData, bool) {
	if o == nil || IsNil(o.EnderChestContents) {
		return nil, false
	}
	return o.EnderChestContents, true
}

// HasEnderChestContents returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasEnderChestContents() bool {
	if o != nil && !IsNil(o.EnderChestContents) {
		return true
	}

	return false
}

// SetEnderChestContents gets a reference to the given SkyBlockProfileMemberInventoryBase64GzipData and assigns it to the EnderChestContents field.
func (o *SkyBlockProfileMemberInventory) SetEnderChestContents(v SkyBlockProfileMemberInventoryBase64GzipData) {
	o.EnderChestContents = &v
}

// GetEquipmentContents returns the EquipmentContents field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetEquipmentContents() SkyBlockProfileMemberInventoryBase64GzipData {
	if o == nil || IsNil(o.EquipmentContents) {
		var ret SkyBlockProfileMemberInventoryBase64GzipData
		return ret
	}
	return *o.EquipmentContents
}

// GetEquipmentContentsOk returns a tuple with the EquipmentContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetEquipmentContentsOk() (*SkyBlockProfileMemberInventoryBase64GzipData, bool) {
	if o == nil || IsNil(o.EquipmentContents) {
		return nil, false
	}
	return o.EquipmentContents, true
}

// HasEquipmentContents returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasEquipmentContents() bool {
	if o != nil && !IsNil(o.EquipmentContents) {
		return true
	}

	return false
}

// SetEquipmentContents gets a reference to the given SkyBlockProfileMemberInventoryBase64GzipData and assigns it to the EquipmentContents field.
func (o *SkyBlockProfileMemberInventory) SetEquipmentContents(v SkyBlockProfileMemberInventoryBase64GzipData) {
	o.EquipmentContents = &v
}

// GetInvArmor returns the InvArmor field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetInvArmor() SkyBlockProfileMemberInventoryBase64GzipData {
	if o == nil || IsNil(o.InvArmor) {
		var ret SkyBlockProfileMemberInventoryBase64GzipData
		return ret
	}
	return *o.InvArmor
}

// GetInvArmorOk returns a tuple with the InvArmor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetInvArmorOk() (*SkyBlockProfileMemberInventoryBase64GzipData, bool) {
	if o == nil || IsNil(o.InvArmor) {
		return nil, false
	}
	return o.InvArmor, true
}

// HasInvArmor returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasInvArmor() bool {
	if o != nil && !IsNil(o.InvArmor) {
		return true
	}

	return false
}

// SetInvArmor gets a reference to the given SkyBlockProfileMemberInventoryBase64GzipData and assigns it to the InvArmor field.
func (o *SkyBlockProfileMemberInventory) SetInvArmor(v SkyBlockProfileMemberInventoryBase64GzipData) {
	o.InvArmor = &v
}

// GetInvContents returns the InvContents field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetInvContents() SkyBlockProfileMemberInventoryBase64GzipData {
	if o == nil || IsNil(o.InvContents) {
		var ret SkyBlockProfileMemberInventoryBase64GzipData
		return ret
	}
	return *o.InvContents
}

// GetInvContentsOk returns a tuple with the InvContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetInvContentsOk() (*SkyBlockProfileMemberInventoryBase64GzipData, bool) {
	if o == nil || IsNil(o.InvContents) {
		return nil, false
	}
	return o.InvContents, true
}

// HasInvContents returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasInvContents() bool {
	if o != nil && !IsNil(o.InvContents) {
		return true
	}

	return false
}

// SetInvContents gets a reference to the given SkyBlockProfileMemberInventoryBase64GzipData and assigns it to the InvContents field.
func (o *SkyBlockProfileMemberInventory) SetInvContents(v SkyBlockProfileMemberInventoryBase64GzipData) {
	o.InvContents = &v
}

// GetPersonalVaultContents returns the PersonalVaultContents field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetPersonalVaultContents() SkyBlockProfileMemberInventoryBase64GzipData {
	if o == nil || IsNil(o.PersonalVaultContents) {
		var ret SkyBlockProfileMemberInventoryBase64GzipData
		return ret
	}
	return *o.PersonalVaultContents
}

// GetPersonalVaultContentsOk returns a tuple with the PersonalVaultContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetPersonalVaultContentsOk() (*SkyBlockProfileMemberInventoryBase64GzipData, bool) {
	if o == nil || IsNil(o.PersonalVaultContents) {
		return nil, false
	}
	return o.PersonalVaultContents, true
}

// HasPersonalVaultContents returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasPersonalVaultContents() bool {
	if o != nil && !IsNil(o.PersonalVaultContents) {
		return true
	}

	return false
}

// SetPersonalVaultContents gets a reference to the given SkyBlockProfileMemberInventoryBase64GzipData and assigns it to the PersonalVaultContents field.
func (o *SkyBlockProfileMemberInventory) SetPersonalVaultContents(v SkyBlockProfileMemberInventoryBase64GzipData) {
	o.PersonalVaultContents = &v
}

// GetSacksCounts returns the SacksCounts field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetSacksCounts() map[string]int64 {
	if o == nil || IsNil(o.SacksCounts) {
		var ret map[string]int64
		return ret
	}
	return *o.SacksCounts
}

// GetSacksCountsOk returns a tuple with the SacksCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetSacksCountsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.SacksCounts) {
		return nil, false
	}
	return o.SacksCounts, true
}

// HasSacksCounts returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasSacksCounts() bool {
	if o != nil && !IsNil(o.SacksCounts) {
		return true
	}

	return false
}

// SetSacksCounts gets a reference to the given map[string]int64 and assigns it to the SacksCounts field.
func (o *SkyBlockProfileMemberInventory) SetSacksCounts(v map[string]int64) {
	o.SacksCounts = &v
}

// GetWardrobeContents returns the WardrobeContents field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetWardrobeContents() SkyBlockProfileMemberInventoryBase64GzipData {
	if o == nil || IsNil(o.WardrobeContents) {
		var ret SkyBlockProfileMemberInventoryBase64GzipData
		return ret
	}
	return *o.WardrobeContents
}

// GetWardrobeContentsOk returns a tuple with the WardrobeContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetWardrobeContentsOk() (*SkyBlockProfileMemberInventoryBase64GzipData, bool) {
	if o == nil || IsNil(o.WardrobeContents) {
		return nil, false
	}
	return o.WardrobeContents, true
}

// HasWardrobeContents returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasWardrobeContents() bool {
	if o != nil && !IsNil(o.WardrobeContents) {
		return true
	}

	return false
}

// SetWardrobeContents gets a reference to the given SkyBlockProfileMemberInventoryBase64GzipData and assigns it to the WardrobeContents field.
func (o *SkyBlockProfileMemberInventory) SetWardrobeContents(v SkyBlockProfileMemberInventoryBase64GzipData) {
	o.WardrobeContents = &v
}

// GetWardrobeEquippedSlot returns the WardrobeEquippedSlot field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberInventory) GetWardrobeEquippedSlot() int64 {
	if o == nil || IsNil(o.WardrobeEquippedSlot) {
		var ret int64
		return ret
	}
	return *o.WardrobeEquippedSlot
}

// GetWardrobeEquippedSlotOk returns a tuple with the WardrobeEquippedSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberInventory) GetWardrobeEquippedSlotOk() (*int64, bool) {
	if o == nil || IsNil(o.WardrobeEquippedSlot) {
		return nil, false
	}
	return o.WardrobeEquippedSlot, true
}

// HasWardrobeEquippedSlot returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberInventory) HasWardrobeEquippedSlot() bool {
	if o != nil && !IsNil(o.WardrobeEquippedSlot) {
		return true
	}

	return false
}

// SetWardrobeEquippedSlot gets a reference to the given int64 and assigns it to the WardrobeEquippedSlot field.
func (o *SkyBlockProfileMemberInventory) SetWardrobeEquippedSlot(v int64) {
	o.WardrobeEquippedSlot = &v
}

func (o SkyBlockProfileMemberInventory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberInventory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackpackContents) {
		toSerialize["backpack_contents"] = o.BackpackContents
	}
	if !IsNil(o.BackpackIcons) {
		toSerialize["backpack_icons"] = o.BackpackIcons
	}
	if !IsNil(o.BagContents) {
		toSerialize["bag_contents"] = o.BagContents
	}
	if !IsNil(o.EnderChestContents) {
		toSerialize["ender_chest_contents"] = o.EnderChestContents
	}
	if !IsNil(o.EquipmentContents) {
		toSerialize["equipment_contents"] = o.EquipmentContents
	}
	if !IsNil(o.InvArmor) {
		toSerialize["inv_armor"] = o.InvArmor
	}
	if !IsNil(o.InvContents) {
		toSerialize["inv_contents"] = o.InvContents
	}
	if !IsNil(o.PersonalVaultContents) {
		toSerialize["personal_vault_contents"] = o.PersonalVaultContents
	}
	if !IsNil(o.SacksCounts) {
		toSerialize["sacks_counts"] = o.SacksCounts
	}
	if !IsNil(o.WardrobeContents) {
		toSerialize["wardrobe_contents"] = o.WardrobeContents
	}
	if !IsNil(o.WardrobeEquippedSlot) {
		toSerialize["wardrobe_equipped_slot"] = o.WardrobeEquippedSlot
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberInventory struct {
	value *SkyBlockProfileMemberInventory
	isSet bool
}

func (v NullableSkyBlockProfileMemberInventory) Get() *SkyBlockProfileMemberInventory {
	return v.value
}

func (v *NullableSkyBlockProfileMemberInventory) Set(val *SkyBlockProfileMemberInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberInventory(val *SkyBlockProfileMemberInventory) *NullableSkyBlockProfileMemberInventory {
	return &NullableSkyBlockProfileMemberInventory{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
