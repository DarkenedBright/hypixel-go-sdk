/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockGardenComposterData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockGardenComposterData{}

// SkyBlockGardenComposterData struct for SkyBlockGardenComposterData
type SkyBlockGardenComposterData struct {
	CompostItems    int64                                `json:"compost_items"`
	CompostUnits    int64                                `json:"compost_units"`
	ConversionTicks int64                                `json:"conversion_ticks"`
	FuelUnits       float64                              `json:"fuel_units"`
	LastSave        int64                                `json:"last_save"`
	OrganicMatter   float64                              `json:"organic_matter"`
	Upgrades        *SkyBlockGardenComposterDataUpgrades `json:"upgrades,omitempty"`
}

type _SkyBlockGardenComposterData SkyBlockGardenComposterData

// NewSkyBlockGardenComposterData instantiates a new SkyBlockGardenComposterData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockGardenComposterData(compostItems int64, compostUnits int64, conversionTicks int64, fuelUnits float64, lastSave int64, organicMatter float64) *SkyBlockGardenComposterData {
	this := SkyBlockGardenComposterData{}
	this.CompostItems = compostItems
	this.CompostUnits = compostUnits
	this.ConversionTicks = conversionTicks
	this.FuelUnits = fuelUnits
	this.LastSave = lastSave
	this.OrganicMatter = organicMatter
	return &this
}

// NewSkyBlockGardenComposterDataWithDefaults instantiates a new SkyBlockGardenComposterData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockGardenComposterDataWithDefaults() *SkyBlockGardenComposterData {
	this := SkyBlockGardenComposterData{}
	return &this
}

// GetCompostItems returns the CompostItems field value
func (o *SkyBlockGardenComposterData) GetCompostItems() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CompostItems
}

// GetCompostItemsOk returns a tuple with the CompostItems field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGardenComposterData) GetCompostItemsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompostItems, true
}

// SetCompostItems sets field value
func (o *SkyBlockGardenComposterData) SetCompostItems(v int64) {
	o.CompostItems = v
}

// GetCompostUnits returns the CompostUnits field value
func (o *SkyBlockGardenComposterData) GetCompostUnits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CompostUnits
}

// GetCompostUnitsOk returns a tuple with the CompostUnits field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGardenComposterData) GetCompostUnitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompostUnits, true
}

// SetCompostUnits sets field value
func (o *SkyBlockGardenComposterData) SetCompostUnits(v int64) {
	o.CompostUnits = v
}

// GetConversionTicks returns the ConversionTicks field value
func (o *SkyBlockGardenComposterData) GetConversionTicks() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConversionTicks
}

// GetConversionTicksOk returns a tuple with the ConversionTicks field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGardenComposterData) GetConversionTicksOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionTicks, true
}

// SetConversionTicks sets field value
func (o *SkyBlockGardenComposterData) SetConversionTicks(v int64) {
	o.ConversionTicks = v
}

// GetFuelUnits returns the FuelUnits field value
func (o *SkyBlockGardenComposterData) GetFuelUnits() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.FuelUnits
}

// GetFuelUnitsOk returns a tuple with the FuelUnits field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGardenComposterData) GetFuelUnitsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FuelUnits, true
}

// SetFuelUnits sets field value
func (o *SkyBlockGardenComposterData) SetFuelUnits(v float64) {
	o.FuelUnits = v
}

// GetLastSave returns the LastSave field value
func (o *SkyBlockGardenComposterData) GetLastSave() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastSave
}

// GetLastSaveOk returns a tuple with the LastSave field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGardenComposterData) GetLastSaveOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSave, true
}

// SetLastSave sets field value
func (o *SkyBlockGardenComposterData) SetLastSave(v int64) {
	o.LastSave = v
}

// GetOrganicMatter returns the OrganicMatter field value
func (o *SkyBlockGardenComposterData) GetOrganicMatter() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.OrganicMatter
}

// GetOrganicMatterOk returns a tuple with the OrganicMatter field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGardenComposterData) GetOrganicMatterOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganicMatter, true
}

// SetOrganicMatter sets field value
func (o *SkyBlockGardenComposterData) SetOrganicMatter(v float64) {
	o.OrganicMatter = v
}

// GetUpgrades returns the Upgrades field value if set, zero value otherwise.
func (o *SkyBlockGardenComposterData) GetUpgrades() SkyBlockGardenComposterDataUpgrades {
	if o == nil || IsNil(o.Upgrades) {
		var ret SkyBlockGardenComposterDataUpgrades
		return ret
	}
	return *o.Upgrades
}

// GetUpgradesOk returns a tuple with the Upgrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGardenComposterData) GetUpgradesOk() (*SkyBlockGardenComposterDataUpgrades, bool) {
	if o == nil || IsNil(o.Upgrades) {
		return nil, false
	}
	return o.Upgrades, true
}

// HasUpgrades returns a boolean if a field has been set.
func (o *SkyBlockGardenComposterData) HasUpgrades() bool {
	if o != nil && !IsNil(o.Upgrades) {
		return true
	}

	return false
}

// SetUpgrades gets a reference to the given SkyBlockGardenComposterDataUpgrades and assigns it to the Upgrades field.
func (o *SkyBlockGardenComposterData) SetUpgrades(v SkyBlockGardenComposterDataUpgrades) {
	o.Upgrades = &v
}

func (o SkyBlockGardenComposterData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockGardenComposterData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["compost_items"] = o.CompostItems
	toSerialize["compost_units"] = o.CompostUnits
	toSerialize["conversion_ticks"] = o.ConversionTicks
	toSerialize["fuel_units"] = o.FuelUnits
	toSerialize["last_save"] = o.LastSave
	toSerialize["organic_matter"] = o.OrganicMatter
	if !IsNil(o.Upgrades) {
		toSerialize["upgrades"] = o.Upgrades
	}
	return toSerialize, nil
}

func (o *SkyBlockGardenComposterData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"compost_items",
		"compost_units",
		"conversion_ticks",
		"fuel_units",
		"last_save",
		"organic_matter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockGardenComposterData := _SkyBlockGardenComposterData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockGardenComposterData)

	if err != nil {
		return err
	}

	*o = SkyBlockGardenComposterData(varSkyBlockGardenComposterData)

	return err
}

type NullableSkyBlockGardenComposterData struct {
	value *SkyBlockGardenComposterData
	isSet bool
}

func (v NullableSkyBlockGardenComposterData) Get() *SkyBlockGardenComposterData {
	return v.value
}

func (v *NullableSkyBlockGardenComposterData) Set(val *SkyBlockGardenComposterData) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockGardenComposterData) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockGardenComposterData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockGardenComposterData(val *SkyBlockGardenComposterData) *NullableSkyBlockGardenComposterData {
	return &NullableSkyBlockGardenComposterData{value: val, isSet: true}
}

func (v NullableSkyBlockGardenComposterData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockGardenComposterData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
