/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberAccessoryBagStoragePower the model 'SkyBlockProfileMemberAccessoryBagStoragePower'
type SkyBlockProfileMemberAccessoryBagStoragePower string

// List of SkyBlockProfileMemberAccessoryBagStoragePower
const (
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_ADEPT       SkyBlockProfileMemberAccessoryBagStoragePower = "adept"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_BIZARRE     SkyBlockProfileMemberAccessoryBagStoragePower = "bizarre"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_BLOODY      SkyBlockProfileMemberAccessoryBagStoragePower = "bloody"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_BUBBA       SkyBlockProfileMemberAccessoryBagStoragePower = "bubba"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_COMMANDO    SkyBlockProfileMemberAccessoryBagStoragePower = "commando"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_CRUMBLY     SkyBlockProfileMemberAccessoryBagStoragePower = "crumbly"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_DEMONIC     SkyBlockProfileMemberAccessoryBagStoragePower = "demonic"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_DISCIPLINED SkyBlockProfileMemberAccessoryBagStoragePower = "disciplined"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_FORCEFUL    SkyBlockProfileMemberAccessoryBagStoragePower = "forceful"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_FORTUITOUS  SkyBlockProfileMemberAccessoryBagStoragePower = "fortuitous"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_FROZEN      SkyBlockProfileMemberAccessoryBagStoragePower = "frozen"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_HEALTHY     SkyBlockProfileMemberAccessoryBagStoragePower = "healthy"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_HURTFUL     SkyBlockProfileMemberAccessoryBagStoragePower = "hurtful"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_INSPIRED    SkyBlockProfileMemberAccessoryBagStoragePower = "inspired"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_ITCHY       SkyBlockProfileMemberAccessoryBagStoragePower = "itchy"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_MYTHICAL    SkyBlockProfileMemberAccessoryBagStoragePower = "mythical"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_NONE        SkyBlockProfileMemberAccessoryBagStoragePower = "none"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_OMINOUS     SkyBlockProfileMemberAccessoryBagStoragePower = "ominous"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_PLEASANT    SkyBlockProfileMemberAccessoryBagStoragePower = "pleasant"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_PREPARED    SkyBlockProfileMemberAccessoryBagStoragePower = "prepared"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_PRETTY      SkyBlockProfileMemberAccessoryBagStoragePower = "pretty"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_PROTECTED   SkyBlockProfileMemberAccessoryBagStoragePower = "protected"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_SANGUISUGE  SkyBlockProfileMemberAccessoryBagStoragePower = "sanguisuge"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_SCORCHING   SkyBlockProfileMemberAccessoryBagStoragePower = "scorching"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_SHADED      SkyBlockProfileMemberAccessoryBagStoragePower = "shaded"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_SIGHTED     SkyBlockProfileMemberAccessoryBagStoragePower = "sighted"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_SILKY       SkyBlockProfileMemberAccessoryBagStoragePower = "silky"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_SIMPLE      SkyBlockProfileMemberAccessoryBagStoragePower = "simple"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_SLENDER     SkyBlockProfileMemberAccessoryBagStoragePower = "slender"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_STRONG      SkyBlockProfileMemberAccessoryBagStoragePower = "strong"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_SWEET       SkyBlockProfileMemberAccessoryBagStoragePower = "sweet"
	SKYBLOCKPROFILEMEMBERACCESSORYBAGSTORAGEPOWER_WARRIOR     SkyBlockProfileMemberAccessoryBagStoragePower = "warrior"
)

// All allowed values of SkyBlockProfileMemberAccessoryBagStoragePower enum
var AllowedSkyBlockProfileMemberAccessoryBagStoragePowerEnumValues = []SkyBlockProfileMemberAccessoryBagStoragePower{
	"adept",
	"bizarre",
	"bloody",
	"bubba",
	"commando",
	"crumbly",
	"demonic",
	"disciplined",
	"forceful",
	"fortuitous",
	"frozen",
	"healthy",
	"hurtful",
	"inspired",
	"itchy",
	"mythical",
	"none",
	"ominous",
	"pleasant",
	"prepared",
	"pretty",
	"protected",
	"sanguisuge",
	"scorching",
	"shaded",
	"sighted",
	"silky",
	"simple",
	"slender",
	"strong",
	"sweet",
	"warrior",
}

func (v *SkyBlockProfileMemberAccessoryBagStoragePower) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberAccessoryBagStoragePower(value)
	for _, existing := range AllowedSkyBlockProfileMemberAccessoryBagStoragePowerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberAccessoryBagStoragePower", value)
}

// NewSkyBlockProfileMemberAccessoryBagStoragePowerFromValue returns a pointer to a valid SkyBlockProfileMemberAccessoryBagStoragePower
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberAccessoryBagStoragePowerFromValue(v string) (*SkyBlockProfileMemberAccessoryBagStoragePower, error) {
	ev := SkyBlockProfileMemberAccessoryBagStoragePower(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberAccessoryBagStoragePower: valid values are %v", v, AllowedSkyBlockProfileMemberAccessoryBagStoragePowerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberAccessoryBagStoragePower) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberAccessoryBagStoragePowerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberAccessoryBagStoragePower value
func (v SkyBlockProfileMemberAccessoryBagStoragePower) Ptr() *SkyBlockProfileMemberAccessoryBagStoragePower {
	return &v
}

type NullableSkyBlockProfileMemberAccessoryBagStoragePower struct {
	value *SkyBlockProfileMemberAccessoryBagStoragePower
	isSet bool
}

func (v NullableSkyBlockProfileMemberAccessoryBagStoragePower) Get() *SkyBlockProfileMemberAccessoryBagStoragePower {
	return v.value
}

func (v *NullableSkyBlockProfileMemberAccessoryBagStoragePower) Set(val *SkyBlockProfileMemberAccessoryBagStoragePower) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberAccessoryBagStoragePower) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberAccessoryBagStoragePower) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberAccessoryBagStoragePower(val *SkyBlockProfileMemberAccessoryBagStoragePower) *NullableSkyBlockProfileMemberAccessoryBagStoragePower {
	return &NullableSkyBlockProfileMemberAccessoryBagStoragePower{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberAccessoryBagStoragePower) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberAccessoryBagStoragePower) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
