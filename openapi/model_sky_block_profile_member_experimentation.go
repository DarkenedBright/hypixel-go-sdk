/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberExperimentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberExperimentation{}

// SkyBlockProfileMemberExperimentation struct for SkyBlockProfileMemberExperimentation
type SkyBlockProfileMemberExperimentation struct {
	ChargeTrackTimestamp  *int64                                        `json:"charge_track_timestamp,omitempty"`
	ClaimedRetroactiveRng *bool                                         `json:"claimed_retroactive_rng,omitempty"`
	ClaimsResets          *int64                                        `json:"claims_resets,omitempty"`
	ClaimsResetsTimestamp *int64                                        `json:"claims_resets_timestamp,omitempty"`
	Numbers               *SkyBlockProfileMemberExperimentationNumbers  `json:"numbers,omitempty"`
	Pairings              *SkyBlockProfileMemberExperimentationPairings `json:"pairings,omitempty"`
	SerumsDrank           *int64                                        `json:"serums_drank,omitempty"`
	Simon                 *SkyBlockProfileMemberExperimentationSimon    `json:"simon,omitempty"`
}

// NewSkyBlockProfileMemberExperimentation instantiates a new SkyBlockProfileMemberExperimentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberExperimentation() *SkyBlockProfileMemberExperimentation {
	this := SkyBlockProfileMemberExperimentation{}
	return &this
}

// NewSkyBlockProfileMemberExperimentationWithDefaults instantiates a new SkyBlockProfileMemberExperimentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberExperimentationWithDefaults() *SkyBlockProfileMemberExperimentation {
	this := SkyBlockProfileMemberExperimentation{}
	return &this
}

// GetChargeTrackTimestamp returns the ChargeTrackTimestamp field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentation) GetChargeTrackTimestamp() int64 {
	if o == nil || IsNil(o.ChargeTrackTimestamp) {
		var ret int64
		return ret
	}
	return *o.ChargeTrackTimestamp
}

// GetChargeTrackTimestampOk returns a tuple with the ChargeTrackTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentation) GetChargeTrackTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.ChargeTrackTimestamp) {
		return nil, false
	}
	return o.ChargeTrackTimestamp, true
}

// HasChargeTrackTimestamp returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentation) HasChargeTrackTimestamp() bool {
	if o != nil && !IsNil(o.ChargeTrackTimestamp) {
		return true
	}

	return false
}

// SetChargeTrackTimestamp gets a reference to the given int64 and assigns it to the ChargeTrackTimestamp field.
func (o *SkyBlockProfileMemberExperimentation) SetChargeTrackTimestamp(v int64) {
	o.ChargeTrackTimestamp = &v
}

// GetClaimedRetroactiveRng returns the ClaimedRetroactiveRng field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentation) GetClaimedRetroactiveRng() bool {
	if o == nil || IsNil(o.ClaimedRetroactiveRng) {
		var ret bool
		return ret
	}
	return *o.ClaimedRetroactiveRng
}

// GetClaimedRetroactiveRngOk returns a tuple with the ClaimedRetroactiveRng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentation) GetClaimedRetroactiveRngOk() (*bool, bool) {
	if o == nil || IsNil(o.ClaimedRetroactiveRng) {
		return nil, false
	}
	return o.ClaimedRetroactiveRng, true
}

// HasClaimedRetroactiveRng returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentation) HasClaimedRetroactiveRng() bool {
	if o != nil && !IsNil(o.ClaimedRetroactiveRng) {
		return true
	}

	return false
}

// SetClaimedRetroactiveRng gets a reference to the given bool and assigns it to the ClaimedRetroactiveRng field.
func (o *SkyBlockProfileMemberExperimentation) SetClaimedRetroactiveRng(v bool) {
	o.ClaimedRetroactiveRng = &v
}

// GetClaimsResets returns the ClaimsResets field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentation) GetClaimsResets() int64 {
	if o == nil || IsNil(o.ClaimsResets) {
		var ret int64
		return ret
	}
	return *o.ClaimsResets
}

// GetClaimsResetsOk returns a tuple with the ClaimsResets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentation) GetClaimsResetsOk() (*int64, bool) {
	if o == nil || IsNil(o.ClaimsResets) {
		return nil, false
	}
	return o.ClaimsResets, true
}

// HasClaimsResets returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentation) HasClaimsResets() bool {
	if o != nil && !IsNil(o.ClaimsResets) {
		return true
	}

	return false
}

// SetClaimsResets gets a reference to the given int64 and assigns it to the ClaimsResets field.
func (o *SkyBlockProfileMemberExperimentation) SetClaimsResets(v int64) {
	o.ClaimsResets = &v
}

// GetClaimsResetsTimestamp returns the ClaimsResetsTimestamp field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentation) GetClaimsResetsTimestamp() int64 {
	if o == nil || IsNil(o.ClaimsResetsTimestamp) {
		var ret int64
		return ret
	}
	return *o.ClaimsResetsTimestamp
}

// GetClaimsResetsTimestampOk returns a tuple with the ClaimsResetsTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentation) GetClaimsResetsTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.ClaimsResetsTimestamp) {
		return nil, false
	}
	return o.ClaimsResetsTimestamp, true
}

// HasClaimsResetsTimestamp returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentation) HasClaimsResetsTimestamp() bool {
	if o != nil && !IsNil(o.ClaimsResetsTimestamp) {
		return true
	}

	return false
}

// SetClaimsResetsTimestamp gets a reference to the given int64 and assigns it to the ClaimsResetsTimestamp field.
func (o *SkyBlockProfileMemberExperimentation) SetClaimsResetsTimestamp(v int64) {
	o.ClaimsResetsTimestamp = &v
}

// GetNumbers returns the Numbers field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentation) GetNumbers() SkyBlockProfileMemberExperimentationNumbers {
	if o == nil || IsNil(o.Numbers) {
		var ret SkyBlockProfileMemberExperimentationNumbers
		return ret
	}
	return *o.Numbers
}

// GetNumbersOk returns a tuple with the Numbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentation) GetNumbersOk() (*SkyBlockProfileMemberExperimentationNumbers, bool) {
	if o == nil || IsNil(o.Numbers) {
		return nil, false
	}
	return o.Numbers, true
}

// HasNumbers returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentation) HasNumbers() bool {
	if o != nil && !IsNil(o.Numbers) {
		return true
	}

	return false
}

// SetNumbers gets a reference to the given SkyBlockProfileMemberExperimentationNumbers and assigns it to the Numbers field.
func (o *SkyBlockProfileMemberExperimentation) SetNumbers(v SkyBlockProfileMemberExperimentationNumbers) {
	o.Numbers = &v
}

// GetPairings returns the Pairings field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentation) GetPairings() SkyBlockProfileMemberExperimentationPairings {
	if o == nil || IsNil(o.Pairings) {
		var ret SkyBlockProfileMemberExperimentationPairings
		return ret
	}
	return *o.Pairings
}

// GetPairingsOk returns a tuple with the Pairings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentation) GetPairingsOk() (*SkyBlockProfileMemberExperimentationPairings, bool) {
	if o == nil || IsNil(o.Pairings) {
		return nil, false
	}
	return o.Pairings, true
}

// HasPairings returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentation) HasPairings() bool {
	if o != nil && !IsNil(o.Pairings) {
		return true
	}

	return false
}

// SetPairings gets a reference to the given SkyBlockProfileMemberExperimentationPairings and assigns it to the Pairings field.
func (o *SkyBlockProfileMemberExperimentation) SetPairings(v SkyBlockProfileMemberExperimentationPairings) {
	o.Pairings = &v
}

// GetSerumsDrank returns the SerumsDrank field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentation) GetSerumsDrank() int64 {
	if o == nil || IsNil(o.SerumsDrank) {
		var ret int64
		return ret
	}
	return *o.SerumsDrank
}

// GetSerumsDrankOk returns a tuple with the SerumsDrank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentation) GetSerumsDrankOk() (*int64, bool) {
	if o == nil || IsNil(o.SerumsDrank) {
		return nil, false
	}
	return o.SerumsDrank, true
}

// HasSerumsDrank returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentation) HasSerumsDrank() bool {
	if o != nil && !IsNil(o.SerumsDrank) {
		return true
	}

	return false
}

// SetSerumsDrank gets a reference to the given int64 and assigns it to the SerumsDrank field.
func (o *SkyBlockProfileMemberExperimentation) SetSerumsDrank(v int64) {
	o.SerumsDrank = &v
}

// GetSimon returns the Simon field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentation) GetSimon() SkyBlockProfileMemberExperimentationSimon {
	if o == nil || IsNil(o.Simon) {
		var ret SkyBlockProfileMemberExperimentationSimon
		return ret
	}
	return *o.Simon
}

// GetSimonOk returns a tuple with the Simon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentation) GetSimonOk() (*SkyBlockProfileMemberExperimentationSimon, bool) {
	if o == nil || IsNil(o.Simon) {
		return nil, false
	}
	return o.Simon, true
}

// HasSimon returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentation) HasSimon() bool {
	if o != nil && !IsNil(o.Simon) {
		return true
	}

	return false
}

// SetSimon gets a reference to the given SkyBlockProfileMemberExperimentationSimon and assigns it to the Simon field.
func (o *SkyBlockProfileMemberExperimentation) SetSimon(v SkyBlockProfileMemberExperimentationSimon) {
	o.Simon = &v
}

func (o SkyBlockProfileMemberExperimentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberExperimentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChargeTrackTimestamp) {
		toSerialize["charge_track_timestamp"] = o.ChargeTrackTimestamp
	}
	if !IsNil(o.ClaimedRetroactiveRng) {
		toSerialize["claimed_retroactive_rng"] = o.ClaimedRetroactiveRng
	}
	if !IsNil(o.ClaimsResets) {
		toSerialize["claims_resets"] = o.ClaimsResets
	}
	if !IsNil(o.ClaimsResetsTimestamp) {
		toSerialize["claims_resets_timestamp"] = o.ClaimsResetsTimestamp
	}
	if !IsNil(o.Numbers) {
		toSerialize["numbers"] = o.Numbers
	}
	if !IsNil(o.Pairings) {
		toSerialize["pairings"] = o.Pairings
	}
	if !IsNil(o.SerumsDrank) {
		toSerialize["serums_drank"] = o.SerumsDrank
	}
	if !IsNil(o.Simon) {
		toSerialize["simon"] = o.Simon
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberExperimentation struct {
	value *SkyBlockProfileMemberExperimentation
	isSet bool
}

func (v NullableSkyBlockProfileMemberExperimentation) Get() *SkyBlockProfileMemberExperimentation {
	return v.value
}

func (v *NullableSkyBlockProfileMemberExperimentation) Set(val *SkyBlockProfileMemberExperimentation) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberExperimentation) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberExperimentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberExperimentation(val *SkyBlockProfileMemberExperimentation) *NullableSkyBlockProfileMemberExperimentation {
	return &NullableSkyBlockProfileMemberExperimentation{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberExperimentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberExperimentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
