/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberMiningCoreCrystalsCrystalState the model 'SkyBlockProfileMemberMiningCoreCrystalsCrystalState'
type SkyBlockProfileMemberMiningCoreCrystalsCrystalState string

// List of SkyBlockProfileMemberMiningCoreCrystalsCrystal_state
const (
	SKYBLOCKPROFILEMEMBERMININGCORECRYSTALSCRYSTALSTATE_FOUND     SkyBlockProfileMemberMiningCoreCrystalsCrystalState = "FOUND"
	SKYBLOCKPROFILEMEMBERMININGCORECRYSTALSCRYSTALSTATE_NOT_FOUND SkyBlockProfileMemberMiningCoreCrystalsCrystalState = "NOT_FOUND"
	SKYBLOCKPROFILEMEMBERMININGCORECRYSTALSCRYSTALSTATE_PLACED    SkyBlockProfileMemberMiningCoreCrystalsCrystalState = "PLACED"
)

// All allowed values of SkyBlockProfileMemberMiningCoreCrystalsCrystalState enum
var AllowedSkyBlockProfileMemberMiningCoreCrystalsCrystalStateEnumValues = []SkyBlockProfileMemberMiningCoreCrystalsCrystalState{
	"FOUND",
	"NOT_FOUND",
	"PLACED",
}

func (v *SkyBlockProfileMemberMiningCoreCrystalsCrystalState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberMiningCoreCrystalsCrystalState(value)
	for _, existing := range AllowedSkyBlockProfileMemberMiningCoreCrystalsCrystalStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberMiningCoreCrystalsCrystalState", value)
}

// NewSkyBlockProfileMemberMiningCoreCrystalsCrystalStateFromValue returns a pointer to a valid SkyBlockProfileMemberMiningCoreCrystalsCrystalState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberMiningCoreCrystalsCrystalStateFromValue(v string) (*SkyBlockProfileMemberMiningCoreCrystalsCrystalState, error) {
	ev := SkyBlockProfileMemberMiningCoreCrystalsCrystalState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberMiningCoreCrystalsCrystalState: valid values are %v", v, AllowedSkyBlockProfileMemberMiningCoreCrystalsCrystalStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberMiningCoreCrystalsCrystalState) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberMiningCoreCrystalsCrystalStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberMiningCoreCrystalsCrystal_state value
func (v SkyBlockProfileMemberMiningCoreCrystalsCrystalState) Ptr() *SkyBlockProfileMemberMiningCoreCrystalsCrystalState {
	return &v
}

type NullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState struct {
	value *SkyBlockProfileMemberMiningCoreCrystalsCrystalState
	isSet bool
}

func (v NullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState) Get() *SkyBlockProfileMemberMiningCoreCrystalsCrystalState {
	return v.value
}

func (v *NullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState) Set(val *SkyBlockProfileMemberMiningCoreCrystalsCrystalState) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState(val *SkyBlockProfileMemberMiningCoreCrystalsCrystalState) *NullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState {
	return &NullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberMiningCoreCrystalsCrystalState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
