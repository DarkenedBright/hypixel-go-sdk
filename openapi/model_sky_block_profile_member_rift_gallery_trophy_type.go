/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberRiftGalleryTrophyType the model 'SkyBlockProfileMemberRiftGalleryTrophyType'
type SkyBlockProfileMemberRiftGalleryTrophyType string

// List of SkyBlockProfileMemberRiftGalleryTrophyType
const (
	SKYBLOCKPROFILEMEMBERRIFTGALLERYTROPHYTYPE_CHICKEN_N_EGG  SkyBlockProfileMemberRiftGalleryTrophyType = "chicken_n_egg"
	SKYBLOCKPROFILEMEMBERRIFTGALLERYTROPHYTYPE_CITIZEN        SkyBlockProfileMemberRiftGalleryTrophyType = "citizen"
	SKYBLOCKPROFILEMEMBERRIFTGALLERYTROPHYTYPE_LAZY_LIVING    SkyBlockProfileMemberRiftGalleryTrophyType = "lazy_living"
	SKYBLOCKPROFILEMEMBERRIFTGALLERYTROPHYTYPE_MIRRORED       SkyBlockProfileMemberRiftGalleryTrophyType = "mirrored"
	SKYBLOCKPROFILEMEMBERRIFTGALLERYTROPHYTYPE_MOUNTAIN       SkyBlockProfileMemberRiftGalleryTrophyType = "mountain"
	SKYBLOCKPROFILEMEMBERRIFTGALLERYTROPHYTYPE_SLIME          SkyBlockProfileMemberRiftGalleryTrophyType = "slime"
	SKYBLOCKPROFILEMEMBERRIFTGALLERYTROPHYTYPE_VAMPIRIC       SkyBlockProfileMemberRiftGalleryTrophyType = "vampiric"
	SKYBLOCKPROFILEMEMBERRIFTGALLERYTROPHYTYPE_WYLDLY_SUPREME SkyBlockProfileMemberRiftGalleryTrophyType = "wyldly_supreme"
)

// All allowed values of SkyBlockProfileMemberRiftGalleryTrophyType enum
var AllowedSkyBlockProfileMemberRiftGalleryTrophyTypeEnumValues = []SkyBlockProfileMemberRiftGalleryTrophyType{
	"chicken_n_egg",
	"citizen",
	"lazy_living",
	"mirrored",
	"mountain",
	"slime",
	"vampiric",
	"wyldly_supreme",
}

func (v *SkyBlockProfileMemberRiftGalleryTrophyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberRiftGalleryTrophyType(value)
	for _, existing := range AllowedSkyBlockProfileMemberRiftGalleryTrophyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberRiftGalleryTrophyType", value)
}

// NewSkyBlockProfileMemberRiftGalleryTrophyTypeFromValue returns a pointer to a valid SkyBlockProfileMemberRiftGalleryTrophyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberRiftGalleryTrophyTypeFromValue(v string) (*SkyBlockProfileMemberRiftGalleryTrophyType, error) {
	ev := SkyBlockProfileMemberRiftGalleryTrophyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberRiftGalleryTrophyType: valid values are %v", v, AllowedSkyBlockProfileMemberRiftGalleryTrophyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberRiftGalleryTrophyType) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberRiftGalleryTrophyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberRiftGalleryTrophyType value
func (v SkyBlockProfileMemberRiftGalleryTrophyType) Ptr() *SkyBlockProfileMemberRiftGalleryTrophyType {
	return &v
}

type NullableSkyBlockProfileMemberRiftGalleryTrophyType struct {
	value *SkyBlockProfileMemberRiftGalleryTrophyType
	isSet bool
}

func (v NullableSkyBlockProfileMemberRiftGalleryTrophyType) Get() *SkyBlockProfileMemberRiftGalleryTrophyType {
	return v.value
}

func (v *NullableSkyBlockProfileMemberRiftGalleryTrophyType) Set(val *SkyBlockProfileMemberRiftGalleryTrophyType) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberRiftGalleryTrophyType) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberRiftGalleryTrophyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberRiftGalleryTrophyType(val *SkyBlockProfileMemberRiftGalleryTrophyType) *NullableSkyBlockProfileMemberRiftGalleryTrophyType {
	return &NullableSkyBlockProfileMemberRiftGalleryTrophyType{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberRiftGalleryTrophyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberRiftGalleryTrophyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
