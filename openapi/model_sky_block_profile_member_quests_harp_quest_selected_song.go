/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberQuestsHarpQuestSelectedSong the model 'SkyBlockProfileMemberQuestsHarpQuestSelectedSong'
type SkyBlockProfileMemberQuestsHarpQuestSelectedSong string

// List of SkyBlockProfileMemberQuestsHarpQuest_selected_song
const (
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_AMAZING_GRACE    SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "amazing_grace"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_BRAHMS           SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "brahms"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_FIRE_AND_FLAMES  SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "fire_and_flames"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_FRERE_JACQUES    SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "frere_jacques"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_GREENSLEEVES     SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "greensleeves"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_HAPPY_BIRTHDAY   SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "happy_birthday"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_HYMN_JOY         SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "hymn_joy"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_JEOPARDY         SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "jeopardy"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_JOY_WORLD        SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "joy_world"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_MINUET           SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "minuet"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_PACHELBEL        SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "pachelbel"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_PURE_IMAGINATION SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "pure_imagination"
	SKYBLOCKPROFILEMEMBERQUESTSHARPQUESTSELECTEDSONG_VIE_EN_ROSE      SkyBlockProfileMemberQuestsHarpQuestSelectedSong = "vie_en_rose"
)

// All allowed values of SkyBlockProfileMemberQuestsHarpQuestSelectedSong enum
var AllowedSkyBlockProfileMemberQuestsHarpQuestSelectedSongEnumValues = []SkyBlockProfileMemberQuestsHarpQuestSelectedSong{
	"amazing_grace",
	"brahms",
	"fire_and_flames",
	"frere_jacques",
	"greensleeves",
	"happy_birthday",
	"hymn_joy",
	"jeopardy",
	"joy_world",
	"minuet",
	"pachelbel",
	"pure_imagination",
	"vie_en_rose",
}

func (v *SkyBlockProfileMemberQuestsHarpQuestSelectedSong) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberQuestsHarpQuestSelectedSong(value)
	for _, existing := range AllowedSkyBlockProfileMemberQuestsHarpQuestSelectedSongEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberQuestsHarpQuestSelectedSong", value)
}

// NewSkyBlockProfileMemberQuestsHarpQuestSelectedSongFromValue returns a pointer to a valid SkyBlockProfileMemberQuestsHarpQuestSelectedSong
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberQuestsHarpQuestSelectedSongFromValue(v string) (*SkyBlockProfileMemberQuestsHarpQuestSelectedSong, error) {
	ev := SkyBlockProfileMemberQuestsHarpQuestSelectedSong(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberQuestsHarpQuestSelectedSong: valid values are %v", v, AllowedSkyBlockProfileMemberQuestsHarpQuestSelectedSongEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberQuestsHarpQuestSelectedSong) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberQuestsHarpQuestSelectedSongEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberQuestsHarpQuest_selected_song value
func (v SkyBlockProfileMemberQuestsHarpQuestSelectedSong) Ptr() *SkyBlockProfileMemberQuestsHarpQuestSelectedSong {
	return &v
}

type NullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong struct {
	value *SkyBlockProfileMemberQuestsHarpQuestSelectedSong
	isSet bool
}

func (v NullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong) Get() *SkyBlockProfileMemberQuestsHarpQuestSelectedSong {
	return v.value
}

func (v *NullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong) Set(val *SkyBlockProfileMemberQuestsHarpQuestSelectedSong) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong(val *SkyBlockProfileMemberQuestsHarpQuestSelectedSong) *NullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong {
	return &NullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberQuestsHarpQuestSelectedSong) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
