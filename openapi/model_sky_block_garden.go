/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockGarden type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockGarden{}

// SkyBlockGarden struct for SkyBlockGarden
type SkyBlockGarden struct {
	ActiveCommissions  *map[string]SkyBlockGardenActiveCommissionsCommission `json:"active_commissions,omitempty"`
	CommissionData     SkyBlockGardenCommissionData                          `json:"commission_data"`
	ComposterData      SkyBlockGardenComposterData                           `json:"composter_data"`
	CropUpgradeLevels  *SkyBlockGardenCropUpgradeLevels                      `json:"crop_upgrade_levels,omitempty"`
	GardenExperience   *float64                                              `json:"garden_experience,omitempty"`
	ResourcesCollected *SkyBlockGardenResourcesCollected                     `json:"resources_collected,omitempty"`
	SelectedBarnSkin   *SkyBlockGardenBarnSkin                               `json:"selected_barn_skin,omitempty"`
	UnlockedBarnSkins  []SkyBlockGardenBarnSkin                              `json:"unlocked_barn_skins,omitempty"`
	UnlockedPlotsIds   []SkyBlockGardenUnlockedPlotsIdsInner                 `json:"unlocked_plots_ids"`
	Uuid               string                                                `json:"uuid"`
}

type _SkyBlockGarden SkyBlockGarden

// NewSkyBlockGarden instantiates a new SkyBlockGarden object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockGarden(commissionData SkyBlockGardenCommissionData, composterData SkyBlockGardenComposterData, unlockedPlotsIds []SkyBlockGardenUnlockedPlotsIdsInner, uuid string) *SkyBlockGarden {
	this := SkyBlockGarden{}
	this.CommissionData = commissionData
	this.ComposterData = composterData
	this.UnlockedPlotsIds = unlockedPlotsIds
	this.Uuid = uuid
	return &this
}

// NewSkyBlockGardenWithDefaults instantiates a new SkyBlockGarden object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockGardenWithDefaults() *SkyBlockGarden {
	this := SkyBlockGarden{}
	return &this
}

// GetActiveCommissions returns the ActiveCommissions field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetActiveCommissions() map[string]SkyBlockGardenActiveCommissionsCommission {
	if o == nil || IsNil(o.ActiveCommissions) {
		var ret map[string]SkyBlockGardenActiveCommissionsCommission
		return ret
	}
	return *o.ActiveCommissions
}

// GetActiveCommissionsOk returns a tuple with the ActiveCommissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetActiveCommissionsOk() (*map[string]SkyBlockGardenActiveCommissionsCommission, bool) {
	if o == nil || IsNil(o.ActiveCommissions) {
		return nil, false
	}
	return o.ActiveCommissions, true
}

// HasActiveCommissions returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasActiveCommissions() bool {
	if o != nil && !IsNil(o.ActiveCommissions) {
		return true
	}

	return false
}

// SetActiveCommissions gets a reference to the given map[string]SkyBlockGardenActiveCommissionsCommission and assigns it to the ActiveCommissions field.
func (o *SkyBlockGarden) SetActiveCommissions(v map[string]SkyBlockGardenActiveCommissionsCommission) {
	o.ActiveCommissions = &v
}

// GetCommissionData returns the CommissionData field value
func (o *SkyBlockGarden) GetCommissionData() SkyBlockGardenCommissionData {
	if o == nil {
		var ret SkyBlockGardenCommissionData
		return ret
	}

	return o.CommissionData
}

// GetCommissionDataOk returns a tuple with the CommissionData field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetCommissionDataOk() (*SkyBlockGardenCommissionData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommissionData, true
}

// SetCommissionData sets field value
func (o *SkyBlockGarden) SetCommissionData(v SkyBlockGardenCommissionData) {
	o.CommissionData = v
}

// GetComposterData returns the ComposterData field value
func (o *SkyBlockGarden) GetComposterData() SkyBlockGardenComposterData {
	if o == nil {
		var ret SkyBlockGardenComposterData
		return ret
	}

	return o.ComposterData
}

// GetComposterDataOk returns a tuple with the ComposterData field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetComposterDataOk() (*SkyBlockGardenComposterData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComposterData, true
}

// SetComposterData sets field value
func (o *SkyBlockGarden) SetComposterData(v SkyBlockGardenComposterData) {
	o.ComposterData = v
}

// GetCropUpgradeLevels returns the CropUpgradeLevels field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetCropUpgradeLevels() SkyBlockGardenCropUpgradeLevels {
	if o == nil || IsNil(o.CropUpgradeLevels) {
		var ret SkyBlockGardenCropUpgradeLevels
		return ret
	}
	return *o.CropUpgradeLevels
}

// GetCropUpgradeLevelsOk returns a tuple with the CropUpgradeLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetCropUpgradeLevelsOk() (*SkyBlockGardenCropUpgradeLevels, bool) {
	if o == nil || IsNil(o.CropUpgradeLevels) {
		return nil, false
	}
	return o.CropUpgradeLevels, true
}

// HasCropUpgradeLevels returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasCropUpgradeLevels() bool {
	if o != nil && !IsNil(o.CropUpgradeLevels) {
		return true
	}

	return false
}

// SetCropUpgradeLevels gets a reference to the given SkyBlockGardenCropUpgradeLevels and assigns it to the CropUpgradeLevels field.
func (o *SkyBlockGarden) SetCropUpgradeLevels(v SkyBlockGardenCropUpgradeLevels) {
	o.CropUpgradeLevels = &v
}

// GetGardenExperience returns the GardenExperience field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetGardenExperience() float64 {
	if o == nil || IsNil(o.GardenExperience) {
		var ret float64
		return ret
	}
	return *o.GardenExperience
}

// GetGardenExperienceOk returns a tuple with the GardenExperience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetGardenExperienceOk() (*float64, bool) {
	if o == nil || IsNil(o.GardenExperience) {
		return nil, false
	}
	return o.GardenExperience, true
}

// HasGardenExperience returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasGardenExperience() bool {
	if o != nil && !IsNil(o.GardenExperience) {
		return true
	}

	return false
}

// SetGardenExperience gets a reference to the given float64 and assigns it to the GardenExperience field.
func (o *SkyBlockGarden) SetGardenExperience(v float64) {
	o.GardenExperience = &v
}

// GetResourcesCollected returns the ResourcesCollected field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetResourcesCollected() SkyBlockGardenResourcesCollected {
	if o == nil || IsNil(o.ResourcesCollected) {
		var ret SkyBlockGardenResourcesCollected
		return ret
	}
	return *o.ResourcesCollected
}

// GetResourcesCollectedOk returns a tuple with the ResourcesCollected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetResourcesCollectedOk() (*SkyBlockGardenResourcesCollected, bool) {
	if o == nil || IsNil(o.ResourcesCollected) {
		return nil, false
	}
	return o.ResourcesCollected, true
}

// HasResourcesCollected returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasResourcesCollected() bool {
	if o != nil && !IsNil(o.ResourcesCollected) {
		return true
	}

	return false
}

// SetResourcesCollected gets a reference to the given SkyBlockGardenResourcesCollected and assigns it to the ResourcesCollected field.
func (o *SkyBlockGarden) SetResourcesCollected(v SkyBlockGardenResourcesCollected) {
	o.ResourcesCollected = &v
}

// GetSelectedBarnSkin returns the SelectedBarnSkin field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetSelectedBarnSkin() SkyBlockGardenBarnSkin {
	if o == nil || IsNil(o.SelectedBarnSkin) {
		var ret SkyBlockGardenBarnSkin
		return ret
	}
	return *o.SelectedBarnSkin
}

// GetSelectedBarnSkinOk returns a tuple with the SelectedBarnSkin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetSelectedBarnSkinOk() (*SkyBlockGardenBarnSkin, bool) {
	if o == nil || IsNil(o.SelectedBarnSkin) {
		return nil, false
	}
	return o.SelectedBarnSkin, true
}

// HasSelectedBarnSkin returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasSelectedBarnSkin() bool {
	if o != nil && !IsNil(o.SelectedBarnSkin) {
		return true
	}

	return false
}

// SetSelectedBarnSkin gets a reference to the given SkyBlockGardenBarnSkin and assigns it to the SelectedBarnSkin field.
func (o *SkyBlockGarden) SetSelectedBarnSkin(v SkyBlockGardenBarnSkin) {
	o.SelectedBarnSkin = &v
}

// GetUnlockedBarnSkins returns the UnlockedBarnSkins field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetUnlockedBarnSkins() []SkyBlockGardenBarnSkin {
	if o == nil || IsNil(o.UnlockedBarnSkins) {
		var ret []SkyBlockGardenBarnSkin
		return ret
	}
	return o.UnlockedBarnSkins
}

// GetUnlockedBarnSkinsOk returns a tuple with the UnlockedBarnSkins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetUnlockedBarnSkinsOk() ([]SkyBlockGardenBarnSkin, bool) {
	if o == nil || IsNil(o.UnlockedBarnSkins) {
		return nil, false
	}
	return o.UnlockedBarnSkins, true
}

// HasUnlockedBarnSkins returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasUnlockedBarnSkins() bool {
	if o != nil && !IsNil(o.UnlockedBarnSkins) {
		return true
	}

	return false
}

// SetUnlockedBarnSkins gets a reference to the given []SkyBlockGardenBarnSkin and assigns it to the UnlockedBarnSkins field.
func (o *SkyBlockGarden) SetUnlockedBarnSkins(v []SkyBlockGardenBarnSkin) {
	o.UnlockedBarnSkins = v
}

// GetUnlockedPlotsIds returns the UnlockedPlotsIds field value
func (o *SkyBlockGarden) GetUnlockedPlotsIds() []SkyBlockGardenUnlockedPlotsIdsInner {
	if o == nil {
		var ret []SkyBlockGardenUnlockedPlotsIdsInner
		return ret
	}

	return o.UnlockedPlotsIds
}

// GetUnlockedPlotsIdsOk returns a tuple with the UnlockedPlotsIds field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetUnlockedPlotsIdsOk() ([]SkyBlockGardenUnlockedPlotsIdsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnlockedPlotsIds, true
}

// SetUnlockedPlotsIds sets field value
func (o *SkyBlockGarden) SetUnlockedPlotsIds(v []SkyBlockGardenUnlockedPlotsIdsInner) {
	o.UnlockedPlotsIds = v
}

// GetUuid returns the Uuid field value
func (o *SkyBlockGarden) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *SkyBlockGarden) SetUuid(v string) {
	o.Uuid = v
}

func (o SkyBlockGarden) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockGarden) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveCommissions) {
		toSerialize["active_commissions"] = o.ActiveCommissions
	}
	toSerialize["commission_data"] = o.CommissionData
	toSerialize["composter_data"] = o.ComposterData
	if !IsNil(o.CropUpgradeLevels) {
		toSerialize["crop_upgrade_levels"] = o.CropUpgradeLevels
	}
	if !IsNil(o.GardenExperience) {
		toSerialize["garden_experience"] = o.GardenExperience
	}
	if !IsNil(o.ResourcesCollected) {
		toSerialize["resources_collected"] = o.ResourcesCollected
	}
	if !IsNil(o.SelectedBarnSkin) {
		toSerialize["selected_barn_skin"] = o.SelectedBarnSkin
	}
	if !IsNil(o.UnlockedBarnSkins) {
		toSerialize["unlocked_barn_skins"] = o.UnlockedBarnSkins
	}
	toSerialize["unlocked_plots_ids"] = o.UnlockedPlotsIds
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *SkyBlockGarden) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commission_data",
		"composter_data",
		"unlocked_plots_ids",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockGarden := _SkyBlockGarden{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockGarden)

	if err != nil {
		return err
	}

	*o = SkyBlockGarden(varSkyBlockGarden)

	return err
}

type NullableSkyBlockGarden struct {
	value *SkyBlockGarden
	isSet bool
}

func (v NullableSkyBlockGarden) Get() *SkyBlockGarden {
	return v.value
}

func (v *NullableSkyBlockGarden) Set(val *SkyBlockGarden) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockGarden) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockGarden) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockGarden(val *SkyBlockGarden) *NullableSkyBlockGarden {
	return &NullableSkyBlockGarden{value: val, isSet: true}
}

func (v NullableSkyBlockGarden) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockGarden) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
