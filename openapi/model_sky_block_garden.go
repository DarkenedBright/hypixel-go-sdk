/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockGarden type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockGarden{}

// SkyBlockGarden Information about a player's SkyBlock garden, the only guaranteed field is the `uuid` field.
type SkyBlockGarden struct {
	// The UUID of the profile for this garden.
	Uuid              string                        `json:"uuid"`
	CommissionData    *SkyBlockGardenCommissionData `json:"commission_data,omitempty"`
	ComposterData     map[string]interface{}        `json:"composter_data,omitempty"`
	ActiveCommissions map[string]interface{}        `json:"active_commissions,omitempty"`
	// A map of resource ID to amount collected
	ResourcesCollected map[string]interface{} `json:"resources_collected,omitempty"`
	CropUpgradeLevels  map[string]interface{} `json:"crop_upgrade_levels,omitempty"`
	UnlockedPlotsIds   []string               `json:"unlocked_plots_ids,omitempty"`
	GardenExperience   *float64               `json:"garden_experience,omitempty"`
	UnlockedBarnSkins  []string               `json:"unlocked_barn_skins,omitempty"`
	SelectedBarnSkin   *string                `json:"selected_barn_skin,omitempty"`
}

type _SkyBlockGarden SkyBlockGarden

// NewSkyBlockGarden instantiates a new SkyBlockGarden object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockGarden(uuid string) *SkyBlockGarden {
	this := SkyBlockGarden{}
	this.Uuid = uuid
	return &this
}

// NewSkyBlockGardenWithDefaults instantiates a new SkyBlockGarden object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockGardenWithDefaults() *SkyBlockGarden {
	this := SkyBlockGarden{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *SkyBlockGarden) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *SkyBlockGarden) SetUuid(v string) {
	o.Uuid = v
}

// GetCommissionData returns the CommissionData field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetCommissionData() SkyBlockGardenCommissionData {
	if o == nil || IsNil(o.CommissionData) {
		var ret SkyBlockGardenCommissionData
		return ret
	}
	return *o.CommissionData
}

// GetCommissionDataOk returns a tuple with the CommissionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetCommissionDataOk() (*SkyBlockGardenCommissionData, bool) {
	if o == nil || IsNil(o.CommissionData) {
		return nil, false
	}
	return o.CommissionData, true
}

// HasCommissionData returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasCommissionData() bool {
	if o != nil && !IsNil(o.CommissionData) {
		return true
	}

	return false
}

// SetCommissionData gets a reference to the given SkyBlockGardenCommissionData and assigns it to the CommissionData field.
func (o *SkyBlockGarden) SetCommissionData(v SkyBlockGardenCommissionData) {
	o.CommissionData = &v
}

// GetComposterData returns the ComposterData field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetComposterData() map[string]interface{} {
	if o == nil || IsNil(o.ComposterData) {
		var ret map[string]interface{}
		return ret
	}
	return o.ComposterData
}

// GetComposterDataOk returns a tuple with the ComposterData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetComposterDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ComposterData) {
		return map[string]interface{}{}, false
	}
	return o.ComposterData, true
}

// HasComposterData returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasComposterData() bool {
	if o != nil && !IsNil(o.ComposterData) {
		return true
	}

	return false
}

// SetComposterData gets a reference to the given map[string]interface{} and assigns it to the ComposterData field.
func (o *SkyBlockGarden) SetComposterData(v map[string]interface{}) {
	o.ComposterData = v
}

// GetActiveCommissions returns the ActiveCommissions field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetActiveCommissions() map[string]interface{} {
	if o == nil || IsNil(o.ActiveCommissions) {
		var ret map[string]interface{}
		return ret
	}
	return o.ActiveCommissions
}

// GetActiveCommissionsOk returns a tuple with the ActiveCommissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetActiveCommissionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ActiveCommissions) {
		return map[string]interface{}{}, false
	}
	return o.ActiveCommissions, true
}

// HasActiveCommissions returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasActiveCommissions() bool {
	if o != nil && !IsNil(o.ActiveCommissions) {
		return true
	}

	return false
}

// SetActiveCommissions gets a reference to the given map[string]interface{} and assigns it to the ActiveCommissions field.
func (o *SkyBlockGarden) SetActiveCommissions(v map[string]interface{}) {
	o.ActiveCommissions = v
}

// GetResourcesCollected returns the ResourcesCollected field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetResourcesCollected() map[string]interface{} {
	if o == nil || IsNil(o.ResourcesCollected) {
		var ret map[string]interface{}
		return ret
	}
	return o.ResourcesCollected
}

// GetResourcesCollectedOk returns a tuple with the ResourcesCollected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetResourcesCollectedOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ResourcesCollected) {
		return map[string]interface{}{}, false
	}
	return o.ResourcesCollected, true
}

// HasResourcesCollected returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasResourcesCollected() bool {
	if o != nil && !IsNil(o.ResourcesCollected) {
		return true
	}

	return false
}

// SetResourcesCollected gets a reference to the given map[string]interface{} and assigns it to the ResourcesCollected field.
func (o *SkyBlockGarden) SetResourcesCollected(v map[string]interface{}) {
	o.ResourcesCollected = v
}

// GetCropUpgradeLevels returns the CropUpgradeLevels field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetCropUpgradeLevels() map[string]interface{} {
	if o == nil || IsNil(o.CropUpgradeLevels) {
		var ret map[string]interface{}
		return ret
	}
	return o.CropUpgradeLevels
}

// GetCropUpgradeLevelsOk returns a tuple with the CropUpgradeLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetCropUpgradeLevelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CropUpgradeLevels) {
		return map[string]interface{}{}, false
	}
	return o.CropUpgradeLevels, true
}

// HasCropUpgradeLevels returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasCropUpgradeLevels() bool {
	if o != nil && !IsNil(o.CropUpgradeLevels) {
		return true
	}

	return false
}

// SetCropUpgradeLevels gets a reference to the given map[string]interface{} and assigns it to the CropUpgradeLevels field.
func (o *SkyBlockGarden) SetCropUpgradeLevels(v map[string]interface{}) {
	o.CropUpgradeLevels = v
}

// GetUnlockedPlotsIds returns the UnlockedPlotsIds field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetUnlockedPlotsIds() []string {
	if o == nil || IsNil(o.UnlockedPlotsIds) {
		var ret []string
		return ret
	}
	return o.UnlockedPlotsIds
}

// GetUnlockedPlotsIdsOk returns a tuple with the UnlockedPlotsIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetUnlockedPlotsIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UnlockedPlotsIds) {
		return nil, false
	}
	return o.UnlockedPlotsIds, true
}

// HasUnlockedPlotsIds returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasUnlockedPlotsIds() bool {
	if o != nil && !IsNil(o.UnlockedPlotsIds) {
		return true
	}

	return false
}

// SetUnlockedPlotsIds gets a reference to the given []string and assigns it to the UnlockedPlotsIds field.
func (o *SkyBlockGarden) SetUnlockedPlotsIds(v []string) {
	o.UnlockedPlotsIds = v
}

// GetGardenExperience returns the GardenExperience field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetGardenExperience() float64 {
	if o == nil || IsNil(o.GardenExperience) {
		var ret float64
		return ret
	}
	return *o.GardenExperience
}

// GetGardenExperienceOk returns a tuple with the GardenExperience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetGardenExperienceOk() (*float64, bool) {
	if o == nil || IsNil(o.GardenExperience) {
		return nil, false
	}
	return o.GardenExperience, true
}

// HasGardenExperience returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasGardenExperience() bool {
	if o != nil && !IsNil(o.GardenExperience) {
		return true
	}

	return false
}

// SetGardenExperience gets a reference to the given float64 and assigns it to the GardenExperience field.
func (o *SkyBlockGarden) SetGardenExperience(v float64) {
	o.GardenExperience = &v
}

// GetUnlockedBarnSkins returns the UnlockedBarnSkins field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetUnlockedBarnSkins() []string {
	if o == nil || IsNil(o.UnlockedBarnSkins) {
		var ret []string
		return ret
	}
	return o.UnlockedBarnSkins
}

// GetUnlockedBarnSkinsOk returns a tuple with the UnlockedBarnSkins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetUnlockedBarnSkinsOk() ([]string, bool) {
	if o == nil || IsNil(o.UnlockedBarnSkins) {
		return nil, false
	}
	return o.UnlockedBarnSkins, true
}

// HasUnlockedBarnSkins returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasUnlockedBarnSkins() bool {
	if o != nil && !IsNil(o.UnlockedBarnSkins) {
		return true
	}

	return false
}

// SetUnlockedBarnSkins gets a reference to the given []string and assigns it to the UnlockedBarnSkins field.
func (o *SkyBlockGarden) SetUnlockedBarnSkins(v []string) {
	o.UnlockedBarnSkins = v
}

// GetSelectedBarnSkin returns the SelectedBarnSkin field value if set, zero value otherwise.
func (o *SkyBlockGarden) GetSelectedBarnSkin() string {
	if o == nil || IsNil(o.SelectedBarnSkin) {
		var ret string
		return ret
	}
	return *o.SelectedBarnSkin
}

// GetSelectedBarnSkinOk returns a tuple with the SelectedBarnSkin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockGarden) GetSelectedBarnSkinOk() (*string, bool) {
	if o == nil || IsNil(o.SelectedBarnSkin) {
		return nil, false
	}
	return o.SelectedBarnSkin, true
}

// HasSelectedBarnSkin returns a boolean if a field has been set.
func (o *SkyBlockGarden) HasSelectedBarnSkin() bool {
	if o != nil && !IsNil(o.SelectedBarnSkin) {
		return true
	}

	return false
}

// SetSelectedBarnSkin gets a reference to the given string and assigns it to the SelectedBarnSkin field.
func (o *SkyBlockGarden) SetSelectedBarnSkin(v string) {
	o.SelectedBarnSkin = &v
}

func (o SkyBlockGarden) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockGarden) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.CommissionData) {
		toSerialize["commission_data"] = o.CommissionData
	}
	if !IsNil(o.ComposterData) {
		toSerialize["composter_data"] = o.ComposterData
	}
	if !IsNil(o.ActiveCommissions) {
		toSerialize["active_commissions"] = o.ActiveCommissions
	}
	if !IsNil(o.ResourcesCollected) {
		toSerialize["resources_collected"] = o.ResourcesCollected
	}
	if !IsNil(o.CropUpgradeLevels) {
		toSerialize["crop_upgrade_levels"] = o.CropUpgradeLevels
	}
	if !IsNil(o.UnlockedPlotsIds) {
		toSerialize["unlocked_plots_ids"] = o.UnlockedPlotsIds
	}
	if !IsNil(o.GardenExperience) {
		toSerialize["garden_experience"] = o.GardenExperience
	}
	if !IsNil(o.UnlockedBarnSkins) {
		toSerialize["unlocked_barn_skins"] = o.UnlockedBarnSkins
	}
	if !IsNil(o.SelectedBarnSkin) {
		toSerialize["selected_barn_skin"] = o.SelectedBarnSkin
	}
	return toSerialize, nil
}

func (o *SkyBlockGarden) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockGarden := _SkyBlockGarden{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockGarden)

	if err != nil {
		return err
	}

	*o = SkyBlockGarden(varSkyBlockGarden)

	return err
}

type NullableSkyBlockGarden struct {
	value *SkyBlockGarden
	isSet bool
}

func (v NullableSkyBlockGarden) Get() *SkyBlockGarden {
	return v.value
}

func (v *NullableSkyBlockGarden) Set(val *SkyBlockGarden) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockGarden) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockGarden) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockGarden(val *SkyBlockGarden) *NullableSkyBlockGarden {
	return &NullableSkyBlockGarden{value: val, isSet: true}
}

func (v NullableSkyBlockGarden) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockGarden) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
