/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberEventsEasterRabbitSort the model 'SkyBlockProfileMemberEventsEasterRabbitSort'
type SkyBlockProfileMemberEventsEasterRabbitSort string

// List of SkyBlockProfileMemberEventsEaster_rabbit_sort
const (
	SKYBLOCKPROFILEMEMBEREVENTSEASTERRABBITSORT_A_TO_Z         SkyBlockProfileMemberEventsEasterRabbitSort = "a_to_z"
	SKYBLOCKPROFILEMEMBEREVENTSEASTERRABBITSORT_HIGHEST_RARITY SkyBlockProfileMemberEventsEasterRabbitSort = "highest_rarity"
	SKYBLOCKPROFILEMEMBEREVENTSEASTERRABBITSORT_LOWEST_RARITY  SkyBlockProfileMemberEventsEasterRabbitSort = "lowest_rarity"
	SKYBLOCKPROFILEMEMBEREVENTSEASTERRABBITSORT_RABBITS_FOUND  SkyBlockProfileMemberEventsEasterRabbitSort = "rabbits_found"
	SKYBLOCKPROFILEMEMBEREVENTSEASTERRABBITSORT_Z_TO_A         SkyBlockProfileMemberEventsEasterRabbitSort = "z_to_a"
)

// All allowed values of SkyBlockProfileMemberEventsEasterRabbitSort enum
var AllowedSkyBlockProfileMemberEventsEasterRabbitSortEnumValues = []SkyBlockProfileMemberEventsEasterRabbitSort{
	"a_to_z",
	"highest_rarity",
	"lowest_rarity",
	"rabbits_found",
	"z_to_a",
}

func (v *SkyBlockProfileMemberEventsEasterRabbitSort) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberEventsEasterRabbitSort(value)
	for _, existing := range AllowedSkyBlockProfileMemberEventsEasterRabbitSortEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberEventsEasterRabbitSort", value)
}

// NewSkyBlockProfileMemberEventsEasterRabbitSortFromValue returns a pointer to a valid SkyBlockProfileMemberEventsEasterRabbitSort
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberEventsEasterRabbitSortFromValue(v string) (*SkyBlockProfileMemberEventsEasterRabbitSort, error) {
	ev := SkyBlockProfileMemberEventsEasterRabbitSort(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberEventsEasterRabbitSort: valid values are %v", v, AllowedSkyBlockProfileMemberEventsEasterRabbitSortEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberEventsEasterRabbitSort) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberEventsEasterRabbitSortEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberEventsEaster_rabbit_sort value
func (v SkyBlockProfileMemberEventsEasterRabbitSort) Ptr() *SkyBlockProfileMemberEventsEasterRabbitSort {
	return &v
}

type NullableSkyBlockProfileMemberEventsEasterRabbitSort struct {
	value *SkyBlockProfileMemberEventsEasterRabbitSort
	isSet bool
}

func (v NullableSkyBlockProfileMemberEventsEasterRabbitSort) Get() *SkyBlockProfileMemberEventsEasterRabbitSort {
	return v.value
}

func (v *NullableSkyBlockProfileMemberEventsEasterRabbitSort) Set(val *SkyBlockProfileMemberEventsEasterRabbitSort) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberEventsEasterRabbitSort) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberEventsEasterRabbitSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberEventsEasterRabbitSort(val *SkyBlockProfileMemberEventsEasterRabbitSort) *NullableSkyBlockProfileMemberEventsEasterRabbitSort {
	return &NullableSkyBlockProfileMemberEventsEasterRabbitSort{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberEventsEasterRabbitSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberEventsEasterRabbitSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
