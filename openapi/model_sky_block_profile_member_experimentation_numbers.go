/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberExperimentationNumbers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberExperimentationNumbers{}

// SkyBlockProfileMemberExperimentationNumbers struct for SkyBlockProfileMemberExperimentationNumbers
type SkyBlockProfileMemberExperimentationNumbers struct {
	Attempts1   *int64 `json:"attempts_1,omitempty"`
	Attempts2   *int64 `json:"attempts_2,omitempty"`
	Attempts3   *int64 `json:"attempts_3,omitempty"`
	BestScore1  *int64 `json:"best_score_1,omitempty"`
	BestScore2  *int64 `json:"best_score_2,omitempty"`
	BestScore3  *int64 `json:"best_score_3,omitempty"`
	BonusClicks *int64 `json:"bonus_clicks,omitempty"`
	Claimed     *bool  `json:"claimed,omitempty"`
	Claims1     *int64 `json:"claims_1,omitempty"`
	Claims2     *int64 `json:"claims_2,omitempty"`
	Claims3     *int64 `json:"claims_3,omitempty"`
	LastAttempt *int64 `json:"last_attempt,omitempty"`
	LastClaimed *int64 `json:"last_claimed,omitempty"`
}

// NewSkyBlockProfileMemberExperimentationNumbers instantiates a new SkyBlockProfileMemberExperimentationNumbers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberExperimentationNumbers() *SkyBlockProfileMemberExperimentationNumbers {
	this := SkyBlockProfileMemberExperimentationNumbers{}
	return &this
}

// NewSkyBlockProfileMemberExperimentationNumbersWithDefaults instantiates a new SkyBlockProfileMemberExperimentationNumbers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberExperimentationNumbersWithDefaults() *SkyBlockProfileMemberExperimentationNumbers {
	this := SkyBlockProfileMemberExperimentationNumbers{}
	return &this
}

// GetAttempts1 returns the Attempts1 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetAttempts1() int64 {
	if o == nil || IsNil(o.Attempts1) {
		var ret int64
		return ret
	}
	return *o.Attempts1
}

// GetAttempts1Ok returns a tuple with the Attempts1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetAttempts1Ok() (*int64, bool) {
	if o == nil || IsNil(o.Attempts1) {
		return nil, false
	}
	return o.Attempts1, true
}

// HasAttempts1 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasAttempts1() bool {
	if o != nil && !IsNil(o.Attempts1) {
		return true
	}

	return false
}

// SetAttempts1 gets a reference to the given int64 and assigns it to the Attempts1 field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetAttempts1(v int64) {
	o.Attempts1 = &v
}

// GetAttempts2 returns the Attempts2 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetAttempts2() int64 {
	if o == nil || IsNil(o.Attempts2) {
		var ret int64
		return ret
	}
	return *o.Attempts2
}

// GetAttempts2Ok returns a tuple with the Attempts2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetAttempts2Ok() (*int64, bool) {
	if o == nil || IsNil(o.Attempts2) {
		return nil, false
	}
	return o.Attempts2, true
}

// HasAttempts2 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasAttempts2() bool {
	if o != nil && !IsNil(o.Attempts2) {
		return true
	}

	return false
}

// SetAttempts2 gets a reference to the given int64 and assigns it to the Attempts2 field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetAttempts2(v int64) {
	o.Attempts2 = &v
}

// GetAttempts3 returns the Attempts3 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetAttempts3() int64 {
	if o == nil || IsNil(o.Attempts3) {
		var ret int64
		return ret
	}
	return *o.Attempts3
}

// GetAttempts3Ok returns a tuple with the Attempts3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetAttempts3Ok() (*int64, bool) {
	if o == nil || IsNil(o.Attempts3) {
		return nil, false
	}
	return o.Attempts3, true
}

// HasAttempts3 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasAttempts3() bool {
	if o != nil && !IsNil(o.Attempts3) {
		return true
	}

	return false
}

// SetAttempts3 gets a reference to the given int64 and assigns it to the Attempts3 field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetAttempts3(v int64) {
	o.Attempts3 = &v
}

// GetBestScore1 returns the BestScore1 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetBestScore1() int64 {
	if o == nil || IsNil(o.BestScore1) {
		var ret int64
		return ret
	}
	return *o.BestScore1
}

// GetBestScore1Ok returns a tuple with the BestScore1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetBestScore1Ok() (*int64, bool) {
	if o == nil || IsNil(o.BestScore1) {
		return nil, false
	}
	return o.BestScore1, true
}

// HasBestScore1 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasBestScore1() bool {
	if o != nil && !IsNil(o.BestScore1) {
		return true
	}

	return false
}

// SetBestScore1 gets a reference to the given int64 and assigns it to the BestScore1 field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetBestScore1(v int64) {
	o.BestScore1 = &v
}

// GetBestScore2 returns the BestScore2 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetBestScore2() int64 {
	if o == nil || IsNil(o.BestScore2) {
		var ret int64
		return ret
	}
	return *o.BestScore2
}

// GetBestScore2Ok returns a tuple with the BestScore2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetBestScore2Ok() (*int64, bool) {
	if o == nil || IsNil(o.BestScore2) {
		return nil, false
	}
	return o.BestScore2, true
}

// HasBestScore2 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasBestScore2() bool {
	if o != nil && !IsNil(o.BestScore2) {
		return true
	}

	return false
}

// SetBestScore2 gets a reference to the given int64 and assigns it to the BestScore2 field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetBestScore2(v int64) {
	o.BestScore2 = &v
}

// GetBestScore3 returns the BestScore3 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetBestScore3() int64 {
	if o == nil || IsNil(o.BestScore3) {
		var ret int64
		return ret
	}
	return *o.BestScore3
}

// GetBestScore3Ok returns a tuple with the BestScore3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetBestScore3Ok() (*int64, bool) {
	if o == nil || IsNil(o.BestScore3) {
		return nil, false
	}
	return o.BestScore3, true
}

// HasBestScore3 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasBestScore3() bool {
	if o != nil && !IsNil(o.BestScore3) {
		return true
	}

	return false
}

// SetBestScore3 gets a reference to the given int64 and assigns it to the BestScore3 field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetBestScore3(v int64) {
	o.BestScore3 = &v
}

// GetBonusClicks returns the BonusClicks field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetBonusClicks() int64 {
	if o == nil || IsNil(o.BonusClicks) {
		var ret int64
		return ret
	}
	return *o.BonusClicks
}

// GetBonusClicksOk returns a tuple with the BonusClicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetBonusClicksOk() (*int64, bool) {
	if o == nil || IsNil(o.BonusClicks) {
		return nil, false
	}
	return o.BonusClicks, true
}

// HasBonusClicks returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasBonusClicks() bool {
	if o != nil && !IsNil(o.BonusClicks) {
		return true
	}

	return false
}

// SetBonusClicks gets a reference to the given int64 and assigns it to the BonusClicks field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetBonusClicks(v int64) {
	o.BonusClicks = &v
}

// GetClaimed returns the Claimed field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetClaimed() bool {
	if o == nil || IsNil(o.Claimed) {
		var ret bool
		return ret
	}
	return *o.Claimed
}

// GetClaimedOk returns a tuple with the Claimed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetClaimedOk() (*bool, bool) {
	if o == nil || IsNil(o.Claimed) {
		return nil, false
	}
	return o.Claimed, true
}

// HasClaimed returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasClaimed() bool {
	if o != nil && !IsNil(o.Claimed) {
		return true
	}

	return false
}

// SetClaimed gets a reference to the given bool and assigns it to the Claimed field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetClaimed(v bool) {
	o.Claimed = &v
}

// GetClaims1 returns the Claims1 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetClaims1() int64 {
	if o == nil || IsNil(o.Claims1) {
		var ret int64
		return ret
	}
	return *o.Claims1
}

// GetClaims1Ok returns a tuple with the Claims1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetClaims1Ok() (*int64, bool) {
	if o == nil || IsNil(o.Claims1) {
		return nil, false
	}
	return o.Claims1, true
}

// HasClaims1 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasClaims1() bool {
	if o != nil && !IsNil(o.Claims1) {
		return true
	}

	return false
}

// SetClaims1 gets a reference to the given int64 and assigns it to the Claims1 field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetClaims1(v int64) {
	o.Claims1 = &v
}

// GetClaims2 returns the Claims2 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetClaims2() int64 {
	if o == nil || IsNil(o.Claims2) {
		var ret int64
		return ret
	}
	return *o.Claims2
}

// GetClaims2Ok returns a tuple with the Claims2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetClaims2Ok() (*int64, bool) {
	if o == nil || IsNil(o.Claims2) {
		return nil, false
	}
	return o.Claims2, true
}

// HasClaims2 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasClaims2() bool {
	if o != nil && !IsNil(o.Claims2) {
		return true
	}

	return false
}

// SetClaims2 gets a reference to the given int64 and assigns it to the Claims2 field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetClaims2(v int64) {
	o.Claims2 = &v
}

// GetClaims3 returns the Claims3 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetClaims3() int64 {
	if o == nil || IsNil(o.Claims3) {
		var ret int64
		return ret
	}
	return *o.Claims3
}

// GetClaims3Ok returns a tuple with the Claims3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetClaims3Ok() (*int64, bool) {
	if o == nil || IsNil(o.Claims3) {
		return nil, false
	}
	return o.Claims3, true
}

// HasClaims3 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasClaims3() bool {
	if o != nil && !IsNil(o.Claims3) {
		return true
	}

	return false
}

// SetClaims3 gets a reference to the given int64 and assigns it to the Claims3 field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetClaims3(v int64) {
	o.Claims3 = &v
}

// GetLastAttempt returns the LastAttempt field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetLastAttempt() int64 {
	if o == nil || IsNil(o.LastAttempt) {
		var ret int64
		return ret
	}
	return *o.LastAttempt
}

// GetLastAttemptOk returns a tuple with the LastAttempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetLastAttemptOk() (*int64, bool) {
	if o == nil || IsNil(o.LastAttempt) {
		return nil, false
	}
	return o.LastAttempt, true
}

// HasLastAttempt returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasLastAttempt() bool {
	if o != nil && !IsNil(o.LastAttempt) {
		return true
	}

	return false
}

// SetLastAttempt gets a reference to the given int64 and assigns it to the LastAttempt field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetLastAttempt(v int64) {
	o.LastAttempt = &v
}

// GetLastClaimed returns the LastClaimed field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetLastClaimed() int64 {
	if o == nil || IsNil(o.LastClaimed) {
		var ret int64
		return ret
	}
	return *o.LastClaimed
}

// GetLastClaimedOk returns a tuple with the LastClaimed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) GetLastClaimedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastClaimed) {
		return nil, false
	}
	return o.LastClaimed, true
}

// HasLastClaimed returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberExperimentationNumbers) HasLastClaimed() bool {
	if o != nil && !IsNil(o.LastClaimed) {
		return true
	}

	return false
}

// SetLastClaimed gets a reference to the given int64 and assigns it to the LastClaimed field.
func (o *SkyBlockProfileMemberExperimentationNumbers) SetLastClaimed(v int64) {
	o.LastClaimed = &v
}

func (o SkyBlockProfileMemberExperimentationNumbers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberExperimentationNumbers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attempts1) {
		toSerialize["attempts_1"] = o.Attempts1
	}
	if !IsNil(o.Attempts2) {
		toSerialize["attempts_2"] = o.Attempts2
	}
	if !IsNil(o.Attempts3) {
		toSerialize["attempts_3"] = o.Attempts3
	}
	if !IsNil(o.BestScore1) {
		toSerialize["best_score_1"] = o.BestScore1
	}
	if !IsNil(o.BestScore2) {
		toSerialize["best_score_2"] = o.BestScore2
	}
	if !IsNil(o.BestScore3) {
		toSerialize["best_score_3"] = o.BestScore3
	}
	if !IsNil(o.BonusClicks) {
		toSerialize["bonus_clicks"] = o.BonusClicks
	}
	if !IsNil(o.Claimed) {
		toSerialize["claimed"] = o.Claimed
	}
	if !IsNil(o.Claims1) {
		toSerialize["claims_1"] = o.Claims1
	}
	if !IsNil(o.Claims2) {
		toSerialize["claims_2"] = o.Claims2
	}
	if !IsNil(o.Claims3) {
		toSerialize["claims_3"] = o.Claims3
	}
	if !IsNil(o.LastAttempt) {
		toSerialize["last_attempt"] = o.LastAttempt
	}
	if !IsNil(o.LastClaimed) {
		toSerialize["last_claimed"] = o.LastClaimed
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberExperimentationNumbers struct {
	value *SkyBlockProfileMemberExperimentationNumbers
	isSet bool
}

func (v NullableSkyBlockProfileMemberExperimentationNumbers) Get() *SkyBlockProfileMemberExperimentationNumbers {
	return v.value
}

func (v *NullableSkyBlockProfileMemberExperimentationNumbers) Set(val *SkyBlockProfileMemberExperimentationNumbers) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberExperimentationNumbers) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberExperimentationNumbers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberExperimentationNumbers(val *SkyBlockProfileMemberExperimentationNumbers) *NullableSkyBlockProfileMemberExperimentationNumbers {
	return &NullableSkyBlockProfileMemberExperimentationNumbers{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberExperimentationNumbers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberExperimentationNumbers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
