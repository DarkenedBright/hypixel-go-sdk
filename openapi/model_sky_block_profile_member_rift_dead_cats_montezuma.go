/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberRiftDeadCatsMontezuma type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberRiftDeadCatsMontezuma{}

// SkyBlockProfileMemberRiftDeadCatsMontezuma struct for SkyBlockProfileMemberRiftDeadCatsMontezuma
type SkyBlockProfileMemberRiftDeadCatsMontezuma struct {
	Active    *bool         `json:"active,omitempty"`
	CandyUsed *int64        `json:"candyUsed,omitempty"`
	Exp       *float64      `json:"exp,omitempty"`
	HeldItem  *SkyBlockItem `json:"heldItem,omitempty"`
	Skin      *SkyBlockItem `json:"skin,omitempty"`
	Tier      *string       `json:"tier,omitempty"`
	Type      *string       `json:"type,omitempty"`
	UniqueId  *string       `json:"uniqueId,omitempty"`
	Uuid      *string       `json:"uuid,omitempty"`
}

// NewSkyBlockProfileMemberRiftDeadCatsMontezuma instantiates a new SkyBlockProfileMemberRiftDeadCatsMontezuma object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberRiftDeadCatsMontezuma() *SkyBlockProfileMemberRiftDeadCatsMontezuma {
	this := SkyBlockProfileMemberRiftDeadCatsMontezuma{}
	return &this
}

// NewSkyBlockProfileMemberRiftDeadCatsMontezumaWithDefaults instantiates a new SkyBlockProfileMemberRiftDeadCatsMontezuma object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberRiftDeadCatsMontezumaWithDefaults() *SkyBlockProfileMemberRiftDeadCatsMontezuma {
	this := SkyBlockProfileMemberRiftDeadCatsMontezuma{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) SetActive(v bool) {
	o.Active = &v
}

// GetCandyUsed returns the CandyUsed field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetCandyUsed() int64 {
	if o == nil || IsNil(o.CandyUsed) {
		var ret int64
		return ret
	}
	return *o.CandyUsed
}

// GetCandyUsedOk returns a tuple with the CandyUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetCandyUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.CandyUsed) {
		return nil, false
	}
	return o.CandyUsed, true
}

// HasCandyUsed returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) HasCandyUsed() bool {
	if o != nil && !IsNil(o.CandyUsed) {
		return true
	}

	return false
}

// SetCandyUsed gets a reference to the given int64 and assigns it to the CandyUsed field.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) SetCandyUsed(v int64) {
	o.CandyUsed = &v
}

// GetExp returns the Exp field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetExp() float64 {
	if o == nil || IsNil(o.Exp) {
		var ret float64
		return ret
	}
	return *o.Exp
}

// GetExpOk returns a tuple with the Exp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetExpOk() (*float64, bool) {
	if o == nil || IsNil(o.Exp) {
		return nil, false
	}
	return o.Exp, true
}

// HasExp returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) HasExp() bool {
	if o != nil && !IsNil(o.Exp) {
		return true
	}

	return false
}

// SetExp gets a reference to the given float64 and assigns it to the Exp field.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) SetExp(v float64) {
	o.Exp = &v
}

// GetHeldItem returns the HeldItem field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetHeldItem() SkyBlockItem {
	if o == nil || IsNil(o.HeldItem) {
		var ret SkyBlockItem
		return ret
	}
	return *o.HeldItem
}

// GetHeldItemOk returns a tuple with the HeldItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetHeldItemOk() (*SkyBlockItem, bool) {
	if o == nil || IsNil(o.HeldItem) {
		return nil, false
	}
	return o.HeldItem, true
}

// HasHeldItem returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) HasHeldItem() bool {
	if o != nil && !IsNil(o.HeldItem) {
		return true
	}

	return false
}

// SetHeldItem gets a reference to the given SkyBlockItem and assigns it to the HeldItem field.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) SetHeldItem(v SkyBlockItem) {
	o.HeldItem = &v
}

// GetSkin returns the Skin field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetSkin() SkyBlockItem {
	if o == nil || IsNil(o.Skin) {
		var ret SkyBlockItem
		return ret
	}
	return *o.Skin
}

// GetSkinOk returns a tuple with the Skin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetSkinOk() (*SkyBlockItem, bool) {
	if o == nil || IsNil(o.Skin) {
		return nil, false
	}
	return o.Skin, true
}

// HasSkin returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) HasSkin() bool {
	if o != nil && !IsNil(o.Skin) {
		return true
	}

	return false
}

// SetSkin gets a reference to the given SkyBlockItem and assigns it to the Skin field.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) SetSkin(v SkyBlockItem) {
	o.Skin = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetTier() string {
	if o == nil || IsNil(o.Tier) {
		var ret string
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetTierOk() (*string, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given string and assigns it to the Tier field.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) SetTier(v string) {
	o.Tier = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) SetType(v string) {
	o.Type = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetUniqueId() string {
	if o == nil || IsNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) SetUniqueId(v string) {
	o.UniqueId = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SkyBlockProfileMemberRiftDeadCatsMontezuma) SetUuid(v string) {
	o.Uuid = &v
}

func (o SkyBlockProfileMemberRiftDeadCatsMontezuma) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberRiftDeadCatsMontezuma) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.CandyUsed) {
		toSerialize["candyUsed"] = o.CandyUsed
	}
	if !IsNil(o.Exp) {
		toSerialize["exp"] = o.Exp
	}
	if !IsNil(o.HeldItem) {
		toSerialize["heldItem"] = o.HeldItem
	}
	if !IsNil(o.Skin) {
		toSerialize["skin"] = o.Skin
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UniqueId) {
		toSerialize["uniqueId"] = o.UniqueId
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberRiftDeadCatsMontezuma struct {
	value *SkyBlockProfileMemberRiftDeadCatsMontezuma
	isSet bool
}

func (v NullableSkyBlockProfileMemberRiftDeadCatsMontezuma) Get() *SkyBlockProfileMemberRiftDeadCatsMontezuma {
	return v.value
}

func (v *NullableSkyBlockProfileMemberRiftDeadCatsMontezuma) Set(val *SkyBlockProfileMemberRiftDeadCatsMontezuma) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberRiftDeadCatsMontezuma) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberRiftDeadCatsMontezuma) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberRiftDeadCatsMontezuma(val *SkyBlockProfileMemberRiftDeadCatsMontezuma) *NullableSkyBlockProfileMemberRiftDeadCatsMontezuma {
	return &NullableSkyBlockProfileMemberRiftDeadCatsMontezuma{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberRiftDeadCatsMontezuma) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberRiftDeadCatsMontezuma) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
