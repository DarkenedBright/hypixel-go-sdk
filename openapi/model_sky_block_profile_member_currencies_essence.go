/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberCurrenciesEssence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberCurrenciesEssence{}

// SkyBlockProfileMemberCurrenciesEssence struct for SkyBlockProfileMemberCurrenciesEssence
type SkyBlockProfileMemberCurrenciesEssence struct {
	CRIMSON *SkyBlockProfileMemberCurrenciesEssenceData `json:"CRIMSON,omitempty"`
	DIAMOND *SkyBlockProfileMemberCurrenciesEssenceData `json:"DIAMOND,omitempty"`
	DRAGON  *SkyBlockProfileMemberCurrenciesEssenceData `json:"DRAGON,omitempty"`
	GOLD    *SkyBlockProfileMemberCurrenciesEssenceData `json:"GOLD,omitempty"`
	ICE     *SkyBlockProfileMemberCurrenciesEssenceData `json:"ICE,omitempty"`
	SPIDER  *SkyBlockProfileMemberCurrenciesEssenceData `json:"SPIDER,omitempty"`
	UNDEAD  *SkyBlockProfileMemberCurrenciesEssenceData `json:"UNDEAD,omitempty"`
	WITHER  *SkyBlockProfileMemberCurrenciesEssenceData `json:"WITHER,omitempty"`
}

// NewSkyBlockProfileMemberCurrenciesEssence instantiates a new SkyBlockProfileMemberCurrenciesEssence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberCurrenciesEssence() *SkyBlockProfileMemberCurrenciesEssence {
	this := SkyBlockProfileMemberCurrenciesEssence{}
	return &this
}

// NewSkyBlockProfileMemberCurrenciesEssenceWithDefaults instantiates a new SkyBlockProfileMemberCurrenciesEssence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberCurrenciesEssenceWithDefaults() *SkyBlockProfileMemberCurrenciesEssence {
	this := SkyBlockProfileMemberCurrenciesEssence{}
	return &this
}

// GetCRIMSON returns the CRIMSON field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetCRIMSON() SkyBlockProfileMemberCurrenciesEssenceData {
	if o == nil || IsNil(o.CRIMSON) {
		var ret SkyBlockProfileMemberCurrenciesEssenceData
		return ret
	}
	return *o.CRIMSON
}

// GetCRIMSONOk returns a tuple with the CRIMSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetCRIMSONOk() (*SkyBlockProfileMemberCurrenciesEssenceData, bool) {
	if o == nil || IsNil(o.CRIMSON) {
		return nil, false
	}
	return o.CRIMSON, true
}

// HasCRIMSON returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) HasCRIMSON() bool {
	if o != nil && !IsNil(o.CRIMSON) {
		return true
	}

	return false
}

// SetCRIMSON gets a reference to the given SkyBlockProfileMemberCurrenciesEssenceData and assigns it to the CRIMSON field.
func (o *SkyBlockProfileMemberCurrenciesEssence) SetCRIMSON(v SkyBlockProfileMemberCurrenciesEssenceData) {
	o.CRIMSON = &v
}

// GetDIAMOND returns the DIAMOND field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetDIAMOND() SkyBlockProfileMemberCurrenciesEssenceData {
	if o == nil || IsNil(o.DIAMOND) {
		var ret SkyBlockProfileMemberCurrenciesEssenceData
		return ret
	}
	return *o.DIAMOND
}

// GetDIAMONDOk returns a tuple with the DIAMOND field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetDIAMONDOk() (*SkyBlockProfileMemberCurrenciesEssenceData, bool) {
	if o == nil || IsNil(o.DIAMOND) {
		return nil, false
	}
	return o.DIAMOND, true
}

// HasDIAMOND returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) HasDIAMOND() bool {
	if o != nil && !IsNil(o.DIAMOND) {
		return true
	}

	return false
}

// SetDIAMOND gets a reference to the given SkyBlockProfileMemberCurrenciesEssenceData and assigns it to the DIAMOND field.
func (o *SkyBlockProfileMemberCurrenciesEssence) SetDIAMOND(v SkyBlockProfileMemberCurrenciesEssenceData) {
	o.DIAMOND = &v
}

// GetDRAGON returns the DRAGON field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetDRAGON() SkyBlockProfileMemberCurrenciesEssenceData {
	if o == nil || IsNil(o.DRAGON) {
		var ret SkyBlockProfileMemberCurrenciesEssenceData
		return ret
	}
	return *o.DRAGON
}

// GetDRAGONOk returns a tuple with the DRAGON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetDRAGONOk() (*SkyBlockProfileMemberCurrenciesEssenceData, bool) {
	if o == nil || IsNil(o.DRAGON) {
		return nil, false
	}
	return o.DRAGON, true
}

// HasDRAGON returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) HasDRAGON() bool {
	if o != nil && !IsNil(o.DRAGON) {
		return true
	}

	return false
}

// SetDRAGON gets a reference to the given SkyBlockProfileMemberCurrenciesEssenceData and assigns it to the DRAGON field.
func (o *SkyBlockProfileMemberCurrenciesEssence) SetDRAGON(v SkyBlockProfileMemberCurrenciesEssenceData) {
	o.DRAGON = &v
}

// GetGOLD returns the GOLD field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetGOLD() SkyBlockProfileMemberCurrenciesEssenceData {
	if o == nil || IsNil(o.GOLD) {
		var ret SkyBlockProfileMemberCurrenciesEssenceData
		return ret
	}
	return *o.GOLD
}

// GetGOLDOk returns a tuple with the GOLD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetGOLDOk() (*SkyBlockProfileMemberCurrenciesEssenceData, bool) {
	if o == nil || IsNil(o.GOLD) {
		return nil, false
	}
	return o.GOLD, true
}

// HasGOLD returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) HasGOLD() bool {
	if o != nil && !IsNil(o.GOLD) {
		return true
	}

	return false
}

// SetGOLD gets a reference to the given SkyBlockProfileMemberCurrenciesEssenceData and assigns it to the GOLD field.
func (o *SkyBlockProfileMemberCurrenciesEssence) SetGOLD(v SkyBlockProfileMemberCurrenciesEssenceData) {
	o.GOLD = &v
}

// GetICE returns the ICE field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetICE() SkyBlockProfileMemberCurrenciesEssenceData {
	if o == nil || IsNil(o.ICE) {
		var ret SkyBlockProfileMemberCurrenciesEssenceData
		return ret
	}
	return *o.ICE
}

// GetICEOk returns a tuple with the ICE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetICEOk() (*SkyBlockProfileMemberCurrenciesEssenceData, bool) {
	if o == nil || IsNil(o.ICE) {
		return nil, false
	}
	return o.ICE, true
}

// HasICE returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) HasICE() bool {
	if o != nil && !IsNil(o.ICE) {
		return true
	}

	return false
}

// SetICE gets a reference to the given SkyBlockProfileMemberCurrenciesEssenceData and assigns it to the ICE field.
func (o *SkyBlockProfileMemberCurrenciesEssence) SetICE(v SkyBlockProfileMemberCurrenciesEssenceData) {
	o.ICE = &v
}

// GetSPIDER returns the SPIDER field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetSPIDER() SkyBlockProfileMemberCurrenciesEssenceData {
	if o == nil || IsNil(o.SPIDER) {
		var ret SkyBlockProfileMemberCurrenciesEssenceData
		return ret
	}
	return *o.SPIDER
}

// GetSPIDEROk returns a tuple with the SPIDER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetSPIDEROk() (*SkyBlockProfileMemberCurrenciesEssenceData, bool) {
	if o == nil || IsNil(o.SPIDER) {
		return nil, false
	}
	return o.SPIDER, true
}

// HasSPIDER returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) HasSPIDER() bool {
	if o != nil && !IsNil(o.SPIDER) {
		return true
	}

	return false
}

// SetSPIDER gets a reference to the given SkyBlockProfileMemberCurrenciesEssenceData and assigns it to the SPIDER field.
func (o *SkyBlockProfileMemberCurrenciesEssence) SetSPIDER(v SkyBlockProfileMemberCurrenciesEssenceData) {
	o.SPIDER = &v
}

// GetUNDEAD returns the UNDEAD field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetUNDEAD() SkyBlockProfileMemberCurrenciesEssenceData {
	if o == nil || IsNil(o.UNDEAD) {
		var ret SkyBlockProfileMemberCurrenciesEssenceData
		return ret
	}
	return *o.UNDEAD
}

// GetUNDEADOk returns a tuple with the UNDEAD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetUNDEADOk() (*SkyBlockProfileMemberCurrenciesEssenceData, bool) {
	if o == nil || IsNil(o.UNDEAD) {
		return nil, false
	}
	return o.UNDEAD, true
}

// HasUNDEAD returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) HasUNDEAD() bool {
	if o != nil && !IsNil(o.UNDEAD) {
		return true
	}

	return false
}

// SetUNDEAD gets a reference to the given SkyBlockProfileMemberCurrenciesEssenceData and assigns it to the UNDEAD field.
func (o *SkyBlockProfileMemberCurrenciesEssence) SetUNDEAD(v SkyBlockProfileMemberCurrenciesEssenceData) {
	o.UNDEAD = &v
}

// GetWITHER returns the WITHER field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetWITHER() SkyBlockProfileMemberCurrenciesEssenceData {
	if o == nil || IsNil(o.WITHER) {
		var ret SkyBlockProfileMemberCurrenciesEssenceData
		return ret
	}
	return *o.WITHER
}

// GetWITHEROk returns a tuple with the WITHER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) GetWITHEROk() (*SkyBlockProfileMemberCurrenciesEssenceData, bool) {
	if o == nil || IsNil(o.WITHER) {
		return nil, false
	}
	return o.WITHER, true
}

// HasWITHER returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssence) HasWITHER() bool {
	if o != nil && !IsNil(o.WITHER) {
		return true
	}

	return false
}

// SetWITHER gets a reference to the given SkyBlockProfileMemberCurrenciesEssenceData and assigns it to the WITHER field.
func (o *SkyBlockProfileMemberCurrenciesEssence) SetWITHER(v SkyBlockProfileMemberCurrenciesEssenceData) {
	o.WITHER = &v
}

func (o SkyBlockProfileMemberCurrenciesEssence) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberCurrenciesEssence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CRIMSON) {
		toSerialize["CRIMSON"] = o.CRIMSON
	}
	if !IsNil(o.DIAMOND) {
		toSerialize["DIAMOND"] = o.DIAMOND
	}
	if !IsNil(o.DRAGON) {
		toSerialize["DRAGON"] = o.DRAGON
	}
	if !IsNil(o.GOLD) {
		toSerialize["GOLD"] = o.GOLD
	}
	if !IsNil(o.ICE) {
		toSerialize["ICE"] = o.ICE
	}
	if !IsNil(o.SPIDER) {
		toSerialize["SPIDER"] = o.SPIDER
	}
	if !IsNil(o.UNDEAD) {
		toSerialize["UNDEAD"] = o.UNDEAD
	}
	if !IsNil(o.WITHER) {
		toSerialize["WITHER"] = o.WITHER
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberCurrenciesEssence struct {
	value *SkyBlockProfileMemberCurrenciesEssence
	isSet bool
}

func (v NullableSkyBlockProfileMemberCurrenciesEssence) Get() *SkyBlockProfileMemberCurrenciesEssence {
	return v.value
}

func (v *NullableSkyBlockProfileMemberCurrenciesEssence) Set(val *SkyBlockProfileMemberCurrenciesEssence) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberCurrenciesEssence) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberCurrenciesEssence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberCurrenciesEssence(val *SkyBlockProfileMemberCurrenciesEssence) *NullableSkyBlockProfileMemberCurrenciesEssence {
	return &NullableSkyBlockProfileMemberCurrenciesEssence{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberCurrenciesEssence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberCurrenciesEssence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
