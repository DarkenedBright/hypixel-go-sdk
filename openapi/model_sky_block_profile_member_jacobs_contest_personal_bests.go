/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberJacobsContestPersonalBests type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberJacobsContestPersonalBests{}

// SkyBlockProfileMemberJacobsContestPersonalBests struct for SkyBlockProfileMemberJacobsContestPersonalBests
type SkyBlockProfileMemberJacobsContestPersonalBests struct {
	CACTUS              *int64 `json:"CACTUS,omitempty"`
	CARROT_ITEM         *int64 `json:"CARROT_ITEM,omitempty"`
	INKSACK3            *int64 `json:"INK_SACK:3,omitempty"`
	MELON               *int64 `json:"MELON,omitempty"`
	MUSHROOM_COLLECTION *int64 `json:"MUSHROOM_COLLECTION,omitempty"`
	NETHER_STALK        *int64 `json:"NETHER_STALK,omitempty"`
	POTATO_ITEM         *int64 `json:"POTATO_ITEM,omitempty"`
	PUMPKIN             *int64 `json:"PUMPKIN,omitempty"`
	SUGAR_CANE          *int64 `json:"SUGAR_CANE,omitempty"`
	WHEAT               *int64 `json:"WHEAT,omitempty"`
}

// NewSkyBlockProfileMemberJacobsContestPersonalBests instantiates a new SkyBlockProfileMemberJacobsContestPersonalBests object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberJacobsContestPersonalBests() *SkyBlockProfileMemberJacobsContestPersonalBests {
	this := SkyBlockProfileMemberJacobsContestPersonalBests{}
	return &this
}

// NewSkyBlockProfileMemberJacobsContestPersonalBestsWithDefaults instantiates a new SkyBlockProfileMemberJacobsContestPersonalBests object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberJacobsContestPersonalBestsWithDefaults() *SkyBlockProfileMemberJacobsContestPersonalBests {
	this := SkyBlockProfileMemberJacobsContestPersonalBests{}
	return &this
}

// GetCACTUS returns the CACTUS field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetCACTUS() int64 {
	if o == nil || IsNil(o.CACTUS) {
		var ret int64
		return ret
	}
	return *o.CACTUS
}

// GetCACTUSOk returns a tuple with the CACTUS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetCACTUSOk() (*int64, bool) {
	if o == nil || IsNil(o.CACTUS) {
		return nil, false
	}
	return o.CACTUS, true
}

// HasCACTUS returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasCACTUS() bool {
	if o != nil && !IsNil(o.CACTUS) {
		return true
	}

	return false
}

// SetCACTUS gets a reference to the given int64 and assigns it to the CACTUS field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetCACTUS(v int64) {
	o.CACTUS = &v
}

// GetCARROT_ITEM returns the CARROT_ITEM field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetCARROT_ITEM() int64 {
	if o == nil || IsNil(o.CARROT_ITEM) {
		var ret int64
		return ret
	}
	return *o.CARROT_ITEM
}

// GetCARROT_ITEMOk returns a tuple with the CARROT_ITEM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetCARROT_ITEMOk() (*int64, bool) {
	if o == nil || IsNil(o.CARROT_ITEM) {
		return nil, false
	}
	return o.CARROT_ITEM, true
}

// HasCARROT_ITEM returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasCARROT_ITEM() bool {
	if o != nil && !IsNil(o.CARROT_ITEM) {
		return true
	}

	return false
}

// SetCARROT_ITEM gets a reference to the given int64 and assigns it to the CARROT_ITEM field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetCARROT_ITEM(v int64) {
	o.CARROT_ITEM = &v
}

// GetINKSACK3 returns the INKSACK3 field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetINKSACK3() int64 {
	if o == nil || IsNil(o.INKSACK3) {
		var ret int64
		return ret
	}
	return *o.INKSACK3
}

// GetINKSACK3Ok returns a tuple with the INKSACK3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetINKSACK3Ok() (*int64, bool) {
	if o == nil || IsNil(o.INKSACK3) {
		return nil, false
	}
	return o.INKSACK3, true
}

// HasINKSACK3 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasINKSACK3() bool {
	if o != nil && !IsNil(o.INKSACK3) {
		return true
	}

	return false
}

// SetINKSACK3 gets a reference to the given int64 and assigns it to the INKSACK3 field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetINKSACK3(v int64) {
	o.INKSACK3 = &v
}

// GetMELON returns the MELON field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetMELON() int64 {
	if o == nil || IsNil(o.MELON) {
		var ret int64
		return ret
	}
	return *o.MELON
}

// GetMELONOk returns a tuple with the MELON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetMELONOk() (*int64, bool) {
	if o == nil || IsNil(o.MELON) {
		return nil, false
	}
	return o.MELON, true
}

// HasMELON returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasMELON() bool {
	if o != nil && !IsNil(o.MELON) {
		return true
	}

	return false
}

// SetMELON gets a reference to the given int64 and assigns it to the MELON field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetMELON(v int64) {
	o.MELON = &v
}

// GetMUSHROOM_COLLECTION returns the MUSHROOM_COLLECTION field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetMUSHROOM_COLLECTION() int64 {
	if o == nil || IsNil(o.MUSHROOM_COLLECTION) {
		var ret int64
		return ret
	}
	return *o.MUSHROOM_COLLECTION
}

// GetMUSHROOM_COLLECTIONOk returns a tuple with the MUSHROOM_COLLECTION field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetMUSHROOM_COLLECTIONOk() (*int64, bool) {
	if o == nil || IsNil(o.MUSHROOM_COLLECTION) {
		return nil, false
	}
	return o.MUSHROOM_COLLECTION, true
}

// HasMUSHROOM_COLLECTION returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasMUSHROOM_COLLECTION() bool {
	if o != nil && !IsNil(o.MUSHROOM_COLLECTION) {
		return true
	}

	return false
}

// SetMUSHROOM_COLLECTION gets a reference to the given int64 and assigns it to the MUSHROOM_COLLECTION field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetMUSHROOM_COLLECTION(v int64) {
	o.MUSHROOM_COLLECTION = &v
}

// GetNETHER_STALK returns the NETHER_STALK field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetNETHER_STALK() int64 {
	if o == nil || IsNil(o.NETHER_STALK) {
		var ret int64
		return ret
	}
	return *o.NETHER_STALK
}

// GetNETHER_STALKOk returns a tuple with the NETHER_STALK field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetNETHER_STALKOk() (*int64, bool) {
	if o == nil || IsNil(o.NETHER_STALK) {
		return nil, false
	}
	return o.NETHER_STALK, true
}

// HasNETHER_STALK returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasNETHER_STALK() bool {
	if o != nil && !IsNil(o.NETHER_STALK) {
		return true
	}

	return false
}

// SetNETHER_STALK gets a reference to the given int64 and assigns it to the NETHER_STALK field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetNETHER_STALK(v int64) {
	o.NETHER_STALK = &v
}

// GetPOTATO_ITEM returns the POTATO_ITEM field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetPOTATO_ITEM() int64 {
	if o == nil || IsNil(o.POTATO_ITEM) {
		var ret int64
		return ret
	}
	return *o.POTATO_ITEM
}

// GetPOTATO_ITEMOk returns a tuple with the POTATO_ITEM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetPOTATO_ITEMOk() (*int64, bool) {
	if o == nil || IsNil(o.POTATO_ITEM) {
		return nil, false
	}
	return o.POTATO_ITEM, true
}

// HasPOTATO_ITEM returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasPOTATO_ITEM() bool {
	if o != nil && !IsNil(o.POTATO_ITEM) {
		return true
	}

	return false
}

// SetPOTATO_ITEM gets a reference to the given int64 and assigns it to the POTATO_ITEM field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetPOTATO_ITEM(v int64) {
	o.POTATO_ITEM = &v
}

// GetPUMPKIN returns the PUMPKIN field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetPUMPKIN() int64 {
	if o == nil || IsNil(o.PUMPKIN) {
		var ret int64
		return ret
	}
	return *o.PUMPKIN
}

// GetPUMPKINOk returns a tuple with the PUMPKIN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetPUMPKINOk() (*int64, bool) {
	if o == nil || IsNil(o.PUMPKIN) {
		return nil, false
	}
	return o.PUMPKIN, true
}

// HasPUMPKIN returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasPUMPKIN() bool {
	if o != nil && !IsNil(o.PUMPKIN) {
		return true
	}

	return false
}

// SetPUMPKIN gets a reference to the given int64 and assigns it to the PUMPKIN field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetPUMPKIN(v int64) {
	o.PUMPKIN = &v
}

// GetSUGAR_CANE returns the SUGAR_CANE field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetSUGAR_CANE() int64 {
	if o == nil || IsNil(o.SUGAR_CANE) {
		var ret int64
		return ret
	}
	return *o.SUGAR_CANE
}

// GetSUGAR_CANEOk returns a tuple with the SUGAR_CANE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetSUGAR_CANEOk() (*int64, bool) {
	if o == nil || IsNil(o.SUGAR_CANE) {
		return nil, false
	}
	return o.SUGAR_CANE, true
}

// HasSUGAR_CANE returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasSUGAR_CANE() bool {
	if o != nil && !IsNil(o.SUGAR_CANE) {
		return true
	}

	return false
}

// SetSUGAR_CANE gets a reference to the given int64 and assigns it to the SUGAR_CANE field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetSUGAR_CANE(v int64) {
	o.SUGAR_CANE = &v
}

// GetWHEAT returns the WHEAT field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetWHEAT() int64 {
	if o == nil || IsNil(o.WHEAT) {
		var ret int64
		return ret
	}
	return *o.WHEAT
}

// GetWHEATOk returns a tuple with the WHEAT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) GetWHEATOk() (*int64, bool) {
	if o == nil || IsNil(o.WHEAT) {
		return nil, false
	}
	return o.WHEAT, true
}

// HasWHEAT returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) HasWHEAT() bool {
	if o != nil && !IsNil(o.WHEAT) {
		return true
	}

	return false
}

// SetWHEAT gets a reference to the given int64 and assigns it to the WHEAT field.
func (o *SkyBlockProfileMemberJacobsContestPersonalBests) SetWHEAT(v int64) {
	o.WHEAT = &v
}

func (o SkyBlockProfileMemberJacobsContestPersonalBests) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberJacobsContestPersonalBests) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CACTUS) {
		toSerialize["CACTUS"] = o.CACTUS
	}
	if !IsNil(o.CARROT_ITEM) {
		toSerialize["CARROT_ITEM"] = o.CARROT_ITEM
	}
	if !IsNil(o.INKSACK3) {
		toSerialize["INK_SACK:3"] = o.INKSACK3
	}
	if !IsNil(o.MELON) {
		toSerialize["MELON"] = o.MELON
	}
	if !IsNil(o.MUSHROOM_COLLECTION) {
		toSerialize["MUSHROOM_COLLECTION"] = o.MUSHROOM_COLLECTION
	}
	if !IsNil(o.NETHER_STALK) {
		toSerialize["NETHER_STALK"] = o.NETHER_STALK
	}
	if !IsNil(o.POTATO_ITEM) {
		toSerialize["POTATO_ITEM"] = o.POTATO_ITEM
	}
	if !IsNil(o.PUMPKIN) {
		toSerialize["PUMPKIN"] = o.PUMPKIN
	}
	if !IsNil(o.SUGAR_CANE) {
		toSerialize["SUGAR_CANE"] = o.SUGAR_CANE
	}
	if !IsNil(o.WHEAT) {
		toSerialize["WHEAT"] = o.WHEAT
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberJacobsContestPersonalBests struct {
	value *SkyBlockProfileMemberJacobsContestPersonalBests
	isSet bool
}

func (v NullableSkyBlockProfileMemberJacobsContestPersonalBests) Get() *SkyBlockProfileMemberJacobsContestPersonalBests {
	return v.value
}

func (v *NullableSkyBlockProfileMemberJacobsContestPersonalBests) Set(val *SkyBlockProfileMemberJacobsContestPersonalBests) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberJacobsContestPersonalBests) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberJacobsContestPersonalBests) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberJacobsContestPersonalBests(val *SkyBlockProfileMemberJacobsContestPersonalBests) *NullableSkyBlockProfileMemberJacobsContestPersonalBests {
	return &NullableSkyBlockProfileMemberJacobsContestPersonalBests{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberJacobsContestPersonalBests) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberJacobsContestPersonalBests) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
