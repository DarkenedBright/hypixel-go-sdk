/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ActiveBooster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveBooster{}

// ActiveBooster struct for ActiveBooster
type ActiveBooster struct {
	Id             *string  `json:"_id,omitempty"`
	Amount         *int64   `json:"amount,omitempty"`
	DateActivated  *int64   `json:"dateActivated,omitempty"`
	GameType       *int64   `json:"gameType,omitempty"`
	Length         *int64   `json:"length,omitempty"`
	OriginalLength *int64   `json:"originalLength,omitempty"`
	PurchaserUuid  *string  `json:"purchaserUuid,omitempty"`
	Stacked        []string `json:"stacked,omitempty"`
}

// NewActiveBooster instantiates a new ActiveBooster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveBooster() *ActiveBooster {
	this := ActiveBooster{}
	return &this
}

// NewActiveBoosterWithDefaults instantiates a new ActiveBooster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveBoosterWithDefaults() *ActiveBooster {
	this := ActiveBooster{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActiveBooster) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActiveBooster) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActiveBooster) SetId(v string) {
	o.Id = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ActiveBooster) GetAmount() int64 {
	if o == nil || IsNil(o.Amount) {
		var ret int64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ActiveBooster) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int64 and assigns it to the Amount field.
func (o *ActiveBooster) SetAmount(v int64) {
	o.Amount = &v
}

// GetDateActivated returns the DateActivated field value if set, zero value otherwise.
func (o *ActiveBooster) GetDateActivated() int64 {
	if o == nil || IsNil(o.DateActivated) {
		var ret int64
		return ret
	}
	return *o.DateActivated
}

// GetDateActivatedOk returns a tuple with the DateActivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetDateActivatedOk() (*int64, bool) {
	if o == nil || IsNil(o.DateActivated) {
		return nil, false
	}
	return o.DateActivated, true
}

// HasDateActivated returns a boolean if a field has been set.
func (o *ActiveBooster) HasDateActivated() bool {
	if o != nil && !IsNil(o.DateActivated) {
		return true
	}

	return false
}

// SetDateActivated gets a reference to the given int64 and assigns it to the DateActivated field.
func (o *ActiveBooster) SetDateActivated(v int64) {
	o.DateActivated = &v
}

// GetGameType returns the GameType field value if set, zero value otherwise.
func (o *ActiveBooster) GetGameType() int64 {
	if o == nil || IsNil(o.GameType) {
		var ret int64
		return ret
	}
	return *o.GameType
}

// GetGameTypeOk returns a tuple with the GameType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetGameTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.GameType) {
		return nil, false
	}
	return o.GameType, true
}

// HasGameType returns a boolean if a field has been set.
func (o *ActiveBooster) HasGameType() bool {
	if o != nil && !IsNil(o.GameType) {
		return true
	}

	return false
}

// SetGameType gets a reference to the given int64 and assigns it to the GameType field.
func (o *ActiveBooster) SetGameType(v int64) {
	o.GameType = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *ActiveBooster) GetLength() int64 {
	if o == nil || IsNil(o.Length) {
		var ret int64
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *ActiveBooster) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int64 and assigns it to the Length field.
func (o *ActiveBooster) SetLength(v int64) {
	o.Length = &v
}

// GetOriginalLength returns the OriginalLength field value if set, zero value otherwise.
func (o *ActiveBooster) GetOriginalLength() int64 {
	if o == nil || IsNil(o.OriginalLength) {
		var ret int64
		return ret
	}
	return *o.OriginalLength
}

// GetOriginalLengthOk returns a tuple with the OriginalLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetOriginalLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.OriginalLength) {
		return nil, false
	}
	return o.OriginalLength, true
}

// HasOriginalLength returns a boolean if a field has been set.
func (o *ActiveBooster) HasOriginalLength() bool {
	if o != nil && !IsNil(o.OriginalLength) {
		return true
	}

	return false
}

// SetOriginalLength gets a reference to the given int64 and assigns it to the OriginalLength field.
func (o *ActiveBooster) SetOriginalLength(v int64) {
	o.OriginalLength = &v
}

// GetPurchaserUuid returns the PurchaserUuid field value if set, zero value otherwise.
func (o *ActiveBooster) GetPurchaserUuid() string {
	if o == nil || IsNil(o.PurchaserUuid) {
		var ret string
		return ret
	}
	return *o.PurchaserUuid
}

// GetPurchaserUuidOk returns a tuple with the PurchaserUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetPurchaserUuidOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaserUuid) {
		return nil, false
	}
	return o.PurchaserUuid, true
}

// HasPurchaserUuid returns a boolean if a field has been set.
func (o *ActiveBooster) HasPurchaserUuid() bool {
	if o != nil && !IsNil(o.PurchaserUuid) {
		return true
	}

	return false
}

// SetPurchaserUuid gets a reference to the given string and assigns it to the PurchaserUuid field.
func (o *ActiveBooster) SetPurchaserUuid(v string) {
	o.PurchaserUuid = &v
}

// GetStacked returns the Stacked field value if set, zero value otherwise.
func (o *ActiveBooster) GetStacked() []string {
	if o == nil || IsNil(o.Stacked) {
		var ret []string
		return ret
	}
	return o.Stacked
}

// GetStackedOk returns a tuple with the Stacked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetStackedOk() ([]string, bool) {
	if o == nil || IsNil(o.Stacked) {
		return nil, false
	}
	return o.Stacked, true
}

// HasStacked returns a boolean if a field has been set.
func (o *ActiveBooster) HasStacked() bool {
	if o != nil && !IsNil(o.Stacked) {
		return true
	}

	return false
}

// SetStacked gets a reference to the given []string and assigns it to the Stacked field.
func (o *ActiveBooster) SetStacked(v []string) {
	o.Stacked = v
}

func (o ActiveBooster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveBooster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.DateActivated) {
		toSerialize["dateActivated"] = o.DateActivated
	}
	if !IsNil(o.GameType) {
		toSerialize["gameType"] = o.GameType
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.OriginalLength) {
		toSerialize["originalLength"] = o.OriginalLength
	}
	if !IsNil(o.PurchaserUuid) {
		toSerialize["purchaserUuid"] = o.PurchaserUuid
	}
	if !IsNil(o.Stacked) {
		toSerialize["stacked"] = o.Stacked
	}
	return toSerialize, nil
}

type NullableActiveBooster struct {
	value *ActiveBooster
	isSet bool
}

func (v NullableActiveBooster) Get() *ActiveBooster {
	return v.value
}

func (v *NullableActiveBooster) Set(val *ActiveBooster) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveBooster) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveBooster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveBooster(val *ActiveBooster) *NullableActiveBooster {
	return &NullableActiveBooster{value: val, isSet: true}
}

func (v NullableActiveBooster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveBooster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
