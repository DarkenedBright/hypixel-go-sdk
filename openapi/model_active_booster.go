/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ActiveBooster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveBooster{}

// ActiveBooster struct for ActiveBooster
type ActiveBooster struct {
	Id             *string  `json:"_id,omitempty"`
	Amount         *int64   `json:"amount,omitempty"`
	DateActivated  *int64   `json:"dateActivated,omitempty"`
	GameType       *int64   `json:"gameType,omitempty"`
	Length         *int64   `json:"length,omitempty"`
	OriginalLength *int64   `json:"originalLength,omitempty"`
	PurchaserUuid  *string  `json:"purchaserUuid,omitempty"`
	Stacked        []string `json:"stacked,omitempty"`
}

// NewActiveBooster instantiates a new ActiveBooster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveBooster() *ActiveBooster {
	this := ActiveBooster{}
	return &this
}

// NewActiveBoosterWithDefaults instantiates a new ActiveBooster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveBoosterWithDefaults() *ActiveBooster {
	this := ActiveBooster{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActiveBooster) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActiveBooster) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActiveBooster) SetId(v string) {
	o.Id = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ActiveBooster) GetAmount() int64 {
	if o == nil || IsNil(o.Amount) {
		var ret int64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ActiveBooster) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int64 and assigns it to the Amount field.
func (o *ActiveBooster) SetAmount(v int64) {
	o.Amount = &v
}

// GetDateActivated returns the DateActivated field value if set, zero value otherwise.
func (o *ActiveBooster) GetDateActivated() int64 {
	if o == nil || IsNil(o.DateActivated) {
		var ret int64
		return ret
	}
	return *o.DateActivated
}

// GetDateActivatedOk returns a tuple with the DateActivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetDateActivatedOk() (*int64, bool) {
	if o == nil || IsNil(o.DateActivated) {
		return nil, false
	}
	return o.DateActivated, true
}

// HasDateActivated returns a boolean if a field has been set.
func (o *ActiveBooster) HasDateActivated() bool {
	if o != nil && !IsNil(o.DateActivated) {
		return true
	}

	return false
}

// SetDateActivated gets a reference to the given int64 and assigns it to the DateActivated field.
func (o *ActiveBooster) SetDateActivated(v int64) {
	o.DateActivated = &v
}

// GetGameType returns the GameType field value if set, zero value otherwise.
func (o *ActiveBooster) GetGameType() int64 {
	if o == nil || IsNil(o.GameType) {
		var ret int64
		return ret
	}
	return *o.GameType
}

// GetGameTypeOk returns a tuple with the GameType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetGameTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.GameType) {
		return nil, false
	}
	return o.GameType, true
}

// HasGameType returns a boolean if a field has been set.
func (o *ActiveBooster) HasGameType() bool {
	if o != nil && !IsNil(o.GameType) {
		return true
	}

	return false
}

// SetGameType gets a reference to the given int64 and assigns it to the GameType field.
func (o *ActiveBooster) SetGameType(v int64) {
	o.GameType = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *ActiveBooster) GetLength() int64 {
	if o == nil || IsNil(o.Length) {
		var ret int64
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *ActiveBooster) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int64 and assigns it to the Length field.
func (o *ActiveBooster) SetLength(v int64) {
	o.Length = &v
}

// GetOriginalLength returns the OriginalLength field value if set, zero value otherwise.
func (o *ActiveBooster) GetOriginalLength() int64 {
	if o == nil || IsNil(o.OriginalLength) {
		var ret int64
		return ret
	}
	return *o.OriginalLength
}

// GetOriginalLengthOk returns a tuple with the OriginalLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetOriginalLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.OriginalLength) {
		return nil, false
	}
	return o.OriginalLength, true
}

// HasOriginalLength returns a boolean if a field has been set.
func (o *ActiveBooster) HasOriginalLength() bool {
	if o != nil && !IsNil(o.OriginalLength) {
		return true
	}

	return false
}

// SetOriginalLength gets a reference to the given int64 and assigns it to the OriginalLength field.
func (o *ActiveBooster) SetOriginalLength(v int64) {
	o.OriginalLength = &v
}

// GetPurchaserUuid returns the PurchaserUuid field value if set, zero value otherwise.
func (o *ActiveBooster) GetPurchaserUuid() string {
	if o == nil || IsNil(o.PurchaserUuid) {
		var ret string
		return ret
	}
	return *o.PurchaserUuid
}

// GetPurchaserUuidOk returns a tuple with the PurchaserUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveBooster) GetPurchaserUuidOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaserUuid) {
		return nil, false
	}
	return o.PurchaserUuid, true
}

// HasPurchaserUuid returns a boolean if a field has been set.
func (o *ActiveBooster) HasPurchaserUuid() bool {
	if o != nil && !IsNil(o.PurchaserUuid) {
		return true
	}

	return false
}

// SetPurchaserUuid gets a reference to the given string and assigns it to the PurchaserUuid field.
func (o *ActiveBooster) SetPurchaserUuid(v string) {
	o.PurchaserUuid = &v
}

// GetStacked returns the Stacked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveBooster) GetStacked() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Stacked
}

// GetStackedOk returns a tuple with the Stacked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveBooster) GetStackedOk() ([]string, bool) {
	if o == nil || IsNil(o.Stacked) {
		return nil, false
	}
	return o.Stacked, true
}

// HasStacked returns a boolean if a field has been set.
func (o *ActiveBooster) HasStacked() bool {
	if o != nil && !IsNil(o.Stacked) {
		return true
	}

	return false
}

// SetStacked gets a reference to the given []string and assigns it to the Stacked field.
func (o *ActiveBooster) SetStacked(v []string) {
	o.Stacked = v
}

func (o ActiveBooster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveBooster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.DateActivated) {
		toSerialize["dateActivated"] = o.DateActivated
	}
	if !IsNil(o.GameType) {
		toSerialize["gameType"] = o.GameType
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.OriginalLength) {
		toSerialize["originalLength"] = o.OriginalLength
	}
	if !IsNil(o.PurchaserUuid) {
		toSerialize["purchaserUuid"] = o.PurchaserUuid
	}
	if o.Stacked != nil {
		toSerialize["stacked"] = o.Stacked
	}
	return toSerialize, nil
}

type NullableActiveBooster struct {
	value *ActiveBooster
	isSet bool
}

func (v NullableActiveBooster) Get() *ActiveBooster {
	return v.value
}

func (v *NullableActiveBooster) Set(val *ActiveBooster) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveBooster) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveBooster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveBooster(val *ActiveBooster) *NullableActiveBooster {
	return &NullableActiveBooster{value: val, isSet: true}
}

func (v NullableActiveBooster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveBooster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
