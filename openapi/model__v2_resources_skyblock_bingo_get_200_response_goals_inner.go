/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the V2ResourcesSkyblockBingoGet200ResponseGoalsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2ResourcesSkyblockBingoGet200ResponseGoalsInner{}

// V2ResourcesSkyblockBingoGet200ResponseGoalsInner struct for V2ResourcesSkyblockBingoGet200ResponseGoalsInner
type V2ResourcesSkyblockBingoGet200ResponseGoalsInner struct {
	// The backend ID for this goal
	Id string `json:"id"`
	// The user friendly display name for this goal
	Name string `json:"name"`
	// Description of this goal
	Lore *string `json:"lore,omitempty"`
	// The full description of this goal
	FullLore []string `json:"fullLore,omitempty"`
	// The tiers of this goal, if a global goal
	Tiers []float64 `json:"tiers,omitempty"`
	// The global progress of this goal
	Progress *float64 `json:"progress,omitempty"`
	// The required amount for this specific goal
	RequiredAmount *float64 `json:"requiredAmount,omitempty"`
}

type _V2ResourcesSkyblockBingoGet200ResponseGoalsInner V2ResourcesSkyblockBingoGet200ResponseGoalsInner

// NewV2ResourcesSkyblockBingoGet200ResponseGoalsInner instantiates a new V2ResourcesSkyblockBingoGet200ResponseGoalsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2ResourcesSkyblockBingoGet200ResponseGoalsInner(id string, name string) *V2ResourcesSkyblockBingoGet200ResponseGoalsInner {
	this := V2ResourcesSkyblockBingoGet200ResponseGoalsInner{}
	this.Id = id
	this.Name = name
	return &this
}

// NewV2ResourcesSkyblockBingoGet200ResponseGoalsInnerWithDefaults instantiates a new V2ResourcesSkyblockBingoGet200ResponseGoalsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2ResourcesSkyblockBingoGet200ResponseGoalsInnerWithDefaults() *V2ResourcesSkyblockBingoGet200ResponseGoalsInner {
	this := V2ResourcesSkyblockBingoGet200ResponseGoalsInner{}
	return &this
}

// GetId returns the Id field value
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) SetName(v string) {
	o.Name = v
}

// GetLore returns the Lore field value if set, zero value otherwise.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetLore() string {
	if o == nil || IsNil(o.Lore) {
		var ret string
		return ret
	}
	return *o.Lore
}

// GetLoreOk returns a tuple with the Lore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetLoreOk() (*string, bool) {
	if o == nil || IsNil(o.Lore) {
		return nil, false
	}
	return o.Lore, true
}

// HasLore returns a boolean if a field has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) HasLore() bool {
	if o != nil && !IsNil(o.Lore) {
		return true
	}

	return false
}

// SetLore gets a reference to the given string and assigns it to the Lore field.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) SetLore(v string) {
	o.Lore = &v
}

// GetFullLore returns the FullLore field value if set, zero value otherwise.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetFullLore() []string {
	if o == nil || IsNil(o.FullLore) {
		var ret []string
		return ret
	}
	return o.FullLore
}

// GetFullLoreOk returns a tuple with the FullLore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetFullLoreOk() ([]string, bool) {
	if o == nil || IsNil(o.FullLore) {
		return nil, false
	}
	return o.FullLore, true
}

// HasFullLore returns a boolean if a field has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) HasFullLore() bool {
	if o != nil && !IsNil(o.FullLore) {
		return true
	}

	return false
}

// SetFullLore gets a reference to the given []string and assigns it to the FullLore field.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) SetFullLore(v []string) {
	o.FullLore = v
}

// GetTiers returns the Tiers field value if set, zero value otherwise.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetTiers() []float64 {
	if o == nil || IsNil(o.Tiers) {
		var ret []float64
		return ret
	}
	return o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetTiersOk() ([]float64, bool) {
	if o == nil || IsNil(o.Tiers) {
		return nil, false
	}
	return o.Tiers, true
}

// HasTiers returns a boolean if a field has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) HasTiers() bool {
	if o != nil && !IsNil(o.Tiers) {
		return true
	}

	return false
}

// SetTiers gets a reference to the given []float64 and assigns it to the Tiers field.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) SetTiers(v []float64) {
	o.Tiers = v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetProgress() float64 {
	if o == nil || IsNil(o.Progress) {
		var ret float64
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetProgressOk() (*float64, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float64 and assigns it to the Progress field.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) SetProgress(v float64) {
	o.Progress = &v
}

// GetRequiredAmount returns the RequiredAmount field value if set, zero value otherwise.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetRequiredAmount() float64 {
	if o == nil || IsNil(o.RequiredAmount) {
		var ret float64
		return ret
	}
	return *o.RequiredAmount
}

// GetRequiredAmountOk returns a tuple with the RequiredAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) GetRequiredAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.RequiredAmount) {
		return nil, false
	}
	return o.RequiredAmount, true
}

// HasRequiredAmount returns a boolean if a field has been set.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) HasRequiredAmount() bool {
	if o != nil && !IsNil(o.RequiredAmount) {
		return true
	}

	return false
}

// SetRequiredAmount gets a reference to the given float64 and assigns it to the RequiredAmount field.
func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) SetRequiredAmount(v float64) {
	o.RequiredAmount = &v
}

func (o V2ResourcesSkyblockBingoGet200ResponseGoalsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2ResourcesSkyblockBingoGet200ResponseGoalsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Lore) {
		toSerialize["lore"] = o.Lore
	}
	if !IsNil(o.FullLore) {
		toSerialize["fullLore"] = o.FullLore
	}
	if !IsNil(o.Tiers) {
		toSerialize["tiers"] = o.Tiers
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.RequiredAmount) {
		toSerialize["requiredAmount"] = o.RequiredAmount
	}
	return toSerialize, nil
}

func (o *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV2ResourcesSkyblockBingoGet200ResponseGoalsInner := _V2ResourcesSkyblockBingoGet200ResponseGoalsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV2ResourcesSkyblockBingoGet200ResponseGoalsInner)

	if err != nil {
		return err
	}

	*o = V2ResourcesSkyblockBingoGet200ResponseGoalsInner(varV2ResourcesSkyblockBingoGet200ResponseGoalsInner)

	return err
}

type NullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner struct {
	value *V2ResourcesSkyblockBingoGet200ResponseGoalsInner
	isSet bool
}

func (v NullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner) Get() *V2ResourcesSkyblockBingoGet200ResponseGoalsInner {
	return v.value
}

func (v *NullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner) Set(val *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner(val *V2ResourcesSkyblockBingoGet200ResponseGoalsInner) *NullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner {
	return &NullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner{value: val, isSet: true}
}

func (v NullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2ResourcesSkyblockBingoGet200ResponseGoalsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
