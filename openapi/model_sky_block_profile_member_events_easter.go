/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockProfileMemberEventsEaster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberEventsEaster{}

// SkyBlockProfileMemberEventsEaster struct for SkyBlockProfileMemberEventsEaster
type SkyBlockProfileMemberEventsEaster struct {
	Chocolate                   int64                                                `json:"chocolate"`
	ChocolateLevel              *int64                                               `json:"chocolate_level,omitempty"`
	ChocolateMultiplierUpgrades *int64                                               `json:"chocolate_multiplier_upgrades,omitempty"`
	ChocolateSincePrestige      int64                                                `json:"chocolate_since_prestige"`
	ClickUpgrades               *int64                                               `json:"click_upgrades,omitempty"`
	ElDoradoProgress            *int64                                               `json:"el_dorado_progress,omitempty"`
	Employees                   *SkyBlockProfileMemberEventsEasterEmployees          `json:"employees,omitempty"`
	GoldenClickAmount           *int64                                               `json:"golden_click_amount,omitempty"`
	GoldenClickYear             *int64                                               `json:"golden_click_year,omitempty"`
	LastViewedChocolateFactory  *int64                                               `json:"last_viewed_chocolate_factory,omitempty"`
	RabbitBarnCapacityLevel     *int64                                               `json:"rabbit_barn_capacity_level,omitempty"`
	RabbitFilter                *string                                              `json:"rabbit_filter,omitempty"`
	RabbitHitmen                *SkyBlockProfileMemberEventsEasterRabbitHitmen       `json:"rabbit_hitmen,omitempty"`
	RabbitHotspotFiler          *SkyBlockProfileMemberEventsEasterRabbitHotspotFiler `json:"rabbit_hotspot_filer,omitempty"`
	RabbitRarityUpgrades        *int64                                               `json:"rabbit_rarity_upgrades,omitempty"`
	RabbitSort                  *SkyBlockProfileMemberEventsEasterRabbitSort         `json:"rabbit_sort,omitempty"`
	Rabbits                     *SkyBlockProfileMemberEventsEasterRabbits            `json:"rabbits,omitempty"`
	RefinedDarkCacaoTruffles    *int64                                               `json:"refined_dark_cacao_truffles,omitempty"`
	Shop                        *SkyBlockProfileMemberEventsEasterShop               `json:"shop,omitempty"`
	SupremeChocolateBars        *int64                                               `json:"supreme_chocolate_bars,omitempty"`
	TimeTower                   *SkyBlockProfileMemberEventsEasterTimeTower          `json:"time_tower,omitempty"`
	TotalChocolate              int64                                                `json:"total_chocolate"`
}

type _SkyBlockProfileMemberEventsEaster SkyBlockProfileMemberEventsEaster

// NewSkyBlockProfileMemberEventsEaster instantiates a new SkyBlockProfileMemberEventsEaster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberEventsEaster(chocolate int64, chocolateSincePrestige int64, totalChocolate int64) *SkyBlockProfileMemberEventsEaster {
	this := SkyBlockProfileMemberEventsEaster{}
	this.Chocolate = chocolate
	this.ChocolateSincePrestige = chocolateSincePrestige
	this.TotalChocolate = totalChocolate
	return &this
}

// NewSkyBlockProfileMemberEventsEasterWithDefaults instantiates a new SkyBlockProfileMemberEventsEaster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberEventsEasterWithDefaults() *SkyBlockProfileMemberEventsEaster {
	this := SkyBlockProfileMemberEventsEaster{}
	return &this
}

// GetChocolate returns the Chocolate field value
func (o *SkyBlockProfileMemberEventsEaster) GetChocolate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Chocolate
}

// GetChocolateOk returns a tuple with the Chocolate field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetChocolateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chocolate, true
}

// SetChocolate sets field value
func (o *SkyBlockProfileMemberEventsEaster) SetChocolate(v int64) {
	o.Chocolate = v
}

// GetChocolateLevel returns the ChocolateLevel field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetChocolateLevel() int64 {
	if o == nil || IsNil(o.ChocolateLevel) {
		var ret int64
		return ret
	}
	return *o.ChocolateLevel
}

// GetChocolateLevelOk returns a tuple with the ChocolateLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetChocolateLevelOk() (*int64, bool) {
	if o == nil || IsNil(o.ChocolateLevel) {
		return nil, false
	}
	return o.ChocolateLevel, true
}

// HasChocolateLevel returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasChocolateLevel() bool {
	if o != nil && !IsNil(o.ChocolateLevel) {
		return true
	}

	return false
}

// SetChocolateLevel gets a reference to the given int64 and assigns it to the ChocolateLevel field.
func (o *SkyBlockProfileMemberEventsEaster) SetChocolateLevel(v int64) {
	o.ChocolateLevel = &v
}

// GetChocolateMultiplierUpgrades returns the ChocolateMultiplierUpgrades field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetChocolateMultiplierUpgrades() int64 {
	if o == nil || IsNil(o.ChocolateMultiplierUpgrades) {
		var ret int64
		return ret
	}
	return *o.ChocolateMultiplierUpgrades
}

// GetChocolateMultiplierUpgradesOk returns a tuple with the ChocolateMultiplierUpgrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetChocolateMultiplierUpgradesOk() (*int64, bool) {
	if o == nil || IsNil(o.ChocolateMultiplierUpgrades) {
		return nil, false
	}
	return o.ChocolateMultiplierUpgrades, true
}

// HasChocolateMultiplierUpgrades returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasChocolateMultiplierUpgrades() bool {
	if o != nil && !IsNil(o.ChocolateMultiplierUpgrades) {
		return true
	}

	return false
}

// SetChocolateMultiplierUpgrades gets a reference to the given int64 and assigns it to the ChocolateMultiplierUpgrades field.
func (o *SkyBlockProfileMemberEventsEaster) SetChocolateMultiplierUpgrades(v int64) {
	o.ChocolateMultiplierUpgrades = &v
}

// GetChocolateSincePrestige returns the ChocolateSincePrestige field value
func (o *SkyBlockProfileMemberEventsEaster) GetChocolateSincePrestige() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ChocolateSincePrestige
}

// GetChocolateSincePrestigeOk returns a tuple with the ChocolateSincePrestige field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetChocolateSincePrestigeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChocolateSincePrestige, true
}

// SetChocolateSincePrestige sets field value
func (o *SkyBlockProfileMemberEventsEaster) SetChocolateSincePrestige(v int64) {
	o.ChocolateSincePrestige = v
}

// GetClickUpgrades returns the ClickUpgrades field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetClickUpgrades() int64 {
	if o == nil || IsNil(o.ClickUpgrades) {
		var ret int64
		return ret
	}
	return *o.ClickUpgrades
}

// GetClickUpgradesOk returns a tuple with the ClickUpgrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetClickUpgradesOk() (*int64, bool) {
	if o == nil || IsNil(o.ClickUpgrades) {
		return nil, false
	}
	return o.ClickUpgrades, true
}

// HasClickUpgrades returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasClickUpgrades() bool {
	if o != nil && !IsNil(o.ClickUpgrades) {
		return true
	}

	return false
}

// SetClickUpgrades gets a reference to the given int64 and assigns it to the ClickUpgrades field.
func (o *SkyBlockProfileMemberEventsEaster) SetClickUpgrades(v int64) {
	o.ClickUpgrades = &v
}

// GetElDoradoProgress returns the ElDoradoProgress field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetElDoradoProgress() int64 {
	if o == nil || IsNil(o.ElDoradoProgress) {
		var ret int64
		return ret
	}
	return *o.ElDoradoProgress
}

// GetElDoradoProgressOk returns a tuple with the ElDoradoProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetElDoradoProgressOk() (*int64, bool) {
	if o == nil || IsNil(o.ElDoradoProgress) {
		return nil, false
	}
	return o.ElDoradoProgress, true
}

// HasElDoradoProgress returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasElDoradoProgress() bool {
	if o != nil && !IsNil(o.ElDoradoProgress) {
		return true
	}

	return false
}

// SetElDoradoProgress gets a reference to the given int64 and assigns it to the ElDoradoProgress field.
func (o *SkyBlockProfileMemberEventsEaster) SetElDoradoProgress(v int64) {
	o.ElDoradoProgress = &v
}

// GetEmployees returns the Employees field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetEmployees() SkyBlockProfileMemberEventsEasterEmployees {
	if o == nil || IsNil(o.Employees) {
		var ret SkyBlockProfileMemberEventsEasterEmployees
		return ret
	}
	return *o.Employees
}

// GetEmployeesOk returns a tuple with the Employees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetEmployeesOk() (*SkyBlockProfileMemberEventsEasterEmployees, bool) {
	if o == nil || IsNil(o.Employees) {
		return nil, false
	}
	return o.Employees, true
}

// HasEmployees returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasEmployees() bool {
	if o != nil && !IsNil(o.Employees) {
		return true
	}

	return false
}

// SetEmployees gets a reference to the given SkyBlockProfileMemberEventsEasterEmployees and assigns it to the Employees field.
func (o *SkyBlockProfileMemberEventsEaster) SetEmployees(v SkyBlockProfileMemberEventsEasterEmployees) {
	o.Employees = &v
}

// GetGoldenClickAmount returns the GoldenClickAmount field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetGoldenClickAmount() int64 {
	if o == nil || IsNil(o.GoldenClickAmount) {
		var ret int64
		return ret
	}
	return *o.GoldenClickAmount
}

// GetGoldenClickAmountOk returns a tuple with the GoldenClickAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetGoldenClickAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.GoldenClickAmount) {
		return nil, false
	}
	return o.GoldenClickAmount, true
}

// HasGoldenClickAmount returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasGoldenClickAmount() bool {
	if o != nil && !IsNil(o.GoldenClickAmount) {
		return true
	}

	return false
}

// SetGoldenClickAmount gets a reference to the given int64 and assigns it to the GoldenClickAmount field.
func (o *SkyBlockProfileMemberEventsEaster) SetGoldenClickAmount(v int64) {
	o.GoldenClickAmount = &v
}

// GetGoldenClickYear returns the GoldenClickYear field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetGoldenClickYear() int64 {
	if o == nil || IsNil(o.GoldenClickYear) {
		var ret int64
		return ret
	}
	return *o.GoldenClickYear
}

// GetGoldenClickYearOk returns a tuple with the GoldenClickYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetGoldenClickYearOk() (*int64, bool) {
	if o == nil || IsNil(o.GoldenClickYear) {
		return nil, false
	}
	return o.GoldenClickYear, true
}

// HasGoldenClickYear returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasGoldenClickYear() bool {
	if o != nil && !IsNil(o.GoldenClickYear) {
		return true
	}

	return false
}

// SetGoldenClickYear gets a reference to the given int64 and assigns it to the GoldenClickYear field.
func (o *SkyBlockProfileMemberEventsEaster) SetGoldenClickYear(v int64) {
	o.GoldenClickYear = &v
}

// GetLastViewedChocolateFactory returns the LastViewedChocolateFactory field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetLastViewedChocolateFactory() int64 {
	if o == nil || IsNil(o.LastViewedChocolateFactory) {
		var ret int64
		return ret
	}
	return *o.LastViewedChocolateFactory
}

// GetLastViewedChocolateFactoryOk returns a tuple with the LastViewedChocolateFactory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetLastViewedChocolateFactoryOk() (*int64, bool) {
	if o == nil || IsNil(o.LastViewedChocolateFactory) {
		return nil, false
	}
	return o.LastViewedChocolateFactory, true
}

// HasLastViewedChocolateFactory returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasLastViewedChocolateFactory() bool {
	if o != nil && !IsNil(o.LastViewedChocolateFactory) {
		return true
	}

	return false
}

// SetLastViewedChocolateFactory gets a reference to the given int64 and assigns it to the LastViewedChocolateFactory field.
func (o *SkyBlockProfileMemberEventsEaster) SetLastViewedChocolateFactory(v int64) {
	o.LastViewedChocolateFactory = &v
}

// GetRabbitBarnCapacityLevel returns the RabbitBarnCapacityLevel field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitBarnCapacityLevel() int64 {
	if o == nil || IsNil(o.RabbitBarnCapacityLevel) {
		var ret int64
		return ret
	}
	return *o.RabbitBarnCapacityLevel
}

// GetRabbitBarnCapacityLevelOk returns a tuple with the RabbitBarnCapacityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitBarnCapacityLevelOk() (*int64, bool) {
	if o == nil || IsNil(o.RabbitBarnCapacityLevel) {
		return nil, false
	}
	return o.RabbitBarnCapacityLevel, true
}

// HasRabbitBarnCapacityLevel returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasRabbitBarnCapacityLevel() bool {
	if o != nil && !IsNil(o.RabbitBarnCapacityLevel) {
		return true
	}

	return false
}

// SetRabbitBarnCapacityLevel gets a reference to the given int64 and assigns it to the RabbitBarnCapacityLevel field.
func (o *SkyBlockProfileMemberEventsEaster) SetRabbitBarnCapacityLevel(v int64) {
	o.RabbitBarnCapacityLevel = &v
}

// GetRabbitFilter returns the RabbitFilter field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitFilter() string {
	if o == nil || IsNil(o.RabbitFilter) {
		var ret string
		return ret
	}
	return *o.RabbitFilter
}

// GetRabbitFilterOk returns a tuple with the RabbitFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitFilterOk() (*string, bool) {
	if o == nil || IsNil(o.RabbitFilter) {
		return nil, false
	}
	return o.RabbitFilter, true
}

// HasRabbitFilter returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasRabbitFilter() bool {
	if o != nil && !IsNil(o.RabbitFilter) {
		return true
	}

	return false
}

// SetRabbitFilter gets a reference to the given string and assigns it to the RabbitFilter field.
func (o *SkyBlockProfileMemberEventsEaster) SetRabbitFilter(v string) {
	o.RabbitFilter = &v
}

// GetRabbitHitmen returns the RabbitHitmen field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitHitmen() SkyBlockProfileMemberEventsEasterRabbitHitmen {
	if o == nil || IsNil(o.RabbitHitmen) {
		var ret SkyBlockProfileMemberEventsEasterRabbitHitmen
		return ret
	}
	return *o.RabbitHitmen
}

// GetRabbitHitmenOk returns a tuple with the RabbitHitmen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitHitmenOk() (*SkyBlockProfileMemberEventsEasterRabbitHitmen, bool) {
	if o == nil || IsNil(o.RabbitHitmen) {
		return nil, false
	}
	return o.RabbitHitmen, true
}

// HasRabbitHitmen returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasRabbitHitmen() bool {
	if o != nil && !IsNil(o.RabbitHitmen) {
		return true
	}

	return false
}

// SetRabbitHitmen gets a reference to the given SkyBlockProfileMemberEventsEasterRabbitHitmen and assigns it to the RabbitHitmen field.
func (o *SkyBlockProfileMemberEventsEaster) SetRabbitHitmen(v SkyBlockProfileMemberEventsEasterRabbitHitmen) {
	o.RabbitHitmen = &v
}

// GetRabbitHotspotFiler returns the RabbitHotspotFiler field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitHotspotFiler() SkyBlockProfileMemberEventsEasterRabbitHotspotFiler {
	if o == nil || IsNil(o.RabbitHotspotFiler) {
		var ret SkyBlockProfileMemberEventsEasterRabbitHotspotFiler
		return ret
	}
	return *o.RabbitHotspotFiler
}

// GetRabbitHotspotFilerOk returns a tuple with the RabbitHotspotFiler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitHotspotFilerOk() (*SkyBlockProfileMemberEventsEasterRabbitHotspotFiler, bool) {
	if o == nil || IsNil(o.RabbitHotspotFiler) {
		return nil, false
	}
	return o.RabbitHotspotFiler, true
}

// HasRabbitHotspotFiler returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasRabbitHotspotFiler() bool {
	if o != nil && !IsNil(o.RabbitHotspotFiler) {
		return true
	}

	return false
}

// SetRabbitHotspotFiler gets a reference to the given SkyBlockProfileMemberEventsEasterRabbitHotspotFiler and assigns it to the RabbitHotspotFiler field.
func (o *SkyBlockProfileMemberEventsEaster) SetRabbitHotspotFiler(v SkyBlockProfileMemberEventsEasterRabbitHotspotFiler) {
	o.RabbitHotspotFiler = &v
}

// GetRabbitRarityUpgrades returns the RabbitRarityUpgrades field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitRarityUpgrades() int64 {
	if o == nil || IsNil(o.RabbitRarityUpgrades) {
		var ret int64
		return ret
	}
	return *o.RabbitRarityUpgrades
}

// GetRabbitRarityUpgradesOk returns a tuple with the RabbitRarityUpgrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitRarityUpgradesOk() (*int64, bool) {
	if o == nil || IsNil(o.RabbitRarityUpgrades) {
		return nil, false
	}
	return o.RabbitRarityUpgrades, true
}

// HasRabbitRarityUpgrades returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasRabbitRarityUpgrades() bool {
	if o != nil && !IsNil(o.RabbitRarityUpgrades) {
		return true
	}

	return false
}

// SetRabbitRarityUpgrades gets a reference to the given int64 and assigns it to the RabbitRarityUpgrades field.
func (o *SkyBlockProfileMemberEventsEaster) SetRabbitRarityUpgrades(v int64) {
	o.RabbitRarityUpgrades = &v
}

// GetRabbitSort returns the RabbitSort field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitSort() SkyBlockProfileMemberEventsEasterRabbitSort {
	if o == nil || IsNil(o.RabbitSort) {
		var ret SkyBlockProfileMemberEventsEasterRabbitSort
		return ret
	}
	return *o.RabbitSort
}

// GetRabbitSortOk returns a tuple with the RabbitSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitSortOk() (*SkyBlockProfileMemberEventsEasterRabbitSort, bool) {
	if o == nil || IsNil(o.RabbitSort) {
		return nil, false
	}
	return o.RabbitSort, true
}

// HasRabbitSort returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasRabbitSort() bool {
	if o != nil && !IsNil(o.RabbitSort) {
		return true
	}

	return false
}

// SetRabbitSort gets a reference to the given SkyBlockProfileMemberEventsEasterRabbitSort and assigns it to the RabbitSort field.
func (o *SkyBlockProfileMemberEventsEaster) SetRabbitSort(v SkyBlockProfileMemberEventsEasterRabbitSort) {
	o.RabbitSort = &v
}

// GetRabbits returns the Rabbits field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbits() SkyBlockProfileMemberEventsEasterRabbits {
	if o == nil || IsNil(o.Rabbits) {
		var ret SkyBlockProfileMemberEventsEasterRabbits
		return ret
	}
	return *o.Rabbits
}

// GetRabbitsOk returns a tuple with the Rabbits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetRabbitsOk() (*SkyBlockProfileMemberEventsEasterRabbits, bool) {
	if o == nil || IsNil(o.Rabbits) {
		return nil, false
	}
	return o.Rabbits, true
}

// HasRabbits returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasRabbits() bool {
	if o != nil && !IsNil(o.Rabbits) {
		return true
	}

	return false
}

// SetRabbits gets a reference to the given SkyBlockProfileMemberEventsEasterRabbits and assigns it to the Rabbits field.
func (o *SkyBlockProfileMemberEventsEaster) SetRabbits(v SkyBlockProfileMemberEventsEasterRabbits) {
	o.Rabbits = &v
}

// GetRefinedDarkCacaoTruffles returns the RefinedDarkCacaoTruffles field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetRefinedDarkCacaoTruffles() int64 {
	if o == nil || IsNil(o.RefinedDarkCacaoTruffles) {
		var ret int64
		return ret
	}
	return *o.RefinedDarkCacaoTruffles
}

// GetRefinedDarkCacaoTrufflesOk returns a tuple with the RefinedDarkCacaoTruffles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetRefinedDarkCacaoTrufflesOk() (*int64, bool) {
	if o == nil || IsNil(o.RefinedDarkCacaoTruffles) {
		return nil, false
	}
	return o.RefinedDarkCacaoTruffles, true
}

// HasRefinedDarkCacaoTruffles returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasRefinedDarkCacaoTruffles() bool {
	if o != nil && !IsNil(o.RefinedDarkCacaoTruffles) {
		return true
	}

	return false
}

// SetRefinedDarkCacaoTruffles gets a reference to the given int64 and assigns it to the RefinedDarkCacaoTruffles field.
func (o *SkyBlockProfileMemberEventsEaster) SetRefinedDarkCacaoTruffles(v int64) {
	o.RefinedDarkCacaoTruffles = &v
}

// GetShop returns the Shop field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetShop() SkyBlockProfileMemberEventsEasterShop {
	if o == nil || IsNil(o.Shop) {
		var ret SkyBlockProfileMemberEventsEasterShop
		return ret
	}
	return *o.Shop
}

// GetShopOk returns a tuple with the Shop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetShopOk() (*SkyBlockProfileMemberEventsEasterShop, bool) {
	if o == nil || IsNil(o.Shop) {
		return nil, false
	}
	return o.Shop, true
}

// HasShop returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasShop() bool {
	if o != nil && !IsNil(o.Shop) {
		return true
	}

	return false
}

// SetShop gets a reference to the given SkyBlockProfileMemberEventsEasterShop and assigns it to the Shop field.
func (o *SkyBlockProfileMemberEventsEaster) SetShop(v SkyBlockProfileMemberEventsEasterShop) {
	o.Shop = &v
}

// GetSupremeChocolateBars returns the SupremeChocolateBars field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetSupremeChocolateBars() int64 {
	if o == nil || IsNil(o.SupremeChocolateBars) {
		var ret int64
		return ret
	}
	return *o.SupremeChocolateBars
}

// GetSupremeChocolateBarsOk returns a tuple with the SupremeChocolateBars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetSupremeChocolateBarsOk() (*int64, bool) {
	if o == nil || IsNil(o.SupremeChocolateBars) {
		return nil, false
	}
	return o.SupremeChocolateBars, true
}

// HasSupremeChocolateBars returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasSupremeChocolateBars() bool {
	if o != nil && !IsNil(o.SupremeChocolateBars) {
		return true
	}

	return false
}

// SetSupremeChocolateBars gets a reference to the given int64 and assigns it to the SupremeChocolateBars field.
func (o *SkyBlockProfileMemberEventsEaster) SetSupremeChocolateBars(v int64) {
	o.SupremeChocolateBars = &v
}

// GetTimeTower returns the TimeTower field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberEventsEaster) GetTimeTower() SkyBlockProfileMemberEventsEasterTimeTower {
	if o == nil || IsNil(o.TimeTower) {
		var ret SkyBlockProfileMemberEventsEasterTimeTower
		return ret
	}
	return *o.TimeTower
}

// GetTimeTowerOk returns a tuple with the TimeTower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetTimeTowerOk() (*SkyBlockProfileMemberEventsEasterTimeTower, bool) {
	if o == nil || IsNil(o.TimeTower) {
		return nil, false
	}
	return o.TimeTower, true
}

// HasTimeTower returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberEventsEaster) HasTimeTower() bool {
	if o != nil && !IsNil(o.TimeTower) {
		return true
	}

	return false
}

// SetTimeTower gets a reference to the given SkyBlockProfileMemberEventsEasterTimeTower and assigns it to the TimeTower field.
func (o *SkyBlockProfileMemberEventsEaster) SetTimeTower(v SkyBlockProfileMemberEventsEasterTimeTower) {
	o.TimeTower = &v
}

// GetTotalChocolate returns the TotalChocolate field value
func (o *SkyBlockProfileMemberEventsEaster) GetTotalChocolate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalChocolate
}

// GetTotalChocolateOk returns a tuple with the TotalChocolate field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberEventsEaster) GetTotalChocolateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalChocolate, true
}

// SetTotalChocolate sets field value
func (o *SkyBlockProfileMemberEventsEaster) SetTotalChocolate(v int64) {
	o.TotalChocolate = v
}

func (o SkyBlockProfileMemberEventsEaster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberEventsEaster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chocolate"] = o.Chocolate
	if !IsNil(o.ChocolateLevel) {
		toSerialize["chocolate_level"] = o.ChocolateLevel
	}
	if !IsNil(o.ChocolateMultiplierUpgrades) {
		toSerialize["chocolate_multiplier_upgrades"] = o.ChocolateMultiplierUpgrades
	}
	toSerialize["chocolate_since_prestige"] = o.ChocolateSincePrestige
	if !IsNil(o.ClickUpgrades) {
		toSerialize["click_upgrades"] = o.ClickUpgrades
	}
	if !IsNil(o.ElDoradoProgress) {
		toSerialize["el_dorado_progress"] = o.ElDoradoProgress
	}
	if !IsNil(o.Employees) {
		toSerialize["employees"] = o.Employees
	}
	if !IsNil(o.GoldenClickAmount) {
		toSerialize["golden_click_amount"] = o.GoldenClickAmount
	}
	if !IsNil(o.GoldenClickYear) {
		toSerialize["golden_click_year"] = o.GoldenClickYear
	}
	if !IsNil(o.LastViewedChocolateFactory) {
		toSerialize["last_viewed_chocolate_factory"] = o.LastViewedChocolateFactory
	}
	if !IsNil(o.RabbitBarnCapacityLevel) {
		toSerialize["rabbit_barn_capacity_level"] = o.RabbitBarnCapacityLevel
	}
	if !IsNil(o.RabbitFilter) {
		toSerialize["rabbit_filter"] = o.RabbitFilter
	}
	if !IsNil(o.RabbitHitmen) {
		toSerialize["rabbit_hitmen"] = o.RabbitHitmen
	}
	if !IsNil(o.RabbitHotspotFiler) {
		toSerialize["rabbit_hotspot_filer"] = o.RabbitHotspotFiler
	}
	if !IsNil(o.RabbitRarityUpgrades) {
		toSerialize["rabbit_rarity_upgrades"] = o.RabbitRarityUpgrades
	}
	if !IsNil(o.RabbitSort) {
		toSerialize["rabbit_sort"] = o.RabbitSort
	}
	if !IsNil(o.Rabbits) {
		toSerialize["rabbits"] = o.Rabbits
	}
	if !IsNil(o.RefinedDarkCacaoTruffles) {
		toSerialize["refined_dark_cacao_truffles"] = o.RefinedDarkCacaoTruffles
	}
	if !IsNil(o.Shop) {
		toSerialize["shop"] = o.Shop
	}
	if !IsNil(o.SupremeChocolateBars) {
		toSerialize["supreme_chocolate_bars"] = o.SupremeChocolateBars
	}
	if !IsNil(o.TimeTower) {
		toSerialize["time_tower"] = o.TimeTower
	}
	toSerialize["total_chocolate"] = o.TotalChocolate
	return toSerialize, nil
}

func (o *SkyBlockProfileMemberEventsEaster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chocolate",
		"chocolate_since_prestige",
		"total_chocolate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockProfileMemberEventsEaster := _SkyBlockProfileMemberEventsEaster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockProfileMemberEventsEaster)

	if err != nil {
		return err
	}

	*o = SkyBlockProfileMemberEventsEaster(varSkyBlockProfileMemberEventsEaster)

	return err
}

type NullableSkyBlockProfileMemberEventsEaster struct {
	value *SkyBlockProfileMemberEventsEaster
	isSet bool
}

func (v NullableSkyBlockProfileMemberEventsEaster) Get() *SkyBlockProfileMemberEventsEaster {
	return v.value
}

func (v *NullableSkyBlockProfileMemberEventsEaster) Set(val *SkyBlockProfileMemberEventsEaster) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberEventsEaster) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberEventsEaster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberEventsEaster(val *SkyBlockProfileMemberEventsEaster) *NullableSkyBlockProfileMemberEventsEaster {
	return &NullableSkyBlockProfileMemberEventsEaster{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberEventsEaster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberEventsEaster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
