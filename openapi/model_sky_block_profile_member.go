/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMember{}

// SkyBlockProfileMember struct for SkyBlockProfileMember
type SkyBlockProfileMember struct {
	AccessoryBagStorage    *SkyBlockProfileMemberAccessoryBagStorage    `json:"accessory_bag_storage,omitempty"`
	Bestiary               *SkyBlockProfileMemberBestiary               `json:"bestiary,omitempty"`
	Collection             *map[string]int64                            `json:"collection,omitempty"`
	Currencies             *SkyBlockProfileMemberCurrencies             `json:"currencies,omitempty"`
	Dungeons               *SkyBlockProfileMemberDungeons               `json:"dungeons,omitempty"`
	Events                 *SkyBlockProfileMemberEvents                 `json:"events,omitempty"`
	Experimentation        *SkyBlockProfileMemberExperimentation        `json:"experimentation,omitempty"`
	FairySoul              *SkyBlockProfileMemberFairySoul              `json:"fairy_soul,omitempty"`
	Forge                  *SkyBlockProfileMemberForge                  `json:"forge,omitempty"`
	GardenPlayerData       *SkyBlockProfileMemberGardenPlayerData       `json:"garden_player_data,omitempty"`
	GlacitePlayerData      *SkyBlockProfileMemberGlacitePlayerData      `json:"glacite_player_data,omitempty"`
	Inventory              *SkyBlockProfileMemberInventory              `json:"inventory,omitempty"`
	ItemData               *SkyBlockProfileMemberItemData               `json:"item_data,omitempty"`
	JacobsContest          *SkyBlockProfileMemberJacobsContest          `json:"jacobs_contest,omitempty"`
	Leveling               *SkyBlockProfileMemberLeveling               `json:"leveling,omitempty"`
	MiningCore             *SkyBlockProfileMemberMiningCore             `json:"mining_core,omitempty"`
	NetherIslandPlayerData *SkyBlockProfileMemberNetherIslandPlayerData `json:"nether_island_player_data,omitempty"`
	Objectives             *SkyBlockProfileMemberObjectives             `json:"objectives,omitempty"`
	PetsData               *SkyBlockProfileMemberPetsData               `json:"pets_data,omitempty"`
	PlayerData             *SkyBlockProfileMemberPlayerData             `json:"player_data,omitempty"`
	PlayerId               *string                                      `json:"player_id,omitempty"`
	PlayerStats            *SkyBlockProfileMemberPlayerStats            `json:"player_stats,omitempty"`
	Profile                *SkyBlockProfileMemberProfile                `json:"profile,omitempty"`
}

// NewSkyBlockProfileMember instantiates a new SkyBlockProfileMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMember() *SkyBlockProfileMember {
	this := SkyBlockProfileMember{}
	return &this
}

// NewSkyBlockProfileMemberWithDefaults instantiates a new SkyBlockProfileMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberWithDefaults() *SkyBlockProfileMember {
	this := SkyBlockProfileMember{}
	return &this
}

// GetAccessoryBagStorage returns the AccessoryBagStorage field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetAccessoryBagStorage() SkyBlockProfileMemberAccessoryBagStorage {
	if o == nil || IsNil(o.AccessoryBagStorage) {
		var ret SkyBlockProfileMemberAccessoryBagStorage
		return ret
	}
	return *o.AccessoryBagStorage
}

// GetAccessoryBagStorageOk returns a tuple with the AccessoryBagStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetAccessoryBagStorageOk() (*SkyBlockProfileMemberAccessoryBagStorage, bool) {
	if o == nil || IsNil(o.AccessoryBagStorage) {
		return nil, false
	}
	return o.AccessoryBagStorage, true
}

// HasAccessoryBagStorage returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasAccessoryBagStorage() bool {
	if o != nil && !IsNil(o.AccessoryBagStorage) {
		return true
	}

	return false
}

// SetAccessoryBagStorage gets a reference to the given SkyBlockProfileMemberAccessoryBagStorage and assigns it to the AccessoryBagStorage field.
func (o *SkyBlockProfileMember) SetAccessoryBagStorage(v SkyBlockProfileMemberAccessoryBagStorage) {
	o.AccessoryBagStorage = &v
}

// GetBestiary returns the Bestiary field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetBestiary() SkyBlockProfileMemberBestiary {
	if o == nil || IsNil(o.Bestiary) {
		var ret SkyBlockProfileMemberBestiary
		return ret
	}
	return *o.Bestiary
}

// GetBestiaryOk returns a tuple with the Bestiary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetBestiaryOk() (*SkyBlockProfileMemberBestiary, bool) {
	if o == nil || IsNil(o.Bestiary) {
		return nil, false
	}
	return o.Bestiary, true
}

// HasBestiary returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasBestiary() bool {
	if o != nil && !IsNil(o.Bestiary) {
		return true
	}

	return false
}

// SetBestiary gets a reference to the given SkyBlockProfileMemberBestiary and assigns it to the Bestiary field.
func (o *SkyBlockProfileMember) SetBestiary(v SkyBlockProfileMemberBestiary) {
	o.Bestiary = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetCollection() map[string]int64 {
	if o == nil || IsNil(o.Collection) {
		var ret map[string]int64
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetCollectionOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.Collection) {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasCollection() bool {
	if o != nil && !IsNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given map[string]int64 and assigns it to the Collection field.
func (o *SkyBlockProfileMember) SetCollection(v map[string]int64) {
	o.Collection = &v
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetCurrencies() SkyBlockProfileMemberCurrencies {
	if o == nil || IsNil(o.Currencies) {
		var ret SkyBlockProfileMemberCurrencies
		return ret
	}
	return *o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetCurrenciesOk() (*SkyBlockProfileMemberCurrencies, bool) {
	if o == nil || IsNil(o.Currencies) {
		return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasCurrencies() bool {
	if o != nil && !IsNil(o.Currencies) {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given SkyBlockProfileMemberCurrencies and assigns it to the Currencies field.
func (o *SkyBlockProfileMember) SetCurrencies(v SkyBlockProfileMemberCurrencies) {
	o.Currencies = &v
}

// GetDungeons returns the Dungeons field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetDungeons() SkyBlockProfileMemberDungeons {
	if o == nil || IsNil(o.Dungeons) {
		var ret SkyBlockProfileMemberDungeons
		return ret
	}
	return *o.Dungeons
}

// GetDungeonsOk returns a tuple with the Dungeons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetDungeonsOk() (*SkyBlockProfileMemberDungeons, bool) {
	if o == nil || IsNil(o.Dungeons) {
		return nil, false
	}
	return o.Dungeons, true
}

// HasDungeons returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasDungeons() bool {
	if o != nil && !IsNil(o.Dungeons) {
		return true
	}

	return false
}

// SetDungeons gets a reference to the given SkyBlockProfileMemberDungeons and assigns it to the Dungeons field.
func (o *SkyBlockProfileMember) SetDungeons(v SkyBlockProfileMemberDungeons) {
	o.Dungeons = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetEvents() SkyBlockProfileMemberEvents {
	if o == nil || IsNil(o.Events) {
		var ret SkyBlockProfileMemberEvents
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetEventsOk() (*SkyBlockProfileMemberEvents, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given SkyBlockProfileMemberEvents and assigns it to the Events field.
func (o *SkyBlockProfileMember) SetEvents(v SkyBlockProfileMemberEvents) {
	o.Events = &v
}

// GetExperimentation returns the Experimentation field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetExperimentation() SkyBlockProfileMemberExperimentation {
	if o == nil || IsNil(o.Experimentation) {
		var ret SkyBlockProfileMemberExperimentation
		return ret
	}
	return *o.Experimentation
}

// GetExperimentationOk returns a tuple with the Experimentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetExperimentationOk() (*SkyBlockProfileMemberExperimentation, bool) {
	if o == nil || IsNil(o.Experimentation) {
		return nil, false
	}
	return o.Experimentation, true
}

// HasExperimentation returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasExperimentation() bool {
	if o != nil && !IsNil(o.Experimentation) {
		return true
	}

	return false
}

// SetExperimentation gets a reference to the given SkyBlockProfileMemberExperimentation and assigns it to the Experimentation field.
func (o *SkyBlockProfileMember) SetExperimentation(v SkyBlockProfileMemberExperimentation) {
	o.Experimentation = &v
}

// GetFairySoul returns the FairySoul field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetFairySoul() SkyBlockProfileMemberFairySoul {
	if o == nil || IsNil(o.FairySoul) {
		var ret SkyBlockProfileMemberFairySoul
		return ret
	}
	return *o.FairySoul
}

// GetFairySoulOk returns a tuple with the FairySoul field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetFairySoulOk() (*SkyBlockProfileMemberFairySoul, bool) {
	if o == nil || IsNil(o.FairySoul) {
		return nil, false
	}
	return o.FairySoul, true
}

// HasFairySoul returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasFairySoul() bool {
	if o != nil && !IsNil(o.FairySoul) {
		return true
	}

	return false
}

// SetFairySoul gets a reference to the given SkyBlockProfileMemberFairySoul and assigns it to the FairySoul field.
func (o *SkyBlockProfileMember) SetFairySoul(v SkyBlockProfileMemberFairySoul) {
	o.FairySoul = &v
}

// GetForge returns the Forge field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetForge() SkyBlockProfileMemberForge {
	if o == nil || IsNil(o.Forge) {
		var ret SkyBlockProfileMemberForge
		return ret
	}
	return *o.Forge
}

// GetForgeOk returns a tuple with the Forge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetForgeOk() (*SkyBlockProfileMemberForge, bool) {
	if o == nil || IsNil(o.Forge) {
		return nil, false
	}
	return o.Forge, true
}

// HasForge returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasForge() bool {
	if o != nil && !IsNil(o.Forge) {
		return true
	}

	return false
}

// SetForge gets a reference to the given SkyBlockProfileMemberForge and assigns it to the Forge field.
func (o *SkyBlockProfileMember) SetForge(v SkyBlockProfileMemberForge) {
	o.Forge = &v
}

// GetGardenPlayerData returns the GardenPlayerData field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetGardenPlayerData() SkyBlockProfileMemberGardenPlayerData {
	if o == nil || IsNil(o.GardenPlayerData) {
		var ret SkyBlockProfileMemberGardenPlayerData
		return ret
	}
	return *o.GardenPlayerData
}

// GetGardenPlayerDataOk returns a tuple with the GardenPlayerData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetGardenPlayerDataOk() (*SkyBlockProfileMemberGardenPlayerData, bool) {
	if o == nil || IsNil(o.GardenPlayerData) {
		return nil, false
	}
	return o.GardenPlayerData, true
}

// HasGardenPlayerData returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasGardenPlayerData() bool {
	if o != nil && !IsNil(o.GardenPlayerData) {
		return true
	}

	return false
}

// SetGardenPlayerData gets a reference to the given SkyBlockProfileMemberGardenPlayerData and assigns it to the GardenPlayerData field.
func (o *SkyBlockProfileMember) SetGardenPlayerData(v SkyBlockProfileMemberGardenPlayerData) {
	o.GardenPlayerData = &v
}

// GetGlacitePlayerData returns the GlacitePlayerData field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetGlacitePlayerData() SkyBlockProfileMemberGlacitePlayerData {
	if o == nil || IsNil(o.GlacitePlayerData) {
		var ret SkyBlockProfileMemberGlacitePlayerData
		return ret
	}
	return *o.GlacitePlayerData
}

// GetGlacitePlayerDataOk returns a tuple with the GlacitePlayerData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetGlacitePlayerDataOk() (*SkyBlockProfileMemberGlacitePlayerData, bool) {
	if o == nil || IsNil(o.GlacitePlayerData) {
		return nil, false
	}
	return o.GlacitePlayerData, true
}

// HasGlacitePlayerData returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasGlacitePlayerData() bool {
	if o != nil && !IsNil(o.GlacitePlayerData) {
		return true
	}

	return false
}

// SetGlacitePlayerData gets a reference to the given SkyBlockProfileMemberGlacitePlayerData and assigns it to the GlacitePlayerData field.
func (o *SkyBlockProfileMember) SetGlacitePlayerData(v SkyBlockProfileMemberGlacitePlayerData) {
	o.GlacitePlayerData = &v
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetInventory() SkyBlockProfileMemberInventory {
	if o == nil || IsNil(o.Inventory) {
		var ret SkyBlockProfileMemberInventory
		return ret
	}
	return *o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetInventoryOk() (*SkyBlockProfileMemberInventory, bool) {
	if o == nil || IsNil(o.Inventory) {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasInventory() bool {
	if o != nil && !IsNil(o.Inventory) {
		return true
	}

	return false
}

// SetInventory gets a reference to the given SkyBlockProfileMemberInventory and assigns it to the Inventory field.
func (o *SkyBlockProfileMember) SetInventory(v SkyBlockProfileMemberInventory) {
	o.Inventory = &v
}

// GetItemData returns the ItemData field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetItemData() SkyBlockProfileMemberItemData {
	if o == nil || IsNil(o.ItemData) {
		var ret SkyBlockProfileMemberItemData
		return ret
	}
	return *o.ItemData
}

// GetItemDataOk returns a tuple with the ItemData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetItemDataOk() (*SkyBlockProfileMemberItemData, bool) {
	if o == nil || IsNil(o.ItemData) {
		return nil, false
	}
	return o.ItemData, true
}

// HasItemData returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasItemData() bool {
	if o != nil && !IsNil(o.ItemData) {
		return true
	}

	return false
}

// SetItemData gets a reference to the given SkyBlockProfileMemberItemData and assigns it to the ItemData field.
func (o *SkyBlockProfileMember) SetItemData(v SkyBlockProfileMemberItemData) {
	o.ItemData = &v
}

// GetJacobsContest returns the JacobsContest field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetJacobsContest() SkyBlockProfileMemberJacobsContest {
	if o == nil || IsNil(o.JacobsContest) {
		var ret SkyBlockProfileMemberJacobsContest
		return ret
	}
	return *o.JacobsContest
}

// GetJacobsContestOk returns a tuple with the JacobsContest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetJacobsContestOk() (*SkyBlockProfileMemberJacobsContest, bool) {
	if o == nil || IsNil(o.JacobsContest) {
		return nil, false
	}
	return o.JacobsContest, true
}

// HasJacobsContest returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasJacobsContest() bool {
	if o != nil && !IsNil(o.JacobsContest) {
		return true
	}

	return false
}

// SetJacobsContest gets a reference to the given SkyBlockProfileMemberJacobsContest and assigns it to the JacobsContest field.
func (o *SkyBlockProfileMember) SetJacobsContest(v SkyBlockProfileMemberJacobsContest) {
	o.JacobsContest = &v
}

// GetLeveling returns the Leveling field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetLeveling() SkyBlockProfileMemberLeveling {
	if o == nil || IsNil(o.Leveling) {
		var ret SkyBlockProfileMemberLeveling
		return ret
	}
	return *o.Leveling
}

// GetLevelingOk returns a tuple with the Leveling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetLevelingOk() (*SkyBlockProfileMemberLeveling, bool) {
	if o == nil || IsNil(o.Leveling) {
		return nil, false
	}
	return o.Leveling, true
}

// HasLeveling returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasLeveling() bool {
	if o != nil && !IsNil(o.Leveling) {
		return true
	}

	return false
}

// SetLeveling gets a reference to the given SkyBlockProfileMemberLeveling and assigns it to the Leveling field.
func (o *SkyBlockProfileMember) SetLeveling(v SkyBlockProfileMemberLeveling) {
	o.Leveling = &v
}

// GetMiningCore returns the MiningCore field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetMiningCore() SkyBlockProfileMemberMiningCore {
	if o == nil || IsNil(o.MiningCore) {
		var ret SkyBlockProfileMemberMiningCore
		return ret
	}
	return *o.MiningCore
}

// GetMiningCoreOk returns a tuple with the MiningCore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetMiningCoreOk() (*SkyBlockProfileMemberMiningCore, bool) {
	if o == nil || IsNil(o.MiningCore) {
		return nil, false
	}
	return o.MiningCore, true
}

// HasMiningCore returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasMiningCore() bool {
	if o != nil && !IsNil(o.MiningCore) {
		return true
	}

	return false
}

// SetMiningCore gets a reference to the given SkyBlockProfileMemberMiningCore and assigns it to the MiningCore field.
func (o *SkyBlockProfileMember) SetMiningCore(v SkyBlockProfileMemberMiningCore) {
	o.MiningCore = &v
}

// GetNetherIslandPlayerData returns the NetherIslandPlayerData field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetNetherIslandPlayerData() SkyBlockProfileMemberNetherIslandPlayerData {
	if o == nil || IsNil(o.NetherIslandPlayerData) {
		var ret SkyBlockProfileMemberNetherIslandPlayerData
		return ret
	}
	return *o.NetherIslandPlayerData
}

// GetNetherIslandPlayerDataOk returns a tuple with the NetherIslandPlayerData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetNetherIslandPlayerDataOk() (*SkyBlockProfileMemberNetherIslandPlayerData, bool) {
	if o == nil || IsNil(o.NetherIslandPlayerData) {
		return nil, false
	}
	return o.NetherIslandPlayerData, true
}

// HasNetherIslandPlayerData returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasNetherIslandPlayerData() bool {
	if o != nil && !IsNil(o.NetherIslandPlayerData) {
		return true
	}

	return false
}

// SetNetherIslandPlayerData gets a reference to the given SkyBlockProfileMemberNetherIslandPlayerData and assigns it to the NetherIslandPlayerData field.
func (o *SkyBlockProfileMember) SetNetherIslandPlayerData(v SkyBlockProfileMemberNetherIslandPlayerData) {
	o.NetherIslandPlayerData = &v
}

// GetObjectives returns the Objectives field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetObjectives() SkyBlockProfileMemberObjectives {
	if o == nil || IsNil(o.Objectives) {
		var ret SkyBlockProfileMemberObjectives
		return ret
	}
	return *o.Objectives
}

// GetObjectivesOk returns a tuple with the Objectives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetObjectivesOk() (*SkyBlockProfileMemberObjectives, bool) {
	if o == nil || IsNil(o.Objectives) {
		return nil, false
	}
	return o.Objectives, true
}

// HasObjectives returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasObjectives() bool {
	if o != nil && !IsNil(o.Objectives) {
		return true
	}

	return false
}

// SetObjectives gets a reference to the given SkyBlockProfileMemberObjectives and assigns it to the Objectives field.
func (o *SkyBlockProfileMember) SetObjectives(v SkyBlockProfileMemberObjectives) {
	o.Objectives = &v
}

// GetPetsData returns the PetsData field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetPetsData() SkyBlockProfileMemberPetsData {
	if o == nil || IsNil(o.PetsData) {
		var ret SkyBlockProfileMemberPetsData
		return ret
	}
	return *o.PetsData
}

// GetPetsDataOk returns a tuple with the PetsData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetPetsDataOk() (*SkyBlockProfileMemberPetsData, bool) {
	if o == nil || IsNil(o.PetsData) {
		return nil, false
	}
	return o.PetsData, true
}

// HasPetsData returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasPetsData() bool {
	if o != nil && !IsNil(o.PetsData) {
		return true
	}

	return false
}

// SetPetsData gets a reference to the given SkyBlockProfileMemberPetsData and assigns it to the PetsData field.
func (o *SkyBlockProfileMember) SetPetsData(v SkyBlockProfileMemberPetsData) {
	o.PetsData = &v
}

// GetPlayerData returns the PlayerData field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetPlayerData() SkyBlockProfileMemberPlayerData {
	if o == nil || IsNil(o.PlayerData) {
		var ret SkyBlockProfileMemberPlayerData
		return ret
	}
	return *o.PlayerData
}

// GetPlayerDataOk returns a tuple with the PlayerData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetPlayerDataOk() (*SkyBlockProfileMemberPlayerData, bool) {
	if o == nil || IsNil(o.PlayerData) {
		return nil, false
	}
	return o.PlayerData, true
}

// HasPlayerData returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasPlayerData() bool {
	if o != nil && !IsNil(o.PlayerData) {
		return true
	}

	return false
}

// SetPlayerData gets a reference to the given SkyBlockProfileMemberPlayerData and assigns it to the PlayerData field.
func (o *SkyBlockProfileMember) SetPlayerData(v SkyBlockProfileMemberPlayerData) {
	o.PlayerData = &v
}

// GetPlayerId returns the PlayerId field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetPlayerId() string {
	if o == nil || IsNil(o.PlayerId) {
		var ret string
		return ret
	}
	return *o.PlayerId
}

// GetPlayerIdOk returns a tuple with the PlayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetPlayerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlayerId) {
		return nil, false
	}
	return o.PlayerId, true
}

// HasPlayerId returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasPlayerId() bool {
	if o != nil && !IsNil(o.PlayerId) {
		return true
	}

	return false
}

// SetPlayerId gets a reference to the given string and assigns it to the PlayerId field.
func (o *SkyBlockProfileMember) SetPlayerId(v string) {
	o.PlayerId = &v
}

// GetPlayerStats returns the PlayerStats field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetPlayerStats() SkyBlockProfileMemberPlayerStats {
	if o == nil || IsNil(o.PlayerStats) {
		var ret SkyBlockProfileMemberPlayerStats
		return ret
	}
	return *o.PlayerStats
}

// GetPlayerStatsOk returns a tuple with the PlayerStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetPlayerStatsOk() (*SkyBlockProfileMemberPlayerStats, bool) {
	if o == nil || IsNil(o.PlayerStats) {
		return nil, false
	}
	return o.PlayerStats, true
}

// HasPlayerStats returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasPlayerStats() bool {
	if o != nil && !IsNil(o.PlayerStats) {
		return true
	}

	return false
}

// SetPlayerStats gets a reference to the given SkyBlockProfileMemberPlayerStats and assigns it to the PlayerStats field.
func (o *SkyBlockProfileMember) SetPlayerStats(v SkyBlockProfileMemberPlayerStats) {
	o.PlayerStats = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *SkyBlockProfileMember) GetProfile() SkyBlockProfileMemberProfile {
	if o == nil || IsNil(o.Profile) {
		var ret SkyBlockProfileMemberProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMember) GetProfileOk() (*SkyBlockProfileMemberProfile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *SkyBlockProfileMember) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given SkyBlockProfileMemberProfile and assigns it to the Profile field.
func (o *SkyBlockProfileMember) SetProfile(v SkyBlockProfileMemberProfile) {
	o.Profile = &v
}

func (o SkyBlockProfileMember) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessoryBagStorage) {
		toSerialize["accessory_bag_storage"] = o.AccessoryBagStorage
	}
	if !IsNil(o.Bestiary) {
		toSerialize["bestiary"] = o.Bestiary
	}
	if !IsNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	if !IsNil(o.Currencies) {
		toSerialize["currencies"] = o.Currencies
	}
	if !IsNil(o.Dungeons) {
		toSerialize["dungeons"] = o.Dungeons
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Experimentation) {
		toSerialize["experimentation"] = o.Experimentation
	}
	if !IsNil(o.FairySoul) {
		toSerialize["fairy_soul"] = o.FairySoul
	}
	if !IsNil(o.Forge) {
		toSerialize["forge"] = o.Forge
	}
	if !IsNil(o.GardenPlayerData) {
		toSerialize["garden_player_data"] = o.GardenPlayerData
	}
	if !IsNil(o.GlacitePlayerData) {
		toSerialize["glacite_player_data"] = o.GlacitePlayerData
	}
	if !IsNil(o.Inventory) {
		toSerialize["inventory"] = o.Inventory
	}
	if !IsNil(o.ItemData) {
		toSerialize["item_data"] = o.ItemData
	}
	if !IsNil(o.JacobsContest) {
		toSerialize["jacobs_contest"] = o.JacobsContest
	}
	if !IsNil(o.Leveling) {
		toSerialize["leveling"] = o.Leveling
	}
	if !IsNil(o.MiningCore) {
		toSerialize["mining_core"] = o.MiningCore
	}
	if !IsNil(o.NetherIslandPlayerData) {
		toSerialize["nether_island_player_data"] = o.NetherIslandPlayerData
	}
	if !IsNil(o.Objectives) {
		toSerialize["objectives"] = o.Objectives
	}
	if !IsNil(o.PetsData) {
		toSerialize["pets_data"] = o.PetsData
	}
	if !IsNil(o.PlayerData) {
		toSerialize["player_data"] = o.PlayerData
	}
	if !IsNil(o.PlayerId) {
		toSerialize["player_id"] = o.PlayerId
	}
	if !IsNil(o.PlayerStats) {
		toSerialize["player_stats"] = o.PlayerStats
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMember struct {
	value *SkyBlockProfileMember
	isSet bool
}

func (v NullableSkyBlockProfileMember) Get() *SkyBlockProfileMember {
	return v.value
}

func (v *NullableSkyBlockProfileMember) Set(val *SkyBlockProfileMember) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMember) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMember(val *SkyBlockProfileMember) *NullableSkyBlockProfileMember {
	return &NullableSkyBlockProfileMember{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
