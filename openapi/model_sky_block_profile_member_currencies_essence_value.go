/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberCurrenciesEssenceValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberCurrenciesEssenceValue{}

// SkyBlockProfileMemberCurrenciesEssenceValue struct for SkyBlockProfileMemberCurrenciesEssenceValue
type SkyBlockProfileMemberCurrenciesEssenceValue struct {
	Current *int64 `json:"current,omitempty"`
}

// NewSkyBlockProfileMemberCurrenciesEssenceValue instantiates a new SkyBlockProfileMemberCurrenciesEssenceValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberCurrenciesEssenceValue() *SkyBlockProfileMemberCurrenciesEssenceValue {
	this := SkyBlockProfileMemberCurrenciesEssenceValue{}
	return &this
}

// NewSkyBlockProfileMemberCurrenciesEssenceValueWithDefaults instantiates a new SkyBlockProfileMemberCurrenciesEssenceValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberCurrenciesEssenceValueWithDefaults() *SkyBlockProfileMemberCurrenciesEssenceValue {
	this := SkyBlockProfileMemberCurrenciesEssenceValue{}
	return &this
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssenceValue) GetCurrent() int64 {
	if o == nil || IsNil(o.Current) {
		var ret int64
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssenceValue) GetCurrentOk() (*int64, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssenceValue) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given int64 and assigns it to the Current field.
func (o *SkyBlockProfileMemberCurrenciesEssenceValue) SetCurrent(v int64) {
	o.Current = &v
}

func (o SkyBlockProfileMemberCurrenciesEssenceValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberCurrenciesEssenceValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberCurrenciesEssenceValue struct {
	value *SkyBlockProfileMemberCurrenciesEssenceValue
	isSet bool
}

func (v NullableSkyBlockProfileMemberCurrenciesEssenceValue) Get() *SkyBlockProfileMemberCurrenciesEssenceValue {
	return v.value
}

func (v *NullableSkyBlockProfileMemberCurrenciesEssenceValue) Set(val *SkyBlockProfileMemberCurrenciesEssenceValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberCurrenciesEssenceValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberCurrenciesEssenceValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberCurrenciesEssenceValue(val *SkyBlockProfileMemberCurrenciesEssenceValue) *NullableSkyBlockProfileMemberCurrenciesEssenceValue {
	return &NullableSkyBlockProfileMemberCurrenciesEssenceValue{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberCurrenciesEssenceValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberCurrenciesEssenceValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
