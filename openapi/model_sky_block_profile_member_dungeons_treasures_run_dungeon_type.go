/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberDungeonsTreasuresRunDungeonType the model 'SkyBlockProfileMemberDungeonsTreasuresRunDungeonType'
type SkyBlockProfileMemberDungeonsTreasuresRunDungeonType string

// List of SkyBlockProfileMemberDungeonsTreasuresRun_dungeon_type
const (
	SKYBLOCKPROFILEMEMBERDUNGEONSTREASURESRUNDUNGEONTYPE_CATACOMBS        SkyBlockProfileMemberDungeonsTreasuresRunDungeonType = "catacombs"
	SKYBLOCKPROFILEMEMBERDUNGEONSTREASURESRUNDUNGEONTYPE_MASTER_CATACOMBS SkyBlockProfileMemberDungeonsTreasuresRunDungeonType = "master_catacombs"
)

// All allowed values of SkyBlockProfileMemberDungeonsTreasuresRunDungeonType enum
var AllowedSkyBlockProfileMemberDungeonsTreasuresRunDungeonTypeEnumValues = []SkyBlockProfileMemberDungeonsTreasuresRunDungeonType{
	"catacombs",
	"master_catacombs",
}

func (v *SkyBlockProfileMemberDungeonsTreasuresRunDungeonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberDungeonsTreasuresRunDungeonType(value)
	for _, existing := range AllowedSkyBlockProfileMemberDungeonsTreasuresRunDungeonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberDungeonsTreasuresRunDungeonType", value)
}

// NewSkyBlockProfileMemberDungeonsTreasuresRunDungeonTypeFromValue returns a pointer to a valid SkyBlockProfileMemberDungeonsTreasuresRunDungeonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberDungeonsTreasuresRunDungeonTypeFromValue(v string) (*SkyBlockProfileMemberDungeonsTreasuresRunDungeonType, error) {
	ev := SkyBlockProfileMemberDungeonsTreasuresRunDungeonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberDungeonsTreasuresRunDungeonType: valid values are %v", v, AllowedSkyBlockProfileMemberDungeonsTreasuresRunDungeonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberDungeonsTreasuresRunDungeonType) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberDungeonsTreasuresRunDungeonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberDungeonsTreasuresRun_dungeon_type value
func (v SkyBlockProfileMemberDungeonsTreasuresRunDungeonType) Ptr() *SkyBlockProfileMemberDungeonsTreasuresRunDungeonType {
	return &v
}

type NullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType struct {
	value *SkyBlockProfileMemberDungeonsTreasuresRunDungeonType
	isSet bool
}

func (v NullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType) Get() *SkyBlockProfileMemberDungeonsTreasuresRunDungeonType {
	return v.value
}

func (v *NullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType) Set(val *SkyBlockProfileMemberDungeonsTreasuresRunDungeonType) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType(val *SkyBlockProfileMemberDungeonsTreasuresRunDungeonType) *NullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType {
	return &NullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberDungeonsTreasuresRunDungeonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
