/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockItem{}

// SkyBlockItem struct for SkyBlockItem
type SkyBlockItem struct {
	// The color metadata to be applied to an item, usually leather armor pieces
	Color *string `json:"color,omitempty" validate:"regexp=^(?:(?:^|,\\\\s*)([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])){3}$"`
	// The unique identifier for this item
	Id *string `json:"id,omitempty"`
	// The Bukkit material enum value for the item
	Material *string `json:"material,omitempty"`
	// The name of the item
	Name *string `json:"name,omitempty"`
	// The skin value for a skull based item
	Skin *string           `json:"skin,omitempty"`
	Tier *SkyBlockItemTier `json:"tier,omitempty"`
}

// NewSkyBlockItem instantiates a new SkyBlockItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockItem() *SkyBlockItem {
	this := SkyBlockItem{}
	return &this
}

// NewSkyBlockItemWithDefaults instantiates a new SkyBlockItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockItemWithDefaults() *SkyBlockItem {
	this := SkyBlockItem{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *SkyBlockItem) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *SkyBlockItem) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *SkyBlockItem) SetColor(v string) {
	o.Color = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SkyBlockItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SkyBlockItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SkyBlockItem) SetId(v string) {
	o.Id = &v
}

// GetMaterial returns the Material field value if set, zero value otherwise.
func (o *SkyBlockItem) GetMaterial() string {
	if o == nil || IsNil(o.Material) {
		var ret string
		return ret
	}
	return *o.Material
}

// GetMaterialOk returns a tuple with the Material field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetMaterialOk() (*string, bool) {
	if o == nil || IsNil(o.Material) {
		return nil, false
	}
	return o.Material, true
}

// HasMaterial returns a boolean if a field has been set.
func (o *SkyBlockItem) HasMaterial() bool {
	if o != nil && !IsNil(o.Material) {
		return true
	}

	return false
}

// SetMaterial gets a reference to the given string and assigns it to the Material field.
func (o *SkyBlockItem) SetMaterial(v string) {
	o.Material = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SkyBlockItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SkyBlockItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SkyBlockItem) SetName(v string) {
	o.Name = &v
}

// GetSkin returns the Skin field value if set, zero value otherwise.
func (o *SkyBlockItem) GetSkin() string {
	if o == nil || IsNil(o.Skin) {
		var ret string
		return ret
	}
	return *o.Skin
}

// GetSkinOk returns a tuple with the Skin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetSkinOk() (*string, bool) {
	if o == nil || IsNil(o.Skin) {
		return nil, false
	}
	return o.Skin, true
}

// HasSkin returns a boolean if a field has been set.
func (o *SkyBlockItem) HasSkin() bool {
	if o != nil && !IsNil(o.Skin) {
		return true
	}

	return false
}

// SetSkin gets a reference to the given string and assigns it to the Skin field.
func (o *SkyBlockItem) SetSkin(v string) {
	o.Skin = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *SkyBlockItem) GetTier() SkyBlockItemTier {
	if o == nil || IsNil(o.Tier) {
		var ret SkyBlockItemTier
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetTierOk() (*SkyBlockItemTier, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *SkyBlockItem) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given SkyBlockItemTier and assigns it to the Tier field.
func (o *SkyBlockItem) SetTier(v SkyBlockItemTier) {
	o.Tier = &v
}

func (o SkyBlockItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Material) {
		toSerialize["material"] = o.Material
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Skin) {
		toSerialize["skin"] = o.Skin
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	return toSerialize, nil
}

type NullableSkyBlockItem struct {
	value *SkyBlockItem
	isSet bool
}

func (v NullableSkyBlockItem) Get() *SkyBlockItem {
	return v.value
}

func (v *NullableSkyBlockItem) Set(val *SkyBlockItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockItem(val *SkyBlockItem) *NullableSkyBlockItem {
	return &NullableSkyBlockItem{value: val, isSet: true}
}

func (v NullableSkyBlockItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
