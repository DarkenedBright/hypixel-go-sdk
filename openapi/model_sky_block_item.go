/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockItem{}

// SkyBlockItem struct for SkyBlockItem
type SkyBlockItem struct {
	// The unique identifier for this item
	Id *string `json:"id,omitempty"`
	// The Bukkit material enum value for the item
	Material *string `json:"material,omitempty"`
	// The name of the item
	Name *string `json:"name,omitempty"`
	// The rarity tier of the item
	Tier *string `json:"tier,omitempty"`
	// The color metadata to be applied to an item, usually leather armor pieces
	Color *string `json:"color,omitempty" validate:"regexp=^(?:(?:^|,\\\\s*)([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])){3}$"`
	// The skin value for a skull based item
	Skin *string `json:"skin,omitempty"`
}

// NewSkyBlockItem instantiates a new SkyBlockItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockItem() *SkyBlockItem {
	this := SkyBlockItem{}
	return &this
}

// NewSkyBlockItemWithDefaults instantiates a new SkyBlockItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockItemWithDefaults() *SkyBlockItem {
	this := SkyBlockItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SkyBlockItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SkyBlockItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SkyBlockItem) SetId(v string) {
	o.Id = &v
}

// GetMaterial returns the Material field value if set, zero value otherwise.
func (o *SkyBlockItem) GetMaterial() string {
	if o == nil || IsNil(o.Material) {
		var ret string
		return ret
	}
	return *o.Material
}

// GetMaterialOk returns a tuple with the Material field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetMaterialOk() (*string, bool) {
	if o == nil || IsNil(o.Material) {
		return nil, false
	}
	return o.Material, true
}

// HasMaterial returns a boolean if a field has been set.
func (o *SkyBlockItem) HasMaterial() bool {
	if o != nil && !IsNil(o.Material) {
		return true
	}

	return false
}

// SetMaterial gets a reference to the given string and assigns it to the Material field.
func (o *SkyBlockItem) SetMaterial(v string) {
	o.Material = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SkyBlockItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SkyBlockItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SkyBlockItem) SetName(v string) {
	o.Name = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *SkyBlockItem) GetTier() string {
	if o == nil || IsNil(o.Tier) {
		var ret string
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetTierOk() (*string, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *SkyBlockItem) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given string and assigns it to the Tier field.
func (o *SkyBlockItem) SetTier(v string) {
	o.Tier = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *SkyBlockItem) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *SkyBlockItem) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *SkyBlockItem) SetColor(v string) {
	o.Color = &v
}

// GetSkin returns the Skin field value if set, zero value otherwise.
func (o *SkyBlockItem) GetSkin() string {
	if o == nil || IsNil(o.Skin) {
		var ret string
		return ret
	}
	return *o.Skin
}

// GetSkinOk returns a tuple with the Skin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockItem) GetSkinOk() (*string, bool) {
	if o == nil || IsNil(o.Skin) {
		return nil, false
	}
	return o.Skin, true
}

// HasSkin returns a boolean if a field has been set.
func (o *SkyBlockItem) HasSkin() bool {
	if o != nil && !IsNil(o.Skin) {
		return true
	}

	return false
}

// SetSkin gets a reference to the given string and assigns it to the Skin field.
func (o *SkyBlockItem) SetSkin(v string) {
	o.Skin = &v
}

func (o SkyBlockItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Material) {
		toSerialize["material"] = o.Material
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Skin) {
		toSerialize["skin"] = o.Skin
	}
	return toSerialize, nil
}

type NullableSkyBlockItem struct {
	value *SkyBlockItem
	isSet bool
}

func (v NullableSkyBlockItem) Get() *SkyBlockItem {
	return v.value
}

func (v *NullableSkyBlockItem) Set(val *SkyBlockItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockItem(val *SkyBlockItem) *NullableSkyBlockItem {
	return &NullableSkyBlockItem{value: val, isSet: true}
}

func (v NullableSkyBlockItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
