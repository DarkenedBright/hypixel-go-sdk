/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockProfileMemberRiftAccessPass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberRiftAccessPass{}

// SkyBlockProfileMemberRiftAccessPass struct for SkyBlockProfileMemberRiftAccessPass
type SkyBlockProfileMemberRiftAccessPass struct {
	FromRefund      *bool `json:"from_refund,omitempty"`
	IssuedAt        int64 `json:"issued_at"`
	RiftServerJoins int64 `json:"rift_server_joins"`
	UsedPrism       *bool `json:"used_prism,omitempty"`
}

type _SkyBlockProfileMemberRiftAccessPass SkyBlockProfileMemberRiftAccessPass

// NewSkyBlockProfileMemberRiftAccessPass instantiates a new SkyBlockProfileMemberRiftAccessPass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberRiftAccessPass(issuedAt int64, riftServerJoins int64) *SkyBlockProfileMemberRiftAccessPass {
	this := SkyBlockProfileMemberRiftAccessPass{}
	this.IssuedAt = issuedAt
	this.RiftServerJoins = riftServerJoins
	return &this
}

// NewSkyBlockProfileMemberRiftAccessPassWithDefaults instantiates a new SkyBlockProfileMemberRiftAccessPass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberRiftAccessPassWithDefaults() *SkyBlockProfileMemberRiftAccessPass {
	this := SkyBlockProfileMemberRiftAccessPass{}
	return &this
}

// GetFromRefund returns the FromRefund field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftAccessPass) GetFromRefund() bool {
	if o == nil || IsNil(o.FromRefund) {
		var ret bool
		return ret
	}
	return *o.FromRefund
}

// GetFromRefundOk returns a tuple with the FromRefund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftAccessPass) GetFromRefundOk() (*bool, bool) {
	if o == nil || IsNil(o.FromRefund) {
		return nil, false
	}
	return o.FromRefund, true
}

// HasFromRefund returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftAccessPass) HasFromRefund() bool {
	if o != nil && !IsNil(o.FromRefund) {
		return true
	}

	return false
}

// SetFromRefund gets a reference to the given bool and assigns it to the FromRefund field.
func (o *SkyBlockProfileMemberRiftAccessPass) SetFromRefund(v bool) {
	o.FromRefund = &v
}

// GetIssuedAt returns the IssuedAt field value
func (o *SkyBlockProfileMemberRiftAccessPass) GetIssuedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftAccessPass) GetIssuedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedAt, true
}

// SetIssuedAt sets field value
func (o *SkyBlockProfileMemberRiftAccessPass) SetIssuedAt(v int64) {
	o.IssuedAt = v
}

// GetRiftServerJoins returns the RiftServerJoins field value
func (o *SkyBlockProfileMemberRiftAccessPass) GetRiftServerJoins() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RiftServerJoins
}

// GetRiftServerJoinsOk returns a tuple with the RiftServerJoins field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftAccessPass) GetRiftServerJoinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RiftServerJoins, true
}

// SetRiftServerJoins sets field value
func (o *SkyBlockProfileMemberRiftAccessPass) SetRiftServerJoins(v int64) {
	o.RiftServerJoins = v
}

// GetUsedPrism returns the UsedPrism field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftAccessPass) GetUsedPrism() bool {
	if o == nil || IsNil(o.UsedPrism) {
		var ret bool
		return ret
	}
	return *o.UsedPrism
}

// GetUsedPrismOk returns a tuple with the UsedPrism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftAccessPass) GetUsedPrismOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedPrism) {
		return nil, false
	}
	return o.UsedPrism, true
}

// HasUsedPrism returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftAccessPass) HasUsedPrism() bool {
	if o != nil && !IsNil(o.UsedPrism) {
		return true
	}

	return false
}

// SetUsedPrism gets a reference to the given bool and assigns it to the UsedPrism field.
func (o *SkyBlockProfileMemberRiftAccessPass) SetUsedPrism(v bool) {
	o.UsedPrism = &v
}

func (o SkyBlockProfileMemberRiftAccessPass) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberRiftAccessPass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromRefund) {
		toSerialize["from_refund"] = o.FromRefund
	}
	toSerialize["issued_at"] = o.IssuedAt
	toSerialize["rift_server_joins"] = o.RiftServerJoins
	if !IsNil(o.UsedPrism) {
		toSerialize["used_prism"] = o.UsedPrism
	}
	return toSerialize, nil
}

func (o *SkyBlockProfileMemberRiftAccessPass) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issued_at",
		"rift_server_joins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockProfileMemberRiftAccessPass := _SkyBlockProfileMemberRiftAccessPass{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockProfileMemberRiftAccessPass)

	if err != nil {
		return err
	}

	*o = SkyBlockProfileMemberRiftAccessPass(varSkyBlockProfileMemberRiftAccessPass)

	return err
}

type NullableSkyBlockProfileMemberRiftAccessPass struct {
	value *SkyBlockProfileMemberRiftAccessPass
	isSet bool
}

func (v NullableSkyBlockProfileMemberRiftAccessPass) Get() *SkyBlockProfileMemberRiftAccessPass {
	return v.value
}

func (v *NullableSkyBlockProfileMemberRiftAccessPass) Set(val *SkyBlockProfileMemberRiftAccessPass) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberRiftAccessPass) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberRiftAccessPass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberRiftAccessPass(val *SkyBlockProfileMemberRiftAccessPass) *NullableSkyBlockProfileMemberRiftAccessPass {
	return &NullableSkyBlockProfileMemberRiftAccessPass{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberRiftAccessPass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberRiftAccessPass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
