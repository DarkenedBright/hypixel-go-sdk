/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V2SkyblockNewsGet429Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2SkyblockNewsGet429Response{}

// V2SkyblockNewsGet429Response struct for V2SkyblockNewsGet429Response
type V2SkyblockNewsGet429Response struct {
	Cause *string `json:"cause,omitempty"`
	// When this boolean exists and is true, the throttle occurring is a global throttle applied to all users
	Global   *bool `json:"global,omitempty"`
	Success  *bool `json:"success,omitempty"`
	Throttle *bool `json:"throttle,omitempty"`
}

// NewV2SkyblockNewsGet429Response instantiates a new V2SkyblockNewsGet429Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2SkyblockNewsGet429Response() *V2SkyblockNewsGet429Response {
	this := V2SkyblockNewsGet429Response{}
	return &this
}

// NewV2SkyblockNewsGet429ResponseWithDefaults instantiates a new V2SkyblockNewsGet429Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2SkyblockNewsGet429ResponseWithDefaults() *V2SkyblockNewsGet429Response {
	this := V2SkyblockNewsGet429Response{}
	return &this
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *V2SkyblockNewsGet429Response) GetCause() string {
	if o == nil || IsNil(o.Cause) {
		var ret string
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SkyblockNewsGet429Response) GetCauseOk() (*string, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *V2SkyblockNewsGet429Response) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given string and assigns it to the Cause field.
func (o *V2SkyblockNewsGet429Response) SetCause(v string) {
	o.Cause = &v
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *V2SkyblockNewsGet429Response) GetGlobal() bool {
	if o == nil || IsNil(o.Global) {
		var ret bool
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SkyblockNewsGet429Response) GetGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *V2SkyblockNewsGet429Response) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given bool and assigns it to the Global field.
func (o *V2SkyblockNewsGet429Response) SetGlobal(v bool) {
	o.Global = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *V2SkyblockNewsGet429Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SkyblockNewsGet429Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *V2SkyblockNewsGet429Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *V2SkyblockNewsGet429Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetThrottle returns the Throttle field value if set, zero value otherwise.
func (o *V2SkyblockNewsGet429Response) GetThrottle() bool {
	if o == nil || IsNil(o.Throttle) {
		var ret bool
		return ret
	}
	return *o.Throttle
}

// GetThrottleOk returns a tuple with the Throttle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2SkyblockNewsGet429Response) GetThrottleOk() (*bool, bool) {
	if o == nil || IsNil(o.Throttle) {
		return nil, false
	}
	return o.Throttle, true
}

// HasThrottle returns a boolean if a field has been set.
func (o *V2SkyblockNewsGet429Response) HasThrottle() bool {
	if o != nil && !IsNil(o.Throttle) {
		return true
	}

	return false
}

// SetThrottle gets a reference to the given bool and assigns it to the Throttle field.
func (o *V2SkyblockNewsGet429Response) SetThrottle(v bool) {
	o.Throttle = &v
}

func (o V2SkyblockNewsGet429Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2SkyblockNewsGet429Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Throttle) {
		toSerialize["throttle"] = o.Throttle
	}
	return toSerialize, nil
}

type NullableV2SkyblockNewsGet429Response struct {
	value *V2SkyblockNewsGet429Response
	isSet bool
}

func (v NullableV2SkyblockNewsGet429Response) Get() *V2SkyblockNewsGet429Response {
	return v.value
}

func (v *NullableV2SkyblockNewsGet429Response) Set(val *V2SkyblockNewsGet429Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV2SkyblockNewsGet429Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV2SkyblockNewsGet429Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2SkyblockNewsGet429Response(val *V2SkyblockNewsGet429Response) *NullableV2SkyblockNewsGet429Response {
	return &NullableV2SkyblockNewsGet429Response{value: val, isSet: true}
}

func (v NullableV2SkyblockNewsGet429Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2SkyblockNewsGet429Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
