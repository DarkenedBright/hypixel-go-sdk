/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberRiftSlayerQuestType the model 'SkyBlockProfileMemberRiftSlayerQuestType'
type SkyBlockProfileMemberRiftSlayerQuestType string

// List of SkyBlockProfileMemberRiftSlayerQuest_type
const (
	SKYBLOCKPROFILEMEMBERRIFTSLAYERQUESTTYPE_VAMPIRE SkyBlockProfileMemberRiftSlayerQuestType = "vampire"
)

// All allowed values of SkyBlockProfileMemberRiftSlayerQuestType enum
var AllowedSkyBlockProfileMemberRiftSlayerQuestTypeEnumValues = []SkyBlockProfileMemberRiftSlayerQuestType{
	"vampire",
}

func (v *SkyBlockProfileMemberRiftSlayerQuestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberRiftSlayerQuestType(value)
	for _, existing := range AllowedSkyBlockProfileMemberRiftSlayerQuestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberRiftSlayerQuestType", value)
}

// NewSkyBlockProfileMemberRiftSlayerQuestTypeFromValue returns a pointer to a valid SkyBlockProfileMemberRiftSlayerQuestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberRiftSlayerQuestTypeFromValue(v string) (*SkyBlockProfileMemberRiftSlayerQuestType, error) {
	ev := SkyBlockProfileMemberRiftSlayerQuestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberRiftSlayerQuestType: valid values are %v", v, AllowedSkyBlockProfileMemberRiftSlayerQuestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberRiftSlayerQuestType) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberRiftSlayerQuestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberRiftSlayerQuest_type value
func (v SkyBlockProfileMemberRiftSlayerQuestType) Ptr() *SkyBlockProfileMemberRiftSlayerQuestType {
	return &v
}

type NullableSkyBlockProfileMemberRiftSlayerQuestType struct {
	value *SkyBlockProfileMemberRiftSlayerQuestType
	isSet bool
}

func (v NullableSkyBlockProfileMemberRiftSlayerQuestType) Get() *SkyBlockProfileMemberRiftSlayerQuestType {
	return v.value
}

func (v *NullableSkyBlockProfileMemberRiftSlayerQuestType) Set(val *SkyBlockProfileMemberRiftSlayerQuestType) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberRiftSlayerQuestType) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberRiftSlayerQuestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberRiftSlayerQuestType(val *SkyBlockProfileMemberRiftSlayerQuestType) *NullableSkyBlockProfileMemberRiftSlayerQuestType {
	return &NullableSkyBlockProfileMemberRiftSlayerQuestType{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberRiftSlayerQuestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberRiftSlayerQuestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
