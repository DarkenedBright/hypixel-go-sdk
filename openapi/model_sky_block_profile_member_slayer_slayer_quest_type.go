/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberSlayerSlayerQuestType the model 'SkyBlockProfileMemberSlayerSlayerQuestType'
type SkyBlockProfileMemberSlayerSlayerQuestType string

// List of SkyBlockProfileMemberSlayerSlayerQuest_type
const (
	SKYBLOCKPROFILEMEMBERSLAYERSLAYERQUESTTYPE_BLAZE    SkyBlockProfileMemberSlayerSlayerQuestType = "blaze"
	SKYBLOCKPROFILEMEMBERSLAYERSLAYERQUESTTYPE_ENDERMAN SkyBlockProfileMemberSlayerSlayerQuestType = "enderman"
	SKYBLOCKPROFILEMEMBERSLAYERSLAYERQUESTTYPE_SPIDER   SkyBlockProfileMemberSlayerSlayerQuestType = "spider"
	SKYBLOCKPROFILEMEMBERSLAYERSLAYERQUESTTYPE_VAMPIRE  SkyBlockProfileMemberSlayerSlayerQuestType = "vampire"
	SKYBLOCKPROFILEMEMBERSLAYERSLAYERQUESTTYPE_WOLF     SkyBlockProfileMemberSlayerSlayerQuestType = "wolf"
	SKYBLOCKPROFILEMEMBERSLAYERSLAYERQUESTTYPE_ZOMBIE   SkyBlockProfileMemberSlayerSlayerQuestType = "zombie"
)

// All allowed values of SkyBlockProfileMemberSlayerSlayerQuestType enum
var AllowedSkyBlockProfileMemberSlayerSlayerQuestTypeEnumValues = []SkyBlockProfileMemberSlayerSlayerQuestType{
	"blaze",
	"enderman",
	"spider",
	"vampire",
	"wolf",
	"zombie",
}

func (v *SkyBlockProfileMemberSlayerSlayerQuestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberSlayerSlayerQuestType(value)
	for _, existing := range AllowedSkyBlockProfileMemberSlayerSlayerQuestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberSlayerSlayerQuestType", value)
}

// NewSkyBlockProfileMemberSlayerSlayerQuestTypeFromValue returns a pointer to a valid SkyBlockProfileMemberSlayerSlayerQuestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberSlayerSlayerQuestTypeFromValue(v string) (*SkyBlockProfileMemberSlayerSlayerQuestType, error) {
	ev := SkyBlockProfileMemberSlayerSlayerQuestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberSlayerSlayerQuestType: valid values are %v", v, AllowedSkyBlockProfileMemberSlayerSlayerQuestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberSlayerSlayerQuestType) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberSlayerSlayerQuestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberSlayerSlayerQuest_type value
func (v SkyBlockProfileMemberSlayerSlayerQuestType) Ptr() *SkyBlockProfileMemberSlayerSlayerQuestType {
	return &v
}

type NullableSkyBlockProfileMemberSlayerSlayerQuestType struct {
	value *SkyBlockProfileMemberSlayerSlayerQuestType
	isSet bool
}

func (v NullableSkyBlockProfileMemberSlayerSlayerQuestType) Get() *SkyBlockProfileMemberSlayerSlayerQuestType {
	return v.value
}

func (v *NullableSkyBlockProfileMemberSlayerSlayerQuestType) Set(val *SkyBlockProfileMemberSlayerSlayerQuestType) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberSlayerSlayerQuestType) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberSlayerSlayerQuestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberSlayerSlayerQuestType(val *SkyBlockProfileMemberSlayerSlayerQuestType) *NullableSkyBlockProfileMemberSlayerSlayerQuestType {
	return &NullableSkyBlockProfileMemberSlayerSlayerQuestType{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberSlayerSlayerQuestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberSlayerSlayerQuestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
