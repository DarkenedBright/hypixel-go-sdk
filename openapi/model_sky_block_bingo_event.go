/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockBingoEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockBingoEvent{}

// SkyBlockBingoEvent struct for SkyBlockBingoEvent
type SkyBlockBingoEvent struct {
	CompletedGoals []SkyBlockBingoEventCompletedGoalsInner `json:"completed_goals"`
	Key            int64                                   `json:"key"`
	Points         int64                                   `json:"points"`
}

type _SkyBlockBingoEvent SkyBlockBingoEvent

// NewSkyBlockBingoEvent instantiates a new SkyBlockBingoEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockBingoEvent(completedGoals []SkyBlockBingoEventCompletedGoalsInner, key int64, points int64) *SkyBlockBingoEvent {
	this := SkyBlockBingoEvent{}
	this.CompletedGoals = completedGoals
	this.Key = key
	this.Points = points
	return &this
}

// NewSkyBlockBingoEventWithDefaults instantiates a new SkyBlockBingoEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockBingoEventWithDefaults() *SkyBlockBingoEvent {
	this := SkyBlockBingoEvent{}
	return &this
}

// GetCompletedGoals returns the CompletedGoals field value
func (o *SkyBlockBingoEvent) GetCompletedGoals() []SkyBlockBingoEventCompletedGoalsInner {
	if o == nil {
		var ret []SkyBlockBingoEventCompletedGoalsInner
		return ret
	}

	return o.CompletedGoals
}

// GetCompletedGoalsOk returns a tuple with the CompletedGoals field value
// and a boolean to check if the value has been set.
func (o *SkyBlockBingoEvent) GetCompletedGoalsOk() ([]SkyBlockBingoEventCompletedGoalsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedGoals, true
}

// SetCompletedGoals sets field value
func (o *SkyBlockBingoEvent) SetCompletedGoals(v []SkyBlockBingoEventCompletedGoalsInner) {
	o.CompletedGoals = v
}

// GetKey returns the Key field value
func (o *SkyBlockBingoEvent) GetKey() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *SkyBlockBingoEvent) GetKeyOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *SkyBlockBingoEvent) SetKey(v int64) {
	o.Key = v
}

// GetPoints returns the Points field value
func (o *SkyBlockBingoEvent) GetPoints() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Points
}

// GetPointsOk returns a tuple with the Points field value
// and a boolean to check if the value has been set.
func (o *SkyBlockBingoEvent) GetPointsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Points, true
}

// SetPoints sets field value
func (o *SkyBlockBingoEvent) SetPoints(v int64) {
	o.Points = v
}

func (o SkyBlockBingoEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockBingoEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["completed_goals"] = o.CompletedGoals
	toSerialize["key"] = o.Key
	toSerialize["points"] = o.Points
	return toSerialize, nil
}

func (o *SkyBlockBingoEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"completed_goals",
		"key",
		"points",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockBingoEvent := _SkyBlockBingoEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockBingoEvent)

	if err != nil {
		return err
	}

	*o = SkyBlockBingoEvent(varSkyBlockBingoEvent)

	return err
}

type NullableSkyBlockBingoEvent struct {
	value *SkyBlockBingoEvent
	isSet bool
}

func (v NullableSkyBlockBingoEvent) Get() *SkyBlockBingoEvent {
	return v.value
}

func (v *NullableSkyBlockBingoEvent) Set(val *SkyBlockBingoEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockBingoEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockBingoEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockBingoEvent(val *SkyBlockBingoEvent) *NullableSkyBlockBingoEvent {
	return &NullableSkyBlockBingoEvent{value: val, isSet: true}
}

func (v NullableSkyBlockBingoEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockBingoEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
