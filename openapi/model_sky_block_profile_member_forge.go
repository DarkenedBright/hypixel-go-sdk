/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberForge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberForge{}

// SkyBlockProfileMemberForge struct for SkyBlockProfileMemberForge
type SkyBlockProfileMemberForge struct {
	ForgeProcesses *map[string]map[string]SkyBlockProfileMemberForgeProcessesProcessSlot `json:"forge_processes,omitempty"`
}

// NewSkyBlockProfileMemberForge instantiates a new SkyBlockProfileMemberForge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberForge() *SkyBlockProfileMemberForge {
	this := SkyBlockProfileMemberForge{}
	return &this
}

// NewSkyBlockProfileMemberForgeWithDefaults instantiates a new SkyBlockProfileMemberForge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberForgeWithDefaults() *SkyBlockProfileMemberForge {
	this := SkyBlockProfileMemberForge{}
	return &this
}

// GetForgeProcesses returns the ForgeProcesses field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberForge) GetForgeProcesses() map[string]map[string]SkyBlockProfileMemberForgeProcessesProcessSlot {
	if o == nil || IsNil(o.ForgeProcesses) {
		var ret map[string]map[string]SkyBlockProfileMemberForgeProcessesProcessSlot
		return ret
	}
	return *o.ForgeProcesses
}

// GetForgeProcessesOk returns a tuple with the ForgeProcesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberForge) GetForgeProcessesOk() (*map[string]map[string]SkyBlockProfileMemberForgeProcessesProcessSlot, bool) {
	if o == nil || IsNil(o.ForgeProcesses) {
		return nil, false
	}
	return o.ForgeProcesses, true
}

// HasForgeProcesses returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberForge) HasForgeProcesses() bool {
	if o != nil && !IsNil(o.ForgeProcesses) {
		return true
	}

	return false
}

// SetForgeProcesses gets a reference to the given map[string]map[string]SkyBlockProfileMemberForgeProcessesProcessSlot and assigns it to the ForgeProcesses field.
func (o *SkyBlockProfileMemberForge) SetForgeProcesses(v map[string]map[string]SkyBlockProfileMemberForgeProcessesProcessSlot) {
	o.ForgeProcesses = &v
}

func (o SkyBlockProfileMemberForge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberForge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForgeProcesses) {
		toSerialize["forge_processes"] = o.ForgeProcesses
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberForge struct {
	value *SkyBlockProfileMemberForge
	isSet bool
}

func (v NullableSkyBlockProfileMemberForge) Get() *SkyBlockProfileMemberForge {
	return v.value
}

func (v *NullableSkyBlockProfileMemberForge) Set(val *SkyBlockProfileMemberForge) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberForge) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberForge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberForge(val *SkyBlockProfileMemberForge) *NullableSkyBlockProfileMemberForge {
	return &NullableSkyBlockProfileMemberForge{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberForge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberForge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
