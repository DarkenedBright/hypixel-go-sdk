/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberDungeons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberDungeons{}

// SkyBlockProfileMemberDungeons struct for SkyBlockProfileMemberDungeons
type SkyBlockProfileMemberDungeons struct {
	DailyRuns              *SkyBlockProfileMemberDungeonsDailyRuns                     `json:"daily_runs,omitempty"`
	DungeonHubRaceSettings *SkyBlockProfileMemberDungeonsDungeonHubRaceSettings        `json:"dungeon_hub_race_settings,omitempty"`
	DungeonJournal         *SkyBlockProfileMemberDungeonsDungeonJournal                `json:"dungeon_journal,omitempty"`
	DungeonTypes           *map[string]SkyBlockProfileMemberDungeonsDungeonTypesType   `json:"dungeon_types,omitempty"`
	DungeonsBlahBlah       []string                                                    `json:"dungeons_blah_blah,omitempty"`
	LastDungeonRun         *string                                                     `json:"last_dungeon_run,omitempty"`
	PlayerClasses          *map[string]SkyBlockProfileMemberDungeonsPlayerClassesValue `json:"player_classes,omitempty"`
	Secrets                *int64                                                      `json:"secrets,omitempty"`
	SelectedDungeonClass   *string                                                     `json:"selected_dungeon_class,omitempty"`
	Treasures              *SkyBlockProfileMemberDungeonsTreasures                     `json:"treasures,omitempty"`
}

// NewSkyBlockProfileMemberDungeons instantiates a new SkyBlockProfileMemberDungeons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberDungeons() *SkyBlockProfileMemberDungeons {
	this := SkyBlockProfileMemberDungeons{}
	return &this
}

// NewSkyBlockProfileMemberDungeonsWithDefaults instantiates a new SkyBlockProfileMemberDungeons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberDungeonsWithDefaults() *SkyBlockProfileMemberDungeons {
	this := SkyBlockProfileMemberDungeons{}
	return &this
}

// GetDailyRuns returns the DailyRuns field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetDailyRuns() SkyBlockProfileMemberDungeonsDailyRuns {
	if o == nil || IsNil(o.DailyRuns) {
		var ret SkyBlockProfileMemberDungeonsDailyRuns
		return ret
	}
	return *o.DailyRuns
}

// GetDailyRunsOk returns a tuple with the DailyRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetDailyRunsOk() (*SkyBlockProfileMemberDungeonsDailyRuns, bool) {
	if o == nil || IsNil(o.DailyRuns) {
		return nil, false
	}
	return o.DailyRuns, true
}

// HasDailyRuns returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasDailyRuns() bool {
	if o != nil && !IsNil(o.DailyRuns) {
		return true
	}

	return false
}

// SetDailyRuns gets a reference to the given SkyBlockProfileMemberDungeonsDailyRuns and assigns it to the DailyRuns field.
func (o *SkyBlockProfileMemberDungeons) SetDailyRuns(v SkyBlockProfileMemberDungeonsDailyRuns) {
	o.DailyRuns = &v
}

// GetDungeonHubRaceSettings returns the DungeonHubRaceSettings field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetDungeonHubRaceSettings() SkyBlockProfileMemberDungeonsDungeonHubRaceSettings {
	if o == nil || IsNil(o.DungeonHubRaceSettings) {
		var ret SkyBlockProfileMemberDungeonsDungeonHubRaceSettings
		return ret
	}
	return *o.DungeonHubRaceSettings
}

// GetDungeonHubRaceSettingsOk returns a tuple with the DungeonHubRaceSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetDungeonHubRaceSettingsOk() (*SkyBlockProfileMemberDungeonsDungeonHubRaceSettings, bool) {
	if o == nil || IsNil(o.DungeonHubRaceSettings) {
		return nil, false
	}
	return o.DungeonHubRaceSettings, true
}

// HasDungeonHubRaceSettings returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasDungeonHubRaceSettings() bool {
	if o != nil && !IsNil(o.DungeonHubRaceSettings) {
		return true
	}

	return false
}

// SetDungeonHubRaceSettings gets a reference to the given SkyBlockProfileMemberDungeonsDungeonHubRaceSettings and assigns it to the DungeonHubRaceSettings field.
func (o *SkyBlockProfileMemberDungeons) SetDungeonHubRaceSettings(v SkyBlockProfileMemberDungeonsDungeonHubRaceSettings) {
	o.DungeonHubRaceSettings = &v
}

// GetDungeonJournal returns the DungeonJournal field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetDungeonJournal() SkyBlockProfileMemberDungeonsDungeonJournal {
	if o == nil || IsNil(o.DungeonJournal) {
		var ret SkyBlockProfileMemberDungeonsDungeonJournal
		return ret
	}
	return *o.DungeonJournal
}

// GetDungeonJournalOk returns a tuple with the DungeonJournal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetDungeonJournalOk() (*SkyBlockProfileMemberDungeonsDungeonJournal, bool) {
	if o == nil || IsNil(o.DungeonJournal) {
		return nil, false
	}
	return o.DungeonJournal, true
}

// HasDungeonJournal returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasDungeonJournal() bool {
	if o != nil && !IsNil(o.DungeonJournal) {
		return true
	}

	return false
}

// SetDungeonJournal gets a reference to the given SkyBlockProfileMemberDungeonsDungeonJournal and assigns it to the DungeonJournal field.
func (o *SkyBlockProfileMemberDungeons) SetDungeonJournal(v SkyBlockProfileMemberDungeonsDungeonJournal) {
	o.DungeonJournal = &v
}

// GetDungeonTypes returns the DungeonTypes field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetDungeonTypes() map[string]SkyBlockProfileMemberDungeonsDungeonTypesType {
	if o == nil || IsNil(o.DungeonTypes) {
		var ret map[string]SkyBlockProfileMemberDungeonsDungeonTypesType
		return ret
	}
	return *o.DungeonTypes
}

// GetDungeonTypesOk returns a tuple with the DungeonTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetDungeonTypesOk() (*map[string]SkyBlockProfileMemberDungeonsDungeonTypesType, bool) {
	if o == nil || IsNil(o.DungeonTypes) {
		return nil, false
	}
	return o.DungeonTypes, true
}

// HasDungeonTypes returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasDungeonTypes() bool {
	if o != nil && !IsNil(o.DungeonTypes) {
		return true
	}

	return false
}

// SetDungeonTypes gets a reference to the given map[string]SkyBlockProfileMemberDungeonsDungeonTypesType and assigns it to the DungeonTypes field.
func (o *SkyBlockProfileMemberDungeons) SetDungeonTypes(v map[string]SkyBlockProfileMemberDungeonsDungeonTypesType) {
	o.DungeonTypes = &v
}

// GetDungeonsBlahBlah returns the DungeonsBlahBlah field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetDungeonsBlahBlah() []string {
	if o == nil || IsNil(o.DungeonsBlahBlah) {
		var ret []string
		return ret
	}
	return o.DungeonsBlahBlah
}

// GetDungeonsBlahBlahOk returns a tuple with the DungeonsBlahBlah field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetDungeonsBlahBlahOk() ([]string, bool) {
	if o == nil || IsNil(o.DungeonsBlahBlah) {
		return nil, false
	}
	return o.DungeonsBlahBlah, true
}

// HasDungeonsBlahBlah returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasDungeonsBlahBlah() bool {
	if o != nil && !IsNil(o.DungeonsBlahBlah) {
		return true
	}

	return false
}

// SetDungeonsBlahBlah gets a reference to the given []string and assigns it to the DungeonsBlahBlah field.
func (o *SkyBlockProfileMemberDungeons) SetDungeonsBlahBlah(v []string) {
	o.DungeonsBlahBlah = v
}

// GetLastDungeonRun returns the LastDungeonRun field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetLastDungeonRun() string {
	if o == nil || IsNil(o.LastDungeonRun) {
		var ret string
		return ret
	}
	return *o.LastDungeonRun
}

// GetLastDungeonRunOk returns a tuple with the LastDungeonRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetLastDungeonRunOk() (*string, bool) {
	if o == nil || IsNil(o.LastDungeonRun) {
		return nil, false
	}
	return o.LastDungeonRun, true
}

// HasLastDungeonRun returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasLastDungeonRun() bool {
	if o != nil && !IsNil(o.LastDungeonRun) {
		return true
	}

	return false
}

// SetLastDungeonRun gets a reference to the given string and assigns it to the LastDungeonRun field.
func (o *SkyBlockProfileMemberDungeons) SetLastDungeonRun(v string) {
	o.LastDungeonRun = &v
}

// GetPlayerClasses returns the PlayerClasses field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetPlayerClasses() map[string]SkyBlockProfileMemberDungeonsPlayerClassesValue {
	if o == nil || IsNil(o.PlayerClasses) {
		var ret map[string]SkyBlockProfileMemberDungeonsPlayerClassesValue
		return ret
	}
	return *o.PlayerClasses
}

// GetPlayerClassesOk returns a tuple with the PlayerClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetPlayerClassesOk() (*map[string]SkyBlockProfileMemberDungeonsPlayerClassesValue, bool) {
	if o == nil || IsNil(o.PlayerClasses) {
		return nil, false
	}
	return o.PlayerClasses, true
}

// HasPlayerClasses returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasPlayerClasses() bool {
	if o != nil && !IsNil(o.PlayerClasses) {
		return true
	}

	return false
}

// SetPlayerClasses gets a reference to the given map[string]SkyBlockProfileMemberDungeonsPlayerClassesValue and assigns it to the PlayerClasses field.
func (o *SkyBlockProfileMemberDungeons) SetPlayerClasses(v map[string]SkyBlockProfileMemberDungeonsPlayerClassesValue) {
	o.PlayerClasses = &v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetSecrets() int64 {
	if o == nil || IsNil(o.Secrets) {
		var ret int64
		return ret
	}
	return *o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetSecretsOk() (*int64, bool) {
	if o == nil || IsNil(o.Secrets) {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasSecrets() bool {
	if o != nil && !IsNil(o.Secrets) {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given int64 and assigns it to the Secrets field.
func (o *SkyBlockProfileMemberDungeons) SetSecrets(v int64) {
	o.Secrets = &v
}

// GetSelectedDungeonClass returns the SelectedDungeonClass field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetSelectedDungeonClass() string {
	if o == nil || IsNil(o.SelectedDungeonClass) {
		var ret string
		return ret
	}
	return *o.SelectedDungeonClass
}

// GetSelectedDungeonClassOk returns a tuple with the SelectedDungeonClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetSelectedDungeonClassOk() (*string, bool) {
	if o == nil || IsNil(o.SelectedDungeonClass) {
		return nil, false
	}
	return o.SelectedDungeonClass, true
}

// HasSelectedDungeonClass returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasSelectedDungeonClass() bool {
	if o != nil && !IsNil(o.SelectedDungeonClass) {
		return true
	}

	return false
}

// SetSelectedDungeonClass gets a reference to the given string and assigns it to the SelectedDungeonClass field.
func (o *SkyBlockProfileMemberDungeons) SetSelectedDungeonClass(v string) {
	o.SelectedDungeonClass = &v
}

// GetTreasures returns the Treasures field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberDungeons) GetTreasures() SkyBlockProfileMemberDungeonsTreasures {
	if o == nil || IsNil(o.Treasures) {
		var ret SkyBlockProfileMemberDungeonsTreasures
		return ret
	}
	return *o.Treasures
}

// GetTreasuresOk returns a tuple with the Treasures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberDungeons) GetTreasuresOk() (*SkyBlockProfileMemberDungeonsTreasures, bool) {
	if o == nil || IsNil(o.Treasures) {
		return nil, false
	}
	return o.Treasures, true
}

// HasTreasures returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberDungeons) HasTreasures() bool {
	if o != nil && !IsNil(o.Treasures) {
		return true
	}

	return false
}

// SetTreasures gets a reference to the given SkyBlockProfileMemberDungeonsTreasures and assigns it to the Treasures field.
func (o *SkyBlockProfileMemberDungeons) SetTreasures(v SkyBlockProfileMemberDungeonsTreasures) {
	o.Treasures = &v
}

func (o SkyBlockProfileMemberDungeons) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberDungeons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DailyRuns) {
		toSerialize["daily_runs"] = o.DailyRuns
	}
	if !IsNil(o.DungeonHubRaceSettings) {
		toSerialize["dungeon_hub_race_settings"] = o.DungeonHubRaceSettings
	}
	if !IsNil(o.DungeonJournal) {
		toSerialize["dungeon_journal"] = o.DungeonJournal
	}
	if !IsNil(o.DungeonTypes) {
		toSerialize["dungeon_types"] = o.DungeonTypes
	}
	if !IsNil(o.DungeonsBlahBlah) {
		toSerialize["dungeons_blah_blah"] = o.DungeonsBlahBlah
	}
	if !IsNil(o.LastDungeonRun) {
		toSerialize["last_dungeon_run"] = o.LastDungeonRun
	}
	if !IsNil(o.PlayerClasses) {
		toSerialize["player_classes"] = o.PlayerClasses
	}
	if !IsNil(o.Secrets) {
		toSerialize["secrets"] = o.Secrets
	}
	if !IsNil(o.SelectedDungeonClass) {
		toSerialize["selected_dungeon_class"] = o.SelectedDungeonClass
	}
	if !IsNil(o.Treasures) {
		toSerialize["treasures"] = o.Treasures
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberDungeons struct {
	value *SkyBlockProfileMemberDungeons
	isSet bool
}

func (v NullableSkyBlockProfileMemberDungeons) Get() *SkyBlockProfileMemberDungeons {
	return v.value
}

func (v *NullableSkyBlockProfileMemberDungeons) Set(val *SkyBlockProfileMemberDungeons) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberDungeons) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberDungeons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberDungeons(val *SkyBlockProfileMemberDungeons) *NullableSkyBlockProfileMemberDungeons {
	return &NullableSkyBlockProfileMemberDungeons{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberDungeons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberDungeons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
