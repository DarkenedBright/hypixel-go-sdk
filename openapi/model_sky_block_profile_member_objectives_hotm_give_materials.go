/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockProfileMemberObjectivesHotmGiveMaterials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberObjectivesHotmGiveMaterials{}

// SkyBlockProfileMemberObjectivesHotmGiveMaterials struct for SkyBlockProfileMemberObjectivesHotmGiveMaterials
type SkyBlockProfileMemberObjectivesHotmGiveMaterials struct {
	ENCHANTED_COAL         *int64                                               `json:"ENCHANTED_COAL,omitempty"`
	ENCHANTED_DIAMOND      *int64                                               `json:"ENCHANTED_DIAMOND,omitempty"`
	ENCHANTED_EMERALD      *int64                                               `json:"ENCHANTED_EMERALD,omitempty"`
	ENCHANTED_GOLD         *int64                                               `json:"ENCHANTED_GOLD,omitempty"`
	ENCHANTED_IRON         *int64                                               `json:"ENCHANTED_IRON,omitempty"`
	ENCHANTED_LAPIS_LAZULI *int64                                               `json:"ENCHANTED_LAPIS_LAZULI,omitempty"`
	ENCHANTED_REDSTONE     *int64                                               `json:"ENCHANTED_REDSTONE,omitempty"`
	AmountGiven            *int64                                               `json:"amount_given,omitempty"`
	CompletedAt            int64                                                `json:"completed_at"`
	Progress               int64                                                `json:"progress"`
	Started                bool                                                 `json:"started"`
	Status                 SkyBlockProfileMemberObjectivesCatchLaseasFishStatus `json:"status"`
}

type _SkyBlockProfileMemberObjectivesHotmGiveMaterials SkyBlockProfileMemberObjectivesHotmGiveMaterials

// NewSkyBlockProfileMemberObjectivesHotmGiveMaterials instantiates a new SkyBlockProfileMemberObjectivesHotmGiveMaterials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberObjectivesHotmGiveMaterials(completedAt int64, progress int64, started bool, status SkyBlockProfileMemberObjectivesCatchLaseasFishStatus) *SkyBlockProfileMemberObjectivesHotmGiveMaterials {
	this := SkyBlockProfileMemberObjectivesHotmGiveMaterials{}
	this.CompletedAt = completedAt
	this.Progress = progress
	this.Started = started
	this.Status = status
	return &this
}

// NewSkyBlockProfileMemberObjectivesHotmGiveMaterialsWithDefaults instantiates a new SkyBlockProfileMemberObjectivesHotmGiveMaterials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberObjectivesHotmGiveMaterialsWithDefaults() *SkyBlockProfileMemberObjectivesHotmGiveMaterials {
	this := SkyBlockProfileMemberObjectivesHotmGiveMaterials{}
	return &this
}

// GetENCHANTED_COAL returns the ENCHANTED_COAL field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_COAL() int64 {
	if o == nil || IsNil(o.ENCHANTED_COAL) {
		var ret int64
		return ret
	}
	return *o.ENCHANTED_COAL
}

// GetENCHANTED_COALOk returns a tuple with the ENCHANTED_COAL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_COALOk() (*int64, bool) {
	if o == nil || IsNil(o.ENCHANTED_COAL) {
		return nil, false
	}
	return o.ENCHANTED_COAL, true
}

// HasENCHANTED_COAL returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) HasENCHANTED_COAL() bool {
	if o != nil && !IsNil(o.ENCHANTED_COAL) {
		return true
	}

	return false
}

// SetENCHANTED_COAL gets a reference to the given int64 and assigns it to the ENCHANTED_COAL field.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetENCHANTED_COAL(v int64) {
	o.ENCHANTED_COAL = &v
}

// GetENCHANTED_DIAMOND returns the ENCHANTED_DIAMOND field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_DIAMOND() int64 {
	if o == nil || IsNil(o.ENCHANTED_DIAMOND) {
		var ret int64
		return ret
	}
	return *o.ENCHANTED_DIAMOND
}

// GetENCHANTED_DIAMONDOk returns a tuple with the ENCHANTED_DIAMOND field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_DIAMONDOk() (*int64, bool) {
	if o == nil || IsNil(o.ENCHANTED_DIAMOND) {
		return nil, false
	}
	return o.ENCHANTED_DIAMOND, true
}

// HasENCHANTED_DIAMOND returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) HasENCHANTED_DIAMOND() bool {
	if o != nil && !IsNil(o.ENCHANTED_DIAMOND) {
		return true
	}

	return false
}

// SetENCHANTED_DIAMOND gets a reference to the given int64 and assigns it to the ENCHANTED_DIAMOND field.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetENCHANTED_DIAMOND(v int64) {
	o.ENCHANTED_DIAMOND = &v
}

// GetENCHANTED_EMERALD returns the ENCHANTED_EMERALD field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_EMERALD() int64 {
	if o == nil || IsNil(o.ENCHANTED_EMERALD) {
		var ret int64
		return ret
	}
	return *o.ENCHANTED_EMERALD
}

// GetENCHANTED_EMERALDOk returns a tuple with the ENCHANTED_EMERALD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_EMERALDOk() (*int64, bool) {
	if o == nil || IsNil(o.ENCHANTED_EMERALD) {
		return nil, false
	}
	return o.ENCHANTED_EMERALD, true
}

// HasENCHANTED_EMERALD returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) HasENCHANTED_EMERALD() bool {
	if o != nil && !IsNil(o.ENCHANTED_EMERALD) {
		return true
	}

	return false
}

// SetENCHANTED_EMERALD gets a reference to the given int64 and assigns it to the ENCHANTED_EMERALD field.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetENCHANTED_EMERALD(v int64) {
	o.ENCHANTED_EMERALD = &v
}

// GetENCHANTED_GOLD returns the ENCHANTED_GOLD field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_GOLD() int64 {
	if o == nil || IsNil(o.ENCHANTED_GOLD) {
		var ret int64
		return ret
	}
	return *o.ENCHANTED_GOLD
}

// GetENCHANTED_GOLDOk returns a tuple with the ENCHANTED_GOLD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_GOLDOk() (*int64, bool) {
	if o == nil || IsNil(o.ENCHANTED_GOLD) {
		return nil, false
	}
	return o.ENCHANTED_GOLD, true
}

// HasENCHANTED_GOLD returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) HasENCHANTED_GOLD() bool {
	if o != nil && !IsNil(o.ENCHANTED_GOLD) {
		return true
	}

	return false
}

// SetENCHANTED_GOLD gets a reference to the given int64 and assigns it to the ENCHANTED_GOLD field.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetENCHANTED_GOLD(v int64) {
	o.ENCHANTED_GOLD = &v
}

// GetENCHANTED_IRON returns the ENCHANTED_IRON field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_IRON() int64 {
	if o == nil || IsNil(o.ENCHANTED_IRON) {
		var ret int64
		return ret
	}
	return *o.ENCHANTED_IRON
}

// GetENCHANTED_IRONOk returns a tuple with the ENCHANTED_IRON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_IRONOk() (*int64, bool) {
	if o == nil || IsNil(o.ENCHANTED_IRON) {
		return nil, false
	}
	return o.ENCHANTED_IRON, true
}

// HasENCHANTED_IRON returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) HasENCHANTED_IRON() bool {
	if o != nil && !IsNil(o.ENCHANTED_IRON) {
		return true
	}

	return false
}

// SetENCHANTED_IRON gets a reference to the given int64 and assigns it to the ENCHANTED_IRON field.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetENCHANTED_IRON(v int64) {
	o.ENCHANTED_IRON = &v
}

// GetENCHANTED_LAPIS_LAZULI returns the ENCHANTED_LAPIS_LAZULI field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_LAPIS_LAZULI() int64 {
	if o == nil || IsNil(o.ENCHANTED_LAPIS_LAZULI) {
		var ret int64
		return ret
	}
	return *o.ENCHANTED_LAPIS_LAZULI
}

// GetENCHANTED_LAPIS_LAZULIOk returns a tuple with the ENCHANTED_LAPIS_LAZULI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_LAPIS_LAZULIOk() (*int64, bool) {
	if o == nil || IsNil(o.ENCHANTED_LAPIS_LAZULI) {
		return nil, false
	}
	return o.ENCHANTED_LAPIS_LAZULI, true
}

// HasENCHANTED_LAPIS_LAZULI returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) HasENCHANTED_LAPIS_LAZULI() bool {
	if o != nil && !IsNil(o.ENCHANTED_LAPIS_LAZULI) {
		return true
	}

	return false
}

// SetENCHANTED_LAPIS_LAZULI gets a reference to the given int64 and assigns it to the ENCHANTED_LAPIS_LAZULI field.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetENCHANTED_LAPIS_LAZULI(v int64) {
	o.ENCHANTED_LAPIS_LAZULI = &v
}

// GetENCHANTED_REDSTONE returns the ENCHANTED_REDSTONE field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_REDSTONE() int64 {
	if o == nil || IsNil(o.ENCHANTED_REDSTONE) {
		var ret int64
		return ret
	}
	return *o.ENCHANTED_REDSTONE
}

// GetENCHANTED_REDSTONEOk returns a tuple with the ENCHANTED_REDSTONE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetENCHANTED_REDSTONEOk() (*int64, bool) {
	if o == nil || IsNil(o.ENCHANTED_REDSTONE) {
		return nil, false
	}
	return o.ENCHANTED_REDSTONE, true
}

// HasENCHANTED_REDSTONE returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) HasENCHANTED_REDSTONE() bool {
	if o != nil && !IsNil(o.ENCHANTED_REDSTONE) {
		return true
	}

	return false
}

// SetENCHANTED_REDSTONE gets a reference to the given int64 and assigns it to the ENCHANTED_REDSTONE field.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetENCHANTED_REDSTONE(v int64) {
	o.ENCHANTED_REDSTONE = &v
}

// GetAmountGiven returns the AmountGiven field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetAmountGiven() int64 {
	if o == nil || IsNil(o.AmountGiven) {
		var ret int64
		return ret
	}
	return *o.AmountGiven
}

// GetAmountGivenOk returns a tuple with the AmountGiven field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetAmountGivenOk() (*int64, bool) {
	if o == nil || IsNil(o.AmountGiven) {
		return nil, false
	}
	return o.AmountGiven, true
}

// HasAmountGiven returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) HasAmountGiven() bool {
	if o != nil && !IsNil(o.AmountGiven) {
		return true
	}

	return false
}

// SetAmountGiven gets a reference to the given int64 and assigns it to the AmountGiven field.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetAmountGiven(v int64) {
	o.AmountGiven = &v
}

// GetCompletedAt returns the CompletedAt field value
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetCompletedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetCompletedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletedAt, true
}

// SetCompletedAt sets field value
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetCompletedAt(v int64) {
	o.CompletedAt = v
}

// GetProgress returns the Progress field value
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetProgress() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Progress
}

// GetProgressOk returns a tuple with the Progress field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetProgressOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Progress, true
}

// SetProgress sets field value
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetProgress(v int64) {
	o.Progress = v
}

// GetStarted returns the Started field value
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetStarted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Started
}

// GetStartedOk returns a tuple with the Started field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetStartedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Started, true
}

// SetStarted sets field value
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetStarted(v bool) {
	o.Started = v
}

// GetStatus returns the Status field value
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetStatus() SkyBlockProfileMemberObjectivesCatchLaseasFishStatus {
	if o == nil {
		var ret SkyBlockProfileMemberObjectivesCatchLaseasFishStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) GetStatusOk() (*SkyBlockProfileMemberObjectivesCatchLaseasFishStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) SetStatus(v SkyBlockProfileMemberObjectivesCatchLaseasFishStatus) {
	o.Status = v
}

func (o SkyBlockProfileMemberObjectivesHotmGiveMaterials) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberObjectivesHotmGiveMaterials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ENCHANTED_COAL) {
		toSerialize["ENCHANTED_COAL"] = o.ENCHANTED_COAL
	}
	if !IsNil(o.ENCHANTED_DIAMOND) {
		toSerialize["ENCHANTED_DIAMOND"] = o.ENCHANTED_DIAMOND
	}
	if !IsNil(o.ENCHANTED_EMERALD) {
		toSerialize["ENCHANTED_EMERALD"] = o.ENCHANTED_EMERALD
	}
	if !IsNil(o.ENCHANTED_GOLD) {
		toSerialize["ENCHANTED_GOLD"] = o.ENCHANTED_GOLD
	}
	if !IsNil(o.ENCHANTED_IRON) {
		toSerialize["ENCHANTED_IRON"] = o.ENCHANTED_IRON
	}
	if !IsNil(o.ENCHANTED_LAPIS_LAZULI) {
		toSerialize["ENCHANTED_LAPIS_LAZULI"] = o.ENCHANTED_LAPIS_LAZULI
	}
	if !IsNil(o.ENCHANTED_REDSTONE) {
		toSerialize["ENCHANTED_REDSTONE"] = o.ENCHANTED_REDSTONE
	}
	if !IsNil(o.AmountGiven) {
		toSerialize["amount_given"] = o.AmountGiven
	}
	toSerialize["completed_at"] = o.CompletedAt
	toSerialize["progress"] = o.Progress
	toSerialize["started"] = o.Started
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *SkyBlockProfileMemberObjectivesHotmGiveMaterials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"completed_at",
		"progress",
		"started",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockProfileMemberObjectivesHotmGiveMaterials := _SkyBlockProfileMemberObjectivesHotmGiveMaterials{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockProfileMemberObjectivesHotmGiveMaterials)

	if err != nil {
		return err
	}

	*o = SkyBlockProfileMemberObjectivesHotmGiveMaterials(varSkyBlockProfileMemberObjectivesHotmGiveMaterials)

	return err
}

type NullableSkyBlockProfileMemberObjectivesHotmGiveMaterials struct {
	value *SkyBlockProfileMemberObjectivesHotmGiveMaterials
	isSet bool
}

func (v NullableSkyBlockProfileMemberObjectivesHotmGiveMaterials) Get() *SkyBlockProfileMemberObjectivesHotmGiveMaterials {
	return v.value
}

func (v *NullableSkyBlockProfileMemberObjectivesHotmGiveMaterials) Set(val *SkyBlockProfileMemberObjectivesHotmGiveMaterials) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberObjectivesHotmGiveMaterials) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberObjectivesHotmGiveMaterials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberObjectivesHotmGiveMaterials(val *SkyBlockProfileMemberObjectivesHotmGiveMaterials) *NullableSkyBlockProfileMemberObjectivesHotmGiveMaterials {
	return &NullableSkyBlockProfileMemberObjectivesHotmGiveMaterials{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberObjectivesHotmGiveMaterials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberObjectivesHotmGiveMaterials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
