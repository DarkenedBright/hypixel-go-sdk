/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockProfileMemberMiningCoreBiomes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberMiningCoreBiomes{}

// SkyBlockProfileMemberMiningCoreBiomes struct for SkyBlockProfileMemberMiningCoreBiomes
type SkyBlockProfileMemberMiningCoreBiomes struct {
	Dwarven   map[string]interface{}                         `json:"dwarven"`
	Goblin    SkyBlockProfileMemberMiningCoreBiomesGoblin    `json:"goblin"`
	Jungle    SkyBlockProfileMemberMiningCoreBiomesJungle    `json:"jungle"`
	Precursor SkyBlockProfileMemberMiningCoreBiomesPrecursor `json:"precursor"`
}

type _SkyBlockProfileMemberMiningCoreBiomes SkyBlockProfileMemberMiningCoreBiomes

// NewSkyBlockProfileMemberMiningCoreBiomes instantiates a new SkyBlockProfileMemberMiningCoreBiomes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberMiningCoreBiomes(dwarven map[string]interface{}, goblin SkyBlockProfileMemberMiningCoreBiomesGoblin, jungle SkyBlockProfileMemberMiningCoreBiomesJungle, precursor SkyBlockProfileMemberMiningCoreBiomesPrecursor) *SkyBlockProfileMemberMiningCoreBiomes {
	this := SkyBlockProfileMemberMiningCoreBiomes{}
	this.Dwarven = dwarven
	this.Goblin = goblin
	this.Jungle = jungle
	this.Precursor = precursor
	return &this
}

// NewSkyBlockProfileMemberMiningCoreBiomesWithDefaults instantiates a new SkyBlockProfileMemberMiningCoreBiomes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberMiningCoreBiomesWithDefaults() *SkyBlockProfileMemberMiningCoreBiomes {
	this := SkyBlockProfileMemberMiningCoreBiomes{}
	return &this
}

// GetDwarven returns the Dwarven field value
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetDwarven() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Dwarven
}

// GetDwarvenOk returns a tuple with the Dwarven field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetDwarvenOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Dwarven, true
}

// SetDwarven sets field value
func (o *SkyBlockProfileMemberMiningCoreBiomes) SetDwarven(v map[string]interface{}) {
	o.Dwarven = v
}

// GetGoblin returns the Goblin field value
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetGoblin() SkyBlockProfileMemberMiningCoreBiomesGoblin {
	if o == nil {
		var ret SkyBlockProfileMemberMiningCoreBiomesGoblin
		return ret
	}

	return o.Goblin
}

// GetGoblinOk returns a tuple with the Goblin field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetGoblinOk() (*SkyBlockProfileMemberMiningCoreBiomesGoblin, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Goblin, true
}

// SetGoblin sets field value
func (o *SkyBlockProfileMemberMiningCoreBiomes) SetGoblin(v SkyBlockProfileMemberMiningCoreBiomesGoblin) {
	o.Goblin = v
}

// GetJungle returns the Jungle field value
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetJungle() SkyBlockProfileMemberMiningCoreBiomesJungle {
	if o == nil {
		var ret SkyBlockProfileMemberMiningCoreBiomesJungle
		return ret
	}

	return o.Jungle
}

// GetJungleOk returns a tuple with the Jungle field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetJungleOk() (*SkyBlockProfileMemberMiningCoreBiomesJungle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jungle, true
}

// SetJungle sets field value
func (o *SkyBlockProfileMemberMiningCoreBiomes) SetJungle(v SkyBlockProfileMemberMiningCoreBiomesJungle) {
	o.Jungle = v
}

// GetPrecursor returns the Precursor field value
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetPrecursor() SkyBlockProfileMemberMiningCoreBiomesPrecursor {
	if o == nil {
		var ret SkyBlockProfileMemberMiningCoreBiomesPrecursor
		return ret
	}

	return o.Precursor
}

// GetPrecursorOk returns a tuple with the Precursor field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetPrecursorOk() (*SkyBlockProfileMemberMiningCoreBiomesPrecursor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Precursor, true
}

// SetPrecursor sets field value
func (o *SkyBlockProfileMemberMiningCoreBiomes) SetPrecursor(v SkyBlockProfileMemberMiningCoreBiomesPrecursor) {
	o.Precursor = v
}

func (o SkyBlockProfileMemberMiningCoreBiomes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberMiningCoreBiomes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dwarven"] = o.Dwarven
	toSerialize["goblin"] = o.Goblin
	toSerialize["jungle"] = o.Jungle
	toSerialize["precursor"] = o.Precursor
	return toSerialize, nil
}

func (o *SkyBlockProfileMemberMiningCoreBiomes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dwarven",
		"goblin",
		"jungle",
		"precursor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockProfileMemberMiningCoreBiomes := _SkyBlockProfileMemberMiningCoreBiomes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockProfileMemberMiningCoreBiomes)

	if err != nil {
		return err
	}

	*o = SkyBlockProfileMemberMiningCoreBiomes(varSkyBlockProfileMemberMiningCoreBiomes)

	return err
}

type NullableSkyBlockProfileMemberMiningCoreBiomes struct {
	value *SkyBlockProfileMemberMiningCoreBiomes
	isSet bool
}

func (v NullableSkyBlockProfileMemberMiningCoreBiomes) Get() *SkyBlockProfileMemberMiningCoreBiomes {
	return v.value
}

func (v *NullableSkyBlockProfileMemberMiningCoreBiomes) Set(val *SkyBlockProfileMemberMiningCoreBiomes) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberMiningCoreBiomes) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberMiningCoreBiomes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberMiningCoreBiomes(val *SkyBlockProfileMemberMiningCoreBiomes) *NullableSkyBlockProfileMemberMiningCoreBiomes {
	return &NullableSkyBlockProfileMemberMiningCoreBiomes{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberMiningCoreBiomes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberMiningCoreBiomes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
