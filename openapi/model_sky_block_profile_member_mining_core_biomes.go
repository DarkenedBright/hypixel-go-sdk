/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberMiningCoreBiomes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberMiningCoreBiomes{}

// SkyBlockProfileMemberMiningCoreBiomes struct for SkyBlockProfileMemberMiningCoreBiomes
type SkyBlockProfileMemberMiningCoreBiomes struct {
	Dwarven   map[string]interface{}                          `json:"dwarven,omitempty"`
	Goblin    *SkyBlockProfileMemberMiningCoreBiomesGoblin    `json:"goblin,omitempty"`
	Jungle    *SkyBlockProfileMemberMiningCoreBiomesJungle    `json:"jungle,omitempty"`
	Precursor *SkyBlockProfileMemberMiningCoreBiomesPrecursor `json:"precursor,omitempty"`
}

// NewSkyBlockProfileMemberMiningCoreBiomes instantiates a new SkyBlockProfileMemberMiningCoreBiomes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberMiningCoreBiomes() *SkyBlockProfileMemberMiningCoreBiomes {
	this := SkyBlockProfileMemberMiningCoreBiomes{}
	return &this
}

// NewSkyBlockProfileMemberMiningCoreBiomesWithDefaults instantiates a new SkyBlockProfileMemberMiningCoreBiomes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberMiningCoreBiomesWithDefaults() *SkyBlockProfileMemberMiningCoreBiomes {
	this := SkyBlockProfileMemberMiningCoreBiomes{}
	return &this
}

// GetDwarven returns the Dwarven field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetDwarven() map[string]interface{} {
	if o == nil || IsNil(o.Dwarven) {
		var ret map[string]interface{}
		return ret
	}
	return o.Dwarven
}

// GetDwarvenOk returns a tuple with the Dwarven field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetDwarvenOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Dwarven) {
		return map[string]interface{}{}, false
	}
	return o.Dwarven, true
}

// HasDwarven returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) HasDwarven() bool {
	if o != nil && !IsNil(o.Dwarven) {
		return true
	}

	return false
}

// SetDwarven gets a reference to the given map[string]interface{} and assigns it to the Dwarven field.
func (o *SkyBlockProfileMemberMiningCoreBiomes) SetDwarven(v map[string]interface{}) {
	o.Dwarven = v
}

// GetGoblin returns the Goblin field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetGoblin() SkyBlockProfileMemberMiningCoreBiomesGoblin {
	if o == nil || IsNil(o.Goblin) {
		var ret SkyBlockProfileMemberMiningCoreBiomesGoblin
		return ret
	}
	return *o.Goblin
}

// GetGoblinOk returns a tuple with the Goblin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetGoblinOk() (*SkyBlockProfileMemberMiningCoreBiomesGoblin, bool) {
	if o == nil || IsNil(o.Goblin) {
		return nil, false
	}
	return o.Goblin, true
}

// HasGoblin returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) HasGoblin() bool {
	if o != nil && !IsNil(o.Goblin) {
		return true
	}

	return false
}

// SetGoblin gets a reference to the given SkyBlockProfileMemberMiningCoreBiomesGoblin and assigns it to the Goblin field.
func (o *SkyBlockProfileMemberMiningCoreBiomes) SetGoblin(v SkyBlockProfileMemberMiningCoreBiomesGoblin) {
	o.Goblin = &v
}

// GetJungle returns the Jungle field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetJungle() SkyBlockProfileMemberMiningCoreBiomesJungle {
	if o == nil || IsNil(o.Jungle) {
		var ret SkyBlockProfileMemberMiningCoreBiomesJungle
		return ret
	}
	return *o.Jungle
}

// GetJungleOk returns a tuple with the Jungle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetJungleOk() (*SkyBlockProfileMemberMiningCoreBiomesJungle, bool) {
	if o == nil || IsNil(o.Jungle) {
		return nil, false
	}
	return o.Jungle, true
}

// HasJungle returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) HasJungle() bool {
	if o != nil && !IsNil(o.Jungle) {
		return true
	}

	return false
}

// SetJungle gets a reference to the given SkyBlockProfileMemberMiningCoreBiomesJungle and assigns it to the Jungle field.
func (o *SkyBlockProfileMemberMiningCoreBiomes) SetJungle(v SkyBlockProfileMemberMiningCoreBiomesJungle) {
	o.Jungle = &v
}

// GetPrecursor returns the Precursor field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetPrecursor() SkyBlockProfileMemberMiningCoreBiomesPrecursor {
	if o == nil || IsNil(o.Precursor) {
		var ret SkyBlockProfileMemberMiningCoreBiomesPrecursor
		return ret
	}
	return *o.Precursor
}

// GetPrecursorOk returns a tuple with the Precursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) GetPrecursorOk() (*SkyBlockProfileMemberMiningCoreBiomesPrecursor, bool) {
	if o == nil || IsNil(o.Precursor) {
		return nil, false
	}
	return o.Precursor, true
}

// HasPrecursor returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomes) HasPrecursor() bool {
	if o != nil && !IsNil(o.Precursor) {
		return true
	}

	return false
}

// SetPrecursor gets a reference to the given SkyBlockProfileMemberMiningCoreBiomesPrecursor and assigns it to the Precursor field.
func (o *SkyBlockProfileMemberMiningCoreBiomes) SetPrecursor(v SkyBlockProfileMemberMiningCoreBiomesPrecursor) {
	o.Precursor = &v
}

func (o SkyBlockProfileMemberMiningCoreBiomes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberMiningCoreBiomes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dwarven) {
		toSerialize["dwarven"] = o.Dwarven
	}
	if !IsNil(o.Goblin) {
		toSerialize["goblin"] = o.Goblin
	}
	if !IsNil(o.Jungle) {
		toSerialize["jungle"] = o.Jungle
	}
	if !IsNil(o.Precursor) {
		toSerialize["precursor"] = o.Precursor
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberMiningCoreBiomes struct {
	value *SkyBlockProfileMemberMiningCoreBiomes
	isSet bool
}

func (v NullableSkyBlockProfileMemberMiningCoreBiomes) Get() *SkyBlockProfileMemberMiningCoreBiomes {
	return v.value
}

func (v *NullableSkyBlockProfileMemberMiningCoreBiomes) Set(val *SkyBlockProfileMemberMiningCoreBiomes) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberMiningCoreBiomes) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberMiningCoreBiomes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberMiningCoreBiomes(val *SkyBlockProfileMemberMiningCoreBiomes) *NullableSkyBlockProfileMemberMiningCoreBiomes {
	return &NullableSkyBlockProfileMemberMiningCoreBiomes{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberMiningCoreBiomes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberMiningCoreBiomes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
