/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockMuseum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockMuseum{}

// SkyBlockMuseum struct for SkyBlockMuseum
type SkyBlockMuseum struct {
	Appraisal *bool                        `json:"appraisal,omitempty"`
	Items     map[string]interface{}       `json:"items,omitempty"`
	Special   []SkyBlockMuseumSpecialInner `json:"special,omitempty"`
	Value     *int64                       `json:"value,omitempty"`
}

// NewSkyBlockMuseum instantiates a new SkyBlockMuseum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockMuseum() *SkyBlockMuseum {
	this := SkyBlockMuseum{}
	return &this
}

// NewSkyBlockMuseumWithDefaults instantiates a new SkyBlockMuseum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockMuseumWithDefaults() *SkyBlockMuseum {
	this := SkyBlockMuseum{}
	return &this
}

// GetAppraisal returns the Appraisal field value if set, zero value otherwise.
func (o *SkyBlockMuseum) GetAppraisal() bool {
	if o == nil || IsNil(o.Appraisal) {
		var ret bool
		return ret
	}
	return *o.Appraisal
}

// GetAppraisalOk returns a tuple with the Appraisal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockMuseum) GetAppraisalOk() (*bool, bool) {
	if o == nil || IsNil(o.Appraisal) {
		return nil, false
	}
	return o.Appraisal, true
}

// HasAppraisal returns a boolean if a field has been set.
func (o *SkyBlockMuseum) HasAppraisal() bool {
	if o != nil && !IsNil(o.Appraisal) {
		return true
	}

	return false
}

// SetAppraisal gets a reference to the given bool and assigns it to the Appraisal field.
func (o *SkyBlockMuseum) SetAppraisal(v bool) {
	o.Appraisal = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *SkyBlockMuseum) GetItems() map[string]interface{} {
	if o == nil || IsNil(o.Items) {
		var ret map[string]interface{}
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockMuseum) GetItemsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Items) {
		return map[string]interface{}{}, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *SkyBlockMuseum) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given map[string]interface{} and assigns it to the Items field.
func (o *SkyBlockMuseum) SetItems(v map[string]interface{}) {
	o.Items = v
}

// GetSpecial returns the Special field value if set, zero value otherwise.
func (o *SkyBlockMuseum) GetSpecial() []SkyBlockMuseumSpecialInner {
	if o == nil || IsNil(o.Special) {
		var ret []SkyBlockMuseumSpecialInner
		return ret
	}
	return o.Special
}

// GetSpecialOk returns a tuple with the Special field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockMuseum) GetSpecialOk() ([]SkyBlockMuseumSpecialInner, bool) {
	if o == nil || IsNil(o.Special) {
		return nil, false
	}
	return o.Special, true
}

// HasSpecial returns a boolean if a field has been set.
func (o *SkyBlockMuseum) HasSpecial() bool {
	if o != nil && !IsNil(o.Special) {
		return true
	}

	return false
}

// SetSpecial gets a reference to the given []SkyBlockMuseumSpecialInner and assigns it to the Special field.
func (o *SkyBlockMuseum) SetSpecial(v []SkyBlockMuseumSpecialInner) {
	o.Special = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SkyBlockMuseum) GetValue() int64 {
	if o == nil || IsNil(o.Value) {
		var ret int64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockMuseum) GetValueOk() (*int64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SkyBlockMuseum) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *SkyBlockMuseum) SetValue(v int64) {
	o.Value = &v
}

func (o SkyBlockMuseum) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockMuseum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Appraisal) {
		toSerialize["appraisal"] = o.Appraisal
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Special) {
		toSerialize["special"] = o.Special
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableSkyBlockMuseum struct {
	value *SkyBlockMuseum
	isSet bool
}

func (v NullableSkyBlockMuseum) Get() *SkyBlockMuseum {
	return v.value
}

func (v *NullableSkyBlockMuseum) Set(val *SkyBlockMuseum) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockMuseum) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockMuseum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockMuseum(val *SkyBlockMuseum) *NullableSkyBlockMuseum {
	return &NullableSkyBlockMuseum{value: val, isSet: true}
}

func (v NullableSkyBlockMuseum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockMuseum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
