/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockMuseum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockMuseum{}

// SkyBlockMuseum struct for SkyBlockMuseum
type SkyBlockMuseum struct {
	Members map[string]SkyBlockMuseumMember `json:"members"`
	Success bool                            `json:"success"`
}

type _SkyBlockMuseum SkyBlockMuseum

// NewSkyBlockMuseum instantiates a new SkyBlockMuseum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockMuseum(members map[string]SkyBlockMuseumMember, success bool) *SkyBlockMuseum {
	this := SkyBlockMuseum{}
	this.Members = members
	this.Success = success
	return &this
}

// NewSkyBlockMuseumWithDefaults instantiates a new SkyBlockMuseum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockMuseumWithDefaults() *SkyBlockMuseum {
	this := SkyBlockMuseum{}
	return &this
}

// GetMembers returns the Members field value
func (o *SkyBlockMuseum) GetMembers() map[string]SkyBlockMuseumMember {
	if o == nil {
		var ret map[string]SkyBlockMuseumMember
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *SkyBlockMuseum) GetMembersOk() (*map[string]SkyBlockMuseumMember, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Members, true
}

// SetMembers sets field value
func (o *SkyBlockMuseum) SetMembers(v map[string]SkyBlockMuseumMember) {
	o.Members = v
}

// GetSuccess returns the Success field value
func (o *SkyBlockMuseum) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *SkyBlockMuseum) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *SkyBlockMuseum) SetSuccess(v bool) {
	o.Success = v
}

func (o SkyBlockMuseum) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockMuseum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["members"] = o.Members
	toSerialize["success"] = o.Success
	return toSerialize, nil
}

func (o *SkyBlockMuseum) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"members",
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockMuseum := _SkyBlockMuseum{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockMuseum)

	if err != nil {
		return err
	}

	*o = SkyBlockMuseum(varSkyBlockMuseum)

	return err
}

type NullableSkyBlockMuseum struct {
	value *SkyBlockMuseum
	isSet bool
}

func (v NullableSkyBlockMuseum) Get() *SkyBlockMuseum {
	return v.value
}

func (v *NullableSkyBlockMuseum) Set(val *SkyBlockMuseum) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockMuseum) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockMuseum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockMuseum(val *SkyBlockMuseum) *NullableSkyBlockMuseum {
	return &NullableSkyBlockMuseum{value: val, isSet: true}
}

func (v NullableSkyBlockMuseum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockMuseum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
