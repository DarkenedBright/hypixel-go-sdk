/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockFireSales type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockFireSales{}

// SkyBlockFireSales struct for SkyBlockFireSales
type SkyBlockFireSales struct {
	Sales   []SkyBlockFireSale `json:"sales"`
	Success bool               `json:"success"`
}

type _SkyBlockFireSales SkyBlockFireSales

// NewSkyBlockFireSales instantiates a new SkyBlockFireSales object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockFireSales(sales []SkyBlockFireSale, success bool) *SkyBlockFireSales {
	this := SkyBlockFireSales{}
	this.Sales = sales
	this.Success = success
	return &this
}

// NewSkyBlockFireSalesWithDefaults instantiates a new SkyBlockFireSales object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockFireSalesWithDefaults() *SkyBlockFireSales {
	this := SkyBlockFireSales{}
	return &this
}

// GetSales returns the Sales field value
func (o *SkyBlockFireSales) GetSales() []SkyBlockFireSale {
	if o == nil {
		var ret []SkyBlockFireSale
		return ret
	}

	return o.Sales
}

// GetSalesOk returns a tuple with the Sales field value
// and a boolean to check if the value has been set.
func (o *SkyBlockFireSales) GetSalesOk() ([]SkyBlockFireSale, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sales, true
}

// SetSales sets field value
func (o *SkyBlockFireSales) SetSales(v []SkyBlockFireSale) {
	o.Sales = v
}

// GetSuccess returns the Success field value
func (o *SkyBlockFireSales) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *SkyBlockFireSales) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *SkyBlockFireSales) SetSuccess(v bool) {
	o.Success = v
}

func (o SkyBlockFireSales) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockFireSales) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sales"] = o.Sales
	toSerialize["success"] = o.Success
	return toSerialize, nil
}

func (o *SkyBlockFireSales) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sales",
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockFireSales := _SkyBlockFireSales{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockFireSales)

	if err != nil {
		return err
	}

	*o = SkyBlockFireSales(varSkyBlockFireSales)

	return err
}

type NullableSkyBlockFireSales struct {
	value *SkyBlockFireSales
	isSet bool
}

func (v NullableSkyBlockFireSales) Get() *SkyBlockFireSales {
	return v.value
}

func (v *NullableSkyBlockFireSales) Set(val *SkyBlockFireSales) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockFireSales) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockFireSales) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockFireSales(val *SkyBlockFireSales) *NullableSkyBlockFireSales {
	return &NullableSkyBlockFireSales{value: val, isSet: true}
}

func (v NullableSkyBlockFireSales) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockFireSales) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
