/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockItemTier The rarity tier of the item
type SkyBlockItemTier string

// List of SkyBlockItem_tier
const (
	COMMON       SkyBlockItemTier = "COMMON"
	EPIC         SkyBlockItemTier = "EPIC"
	LEGENDARY    SkyBlockItemTier = "LEGENDARY"
	MYTHIC       SkyBlockItemTier = "MYTHIC"
	RARE         SkyBlockItemTier = "RARE"
	SPECIAL      SkyBlockItemTier = "SPECIAL"
	SUPREME      SkyBlockItemTier = "SUPREME"
	UNCOMMON     SkyBlockItemTier = "UNCOMMON"
	VERY_SPECIAL SkyBlockItemTier = "VERY_SPECIAL"
)

// All allowed values of SkyBlockItemTier enum
var AllowedSkyBlockItemTierEnumValues = []SkyBlockItemTier{
	"COMMON",
	"EPIC",
	"LEGENDARY",
	"MYTHIC",
	"RARE",
	"SPECIAL",
	"SUPREME",
	"UNCOMMON",
	"VERY_SPECIAL",
}

func (v *SkyBlockItemTier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockItemTier(value)
	for _, existing := range AllowedSkyBlockItemTierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockItemTier", value)
}

// NewSkyBlockItemTierFromValue returns a pointer to a valid SkyBlockItemTier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockItemTierFromValue(v string) (*SkyBlockItemTier, error) {
	ev := SkyBlockItemTier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockItemTier: valid values are %v", v, AllowedSkyBlockItemTierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockItemTier) IsValid() bool {
	for _, existing := range AllowedSkyBlockItemTierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockItem_tier value
func (v SkyBlockItemTier) Ptr() *SkyBlockItemTier {
	return &v
}

type NullableSkyBlockItemTier struct {
	value *SkyBlockItemTier
	isSet bool
}

func (v NullableSkyBlockItemTier) Get() *SkyBlockItemTier {
	return v.value
}

func (v *NullableSkyBlockItemTier) Set(val *SkyBlockItemTier) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockItemTier) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockItemTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockItemTier(val *SkyBlockItemTier) *NullableSkyBlockItemTier {
	return &NullableSkyBlockItemTier{value: val, isSet: true}
}

func (v NullableSkyBlockItemTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockItemTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
