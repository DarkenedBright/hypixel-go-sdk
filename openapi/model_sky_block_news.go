/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockNews type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockNews{}

// SkyBlockNews struct for SkyBlockNews
type SkyBlockNews struct {
	Items   []SkyBlockNewsElement `json:"items"`
	Success bool                  `json:"success"`
}

type _SkyBlockNews SkyBlockNews

// NewSkyBlockNews instantiates a new SkyBlockNews object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockNews(items []SkyBlockNewsElement, success bool) *SkyBlockNews {
	this := SkyBlockNews{}
	this.Items = items
	this.Success = success
	return &this
}

// NewSkyBlockNewsWithDefaults instantiates a new SkyBlockNews object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockNewsWithDefaults() *SkyBlockNews {
	this := SkyBlockNews{}
	return &this
}

// GetItems returns the Items field value
func (o *SkyBlockNews) GetItems() []SkyBlockNewsElement {
	if o == nil {
		var ret []SkyBlockNewsElement
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *SkyBlockNews) GetItemsOk() ([]SkyBlockNewsElement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *SkyBlockNews) SetItems(v []SkyBlockNewsElement) {
	o.Items = v
}

// GetSuccess returns the Success field value
func (o *SkyBlockNews) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *SkyBlockNews) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *SkyBlockNews) SetSuccess(v bool) {
	o.Success = v
}

func (o SkyBlockNews) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockNews) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["success"] = o.Success
	return toSerialize, nil
}

func (o *SkyBlockNews) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockNews := _SkyBlockNews{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockNews)

	if err != nil {
		return err
	}

	*o = SkyBlockNews(varSkyBlockNews)

	return err
}

type NullableSkyBlockNews struct {
	value *SkyBlockNews
	isSet bool
}

func (v NullableSkyBlockNews) Get() *SkyBlockNews {
	return v.value
}

func (v *NullableSkyBlockNews) Set(val *SkyBlockNews) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockNews) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockNews) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockNews(val *SkyBlockNews) *NullableSkyBlockNews {
	return &NullableSkyBlockNews{value: val, isSet: true}
}

func (v NullableSkyBlockNews) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockNews) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
