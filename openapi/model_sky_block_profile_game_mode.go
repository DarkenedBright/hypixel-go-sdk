/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileGameMode The SkyBlock game mode of the profile, not present if normal mode
type SkyBlockProfileGameMode string

// List of SkyBlockProfile_game_mode
const (
	BINGO   SkyBlockProfileGameMode = "bingo"
	IRONMAN SkyBlockProfileGameMode = "ironman"
	ISLAND  SkyBlockProfileGameMode = "island"
)

// All allowed values of SkyBlockProfileGameMode enum
var AllowedSkyBlockProfileGameModeEnumValues = []SkyBlockProfileGameMode{
	"bingo",
	"ironman",
	"island",
}

func (v *SkyBlockProfileGameMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileGameMode(value)
	for _, existing := range AllowedSkyBlockProfileGameModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileGameMode", value)
}

// NewSkyBlockProfileGameModeFromValue returns a pointer to a valid SkyBlockProfileGameMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileGameModeFromValue(v string) (*SkyBlockProfileGameMode, error) {
	ev := SkyBlockProfileGameMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileGameMode: valid values are %v", v, AllowedSkyBlockProfileGameModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileGameMode) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileGameModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfile_game_mode value
func (v SkyBlockProfileGameMode) Ptr() *SkyBlockProfileGameMode {
	return &v
}

type NullableSkyBlockProfileGameMode struct {
	value *SkyBlockProfileGameMode
	isSet bool
}

func (v NullableSkyBlockProfileGameMode) Get() *SkyBlockProfileGameMode {
	return v.value
}

func (v *NullableSkyBlockProfileGameMode) Set(val *SkyBlockProfileGameMode) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileGameMode) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileGameMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileGameMode(val *SkyBlockProfileGameMode) *NullableSkyBlockProfileGameMode {
	return &NullableSkyBlockProfileGameMode{value: val, isSet: true}
}

func (v NullableSkyBlockProfileGameMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileGameMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
