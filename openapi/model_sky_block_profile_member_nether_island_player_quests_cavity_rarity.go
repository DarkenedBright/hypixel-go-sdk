/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity the model 'SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity'
type SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity string

// List of SkyBlockProfileMemberNetherIslandPlayerQuests_cavity_rarity
const (
	SKYBLOCKPROFILEMEMBERNETHERISLANDPLAYERQUESTSCAVITYRARITY_SPECIAL SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity = "SPECIAL"
)

// All allowed values of SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity enum
var AllowedSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarityEnumValues = []SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity{
	"SPECIAL",
}

func (v *SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity(value)
	for _, existing := range AllowedSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity", value)
}

// NewSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarityFromValue returns a pointer to a valid SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarityFromValue(v string) (*SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity, error) {
	ev := SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity: valid values are %v", v, AllowedSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberNetherIslandPlayerQuests_cavity_rarity value
func (v SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) Ptr() *SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity {
	return &v
}

type NullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity struct {
	value *SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity
	isSet bool
}

func (v NullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) Get() *SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity {
	return v.value
}

func (v *NullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) Set(val *SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity(val *SkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) *NullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity {
	return &NullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberNetherIslandPlayerQuestsCavityRarity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
