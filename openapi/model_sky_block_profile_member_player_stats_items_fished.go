/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockProfileMemberPlayerStatsItemsFished type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberPlayerStatsItemsFished{}

// SkyBlockProfileMemberPlayerStatsItemsFished struct for SkyBlockProfileMemberPlayerStatsItemsFished
type SkyBlockProfileMemberPlayerStatsItemsFished struct {
	LargeTreasure *float64 `json:"large_treasure,omitempty"`
	Normal        float64  `json:"normal"`
	Outstanding   *float64 `json:"outstanding,omitempty"`
	Total         float64  `json:"total"`
	Treasure      *float64 `json:"treasure,omitempty"`
	TrophyFish    *float64 `json:"trophy_fish,omitempty"`
}

type _SkyBlockProfileMemberPlayerStatsItemsFished SkyBlockProfileMemberPlayerStatsItemsFished

// NewSkyBlockProfileMemberPlayerStatsItemsFished instantiates a new SkyBlockProfileMemberPlayerStatsItemsFished object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberPlayerStatsItemsFished(normal float64, total float64) *SkyBlockProfileMemberPlayerStatsItemsFished {
	this := SkyBlockProfileMemberPlayerStatsItemsFished{}
	this.Normal = normal
	this.Total = total
	return &this
}

// NewSkyBlockProfileMemberPlayerStatsItemsFishedWithDefaults instantiates a new SkyBlockProfileMemberPlayerStatsItemsFished object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberPlayerStatsItemsFishedWithDefaults() *SkyBlockProfileMemberPlayerStatsItemsFished {
	this := SkyBlockProfileMemberPlayerStatsItemsFished{}
	return &this
}

// GetLargeTreasure returns the LargeTreasure field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetLargeTreasure() float64 {
	if o == nil || IsNil(o.LargeTreasure) {
		var ret float64
		return ret
	}
	return *o.LargeTreasure
}

// GetLargeTreasureOk returns a tuple with the LargeTreasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetLargeTreasureOk() (*float64, bool) {
	if o == nil || IsNil(o.LargeTreasure) {
		return nil, false
	}
	return o.LargeTreasure, true
}

// HasLargeTreasure returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) HasLargeTreasure() bool {
	if o != nil && !IsNil(o.LargeTreasure) {
		return true
	}

	return false
}

// SetLargeTreasure gets a reference to the given float64 and assigns it to the LargeTreasure field.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) SetLargeTreasure(v float64) {
	o.LargeTreasure = &v
}

// GetNormal returns the Normal field value
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetNormal() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Normal
}

// GetNormalOk returns a tuple with the Normal field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetNormalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Normal, true
}

// SetNormal sets field value
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) SetNormal(v float64) {
	o.Normal = v
}

// GetOutstanding returns the Outstanding field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetOutstanding() float64 {
	if o == nil || IsNil(o.Outstanding) {
		var ret float64
		return ret
	}
	return *o.Outstanding
}

// GetOutstandingOk returns a tuple with the Outstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetOutstandingOk() (*float64, bool) {
	if o == nil || IsNil(o.Outstanding) {
		return nil, false
	}
	return o.Outstanding, true
}

// HasOutstanding returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) HasOutstanding() bool {
	if o != nil && !IsNil(o.Outstanding) {
		return true
	}

	return false
}

// SetOutstanding gets a reference to the given float64 and assigns it to the Outstanding field.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) SetOutstanding(v float64) {
	o.Outstanding = &v
}

// GetTotal returns the Total field value
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetTotal() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) SetTotal(v float64) {
	o.Total = v
}

// GetTreasure returns the Treasure field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetTreasure() float64 {
	if o == nil || IsNil(o.Treasure) {
		var ret float64
		return ret
	}
	return *o.Treasure
}

// GetTreasureOk returns a tuple with the Treasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetTreasureOk() (*float64, bool) {
	if o == nil || IsNil(o.Treasure) {
		return nil, false
	}
	return o.Treasure, true
}

// HasTreasure returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) HasTreasure() bool {
	if o != nil && !IsNil(o.Treasure) {
		return true
	}

	return false
}

// SetTreasure gets a reference to the given float64 and assigns it to the Treasure field.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) SetTreasure(v float64) {
	o.Treasure = &v
}

// GetTrophyFish returns the TrophyFish field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetTrophyFish() float64 {
	if o == nil || IsNil(o.TrophyFish) {
		var ret float64
		return ret
	}
	return *o.TrophyFish
}

// GetTrophyFishOk returns a tuple with the TrophyFish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) GetTrophyFishOk() (*float64, bool) {
	if o == nil || IsNil(o.TrophyFish) {
		return nil, false
	}
	return o.TrophyFish, true
}

// HasTrophyFish returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) HasTrophyFish() bool {
	if o != nil && !IsNil(o.TrophyFish) {
		return true
	}

	return false
}

// SetTrophyFish gets a reference to the given float64 and assigns it to the TrophyFish field.
func (o *SkyBlockProfileMemberPlayerStatsItemsFished) SetTrophyFish(v float64) {
	o.TrophyFish = &v
}

func (o SkyBlockProfileMemberPlayerStatsItemsFished) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberPlayerStatsItemsFished) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LargeTreasure) {
		toSerialize["large_treasure"] = o.LargeTreasure
	}
	toSerialize["normal"] = o.Normal
	if !IsNil(o.Outstanding) {
		toSerialize["outstanding"] = o.Outstanding
	}
	toSerialize["total"] = o.Total
	if !IsNil(o.Treasure) {
		toSerialize["treasure"] = o.Treasure
	}
	if !IsNil(o.TrophyFish) {
		toSerialize["trophy_fish"] = o.TrophyFish
	}
	return toSerialize, nil
}

func (o *SkyBlockProfileMemberPlayerStatsItemsFished) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"normal",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockProfileMemberPlayerStatsItemsFished := _SkyBlockProfileMemberPlayerStatsItemsFished{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockProfileMemberPlayerStatsItemsFished)

	if err != nil {
		return err
	}

	*o = SkyBlockProfileMemberPlayerStatsItemsFished(varSkyBlockProfileMemberPlayerStatsItemsFished)

	return err
}

type NullableSkyBlockProfileMemberPlayerStatsItemsFished struct {
	value *SkyBlockProfileMemberPlayerStatsItemsFished
	isSet bool
}

func (v NullableSkyBlockProfileMemberPlayerStatsItemsFished) Get() *SkyBlockProfileMemberPlayerStatsItemsFished {
	return v.value
}

func (v *NullableSkyBlockProfileMemberPlayerStatsItemsFished) Set(val *SkyBlockProfileMemberPlayerStatsItemsFished) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberPlayerStatsItemsFished) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberPlayerStatsItemsFished) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberPlayerStatsItemsFished(val *SkyBlockProfileMemberPlayerStatsItemsFished) *NullableSkyBlockProfileMemberPlayerStatsItemsFished {
	return &NullableSkyBlockProfileMemberPlayerStatsItemsFished{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberPlayerStatsItemsFished) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberPlayerStatsItemsFished) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
