/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId the model 'SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId'
type SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId string

// List of SkyBlockGardenActiveCommissionsCommissionBonusReward_item_id
const (
	SKYBLOCKGARDENACTIVECOMMISSIONSCOMMISSIONBONUSREWARDITEMID_FLOWERING_BOUQUET SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId = "FLOWERING_BOUQUET"
	SKYBLOCKGARDENACTIVECOMMISSIONSCOMMISSIONBONUSREWARDITEMID_FRUIT_BOWL        SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId = "FRUIT_BOWL"
	SKYBLOCKGARDENACTIVECOMMISSIONSCOMMISSIONBONUSREWARDITEMID_GREEN_BANDANA     SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId = "GREEN_BANDANA"
	SKYBLOCKGARDENACTIVECOMMISSIONSCOMMISSIONBONUSREWARDITEMID_OVERGROWN_GRASS   SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId = "OVERGROWN_GRASS"
)

// All allowed values of SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId enum
var AllowedSkyBlockGardenActiveCommissionsCommissionBonusRewardItemIdEnumValues = []SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId{
	"FLOWERING_BOUQUET",
	"FRUIT_BOWL",
	"GREEN_BANDANA",
	"OVERGROWN_GRASS",
}

func (v *SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId(value)
	for _, existing := range AllowedSkyBlockGardenActiveCommissionsCommissionBonusRewardItemIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId", value)
}

// NewSkyBlockGardenActiveCommissionsCommissionBonusRewardItemIdFromValue returns a pointer to a valid SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockGardenActiveCommissionsCommissionBonusRewardItemIdFromValue(v string) (*SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId, error) {
	ev := SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId: valid values are %v", v, AllowedSkyBlockGardenActiveCommissionsCommissionBonusRewardItemIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) IsValid() bool {
	for _, existing := range AllowedSkyBlockGardenActiveCommissionsCommissionBonusRewardItemIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockGardenActiveCommissionsCommissionBonusReward_item_id value
func (v SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) Ptr() *SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId {
	return &v
}

type NullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId struct {
	value *SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId
	isSet bool
}

func (v NullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) Get() *SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId {
	return v.value
}

func (v *NullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) Set(val *SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId(val *SkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) *NullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId {
	return &NullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId{value: val, isSet: true}
}

func (v NullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockGardenActiveCommissionsCommissionBonusRewardItemId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
