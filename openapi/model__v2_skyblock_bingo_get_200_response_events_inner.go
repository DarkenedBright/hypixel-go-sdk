/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the V2SkyblockBingoGet200ResponseEventsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2SkyblockBingoGet200ResponseEventsInner{}

// V2SkyblockBingoGet200ResponseEventsInner struct for V2SkyblockBingoGet200ResponseEventsInner
type V2SkyblockBingoGet200ResponseEventsInner struct {
	// The id for this event
	Key float64 `json:"key"`
	// The amount of points earned
	Points float64 `json:"points"`
	// The completed goal IDs
	CompletedGoals []string `json:"completed_goals"`
}

type _V2SkyblockBingoGet200ResponseEventsInner V2SkyblockBingoGet200ResponseEventsInner

// NewV2SkyblockBingoGet200ResponseEventsInner instantiates a new V2SkyblockBingoGet200ResponseEventsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2SkyblockBingoGet200ResponseEventsInner(key float64, points float64, completedGoals []string) *V2SkyblockBingoGet200ResponseEventsInner {
	this := V2SkyblockBingoGet200ResponseEventsInner{}
	this.Key = key
	this.Points = points
	this.CompletedGoals = completedGoals
	return &this
}

// NewV2SkyblockBingoGet200ResponseEventsInnerWithDefaults instantiates a new V2SkyblockBingoGet200ResponseEventsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2SkyblockBingoGet200ResponseEventsInnerWithDefaults() *V2SkyblockBingoGet200ResponseEventsInner {
	this := V2SkyblockBingoGet200ResponseEventsInner{}
	return &this
}

// GetKey returns the Key field value
func (o *V2SkyblockBingoGet200ResponseEventsInner) GetKey() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *V2SkyblockBingoGet200ResponseEventsInner) GetKeyOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *V2SkyblockBingoGet200ResponseEventsInner) SetKey(v float64) {
	o.Key = v
}

// GetPoints returns the Points field value
func (o *V2SkyblockBingoGet200ResponseEventsInner) GetPoints() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Points
}

// GetPointsOk returns a tuple with the Points field value
// and a boolean to check if the value has been set.
func (o *V2SkyblockBingoGet200ResponseEventsInner) GetPointsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Points, true
}

// SetPoints sets field value
func (o *V2SkyblockBingoGet200ResponseEventsInner) SetPoints(v float64) {
	o.Points = v
}

// GetCompletedGoals returns the CompletedGoals field value
func (o *V2SkyblockBingoGet200ResponseEventsInner) GetCompletedGoals() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CompletedGoals
}

// GetCompletedGoalsOk returns a tuple with the CompletedGoals field value
// and a boolean to check if the value has been set.
func (o *V2SkyblockBingoGet200ResponseEventsInner) GetCompletedGoalsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedGoals, true
}

// SetCompletedGoals sets field value
func (o *V2SkyblockBingoGet200ResponseEventsInner) SetCompletedGoals(v []string) {
	o.CompletedGoals = v
}

func (o V2SkyblockBingoGet200ResponseEventsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2SkyblockBingoGet200ResponseEventsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["points"] = o.Points
	toSerialize["completed_goals"] = o.CompletedGoals
	return toSerialize, nil
}

func (o *V2SkyblockBingoGet200ResponseEventsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"points",
		"completed_goals",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV2SkyblockBingoGet200ResponseEventsInner := _V2SkyblockBingoGet200ResponseEventsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV2SkyblockBingoGet200ResponseEventsInner)

	if err != nil {
		return err
	}

	*o = V2SkyblockBingoGet200ResponseEventsInner(varV2SkyblockBingoGet200ResponseEventsInner)

	return err
}

type NullableV2SkyblockBingoGet200ResponseEventsInner struct {
	value *V2SkyblockBingoGet200ResponseEventsInner
	isSet bool
}

func (v NullableV2SkyblockBingoGet200ResponseEventsInner) Get() *V2SkyblockBingoGet200ResponseEventsInner {
	return v.value
}

func (v *NullableV2SkyblockBingoGet200ResponseEventsInner) Set(val *V2SkyblockBingoGet200ResponseEventsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV2SkyblockBingoGet200ResponseEventsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV2SkyblockBingoGet200ResponseEventsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2SkyblockBingoGet200ResponseEventsInner(val *V2SkyblockBingoGet200ResponseEventsInner) *NullableV2SkyblockBingoGet200ResponseEventsInner {
	return &NullableV2SkyblockBingoGet200ResponseEventsInner{value: val, isSet: true}
}

func (v NullableV2SkyblockBingoGet200ResponseEventsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2SkyblockBingoGet200ResponseEventsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
