/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberCurrenciesEssenceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberCurrenciesEssenceData{}

// SkyBlockProfileMemberCurrenciesEssenceData struct for SkyBlockProfileMemberCurrenciesEssenceData
type SkyBlockProfileMemberCurrenciesEssenceData struct {
	Current *int64 `json:"current,omitempty"`
}

// NewSkyBlockProfileMemberCurrenciesEssenceData instantiates a new SkyBlockProfileMemberCurrenciesEssenceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberCurrenciesEssenceData() *SkyBlockProfileMemberCurrenciesEssenceData {
	this := SkyBlockProfileMemberCurrenciesEssenceData{}
	return &this
}

// NewSkyBlockProfileMemberCurrenciesEssenceDataWithDefaults instantiates a new SkyBlockProfileMemberCurrenciesEssenceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberCurrenciesEssenceDataWithDefaults() *SkyBlockProfileMemberCurrenciesEssenceData {
	this := SkyBlockProfileMemberCurrenciesEssenceData{}
	return &this
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberCurrenciesEssenceData) GetCurrent() int64 {
	if o == nil || IsNil(o.Current) {
		var ret int64
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberCurrenciesEssenceData) GetCurrentOk() (*int64, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberCurrenciesEssenceData) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given int64 and assigns it to the Current field.
func (o *SkyBlockProfileMemberCurrenciesEssenceData) SetCurrent(v int64) {
	o.Current = &v
}

func (o SkyBlockProfileMemberCurrenciesEssenceData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberCurrenciesEssenceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberCurrenciesEssenceData struct {
	value *SkyBlockProfileMemberCurrenciesEssenceData
	isSet bool
}

func (v NullableSkyBlockProfileMemberCurrenciesEssenceData) Get() *SkyBlockProfileMemberCurrenciesEssenceData {
	return v.value
}

func (v *NullableSkyBlockProfileMemberCurrenciesEssenceData) Set(val *SkyBlockProfileMemberCurrenciesEssenceData) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberCurrenciesEssenceData) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberCurrenciesEssenceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberCurrenciesEssenceData(val *SkyBlockProfileMemberCurrenciesEssenceData) *NullableSkyBlockProfileMemberCurrenciesEssenceData {
	return &NullableSkyBlockProfileMemberCurrenciesEssenceData{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberCurrenciesEssenceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberCurrenciesEssenceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
