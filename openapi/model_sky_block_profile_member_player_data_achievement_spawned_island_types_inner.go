/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner the model 'SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner'
type SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner string

// List of SkyBlockProfileMemberPlayerData_achievement_spawned_island_types_inner
const (
	SKYBLOCKPROFILEMEMBERPLAYERDATAACHIEVEMENTSPAWNEDISLANDTYPESINNER_DESERT        SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner = "DESERT"
	SKYBLOCKPROFILEMEMBERPLAYERDATAACHIEVEMENTSPAWNEDISLANDTYPESINNER_FARMING       SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner = "FARMING"
	SKYBLOCKPROFILEMEMBERPLAYERDATAACHIEVEMENTSPAWNEDISLANDTYPESINNER_MINING_FOREST SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner = "MINING_FOREST"
	SKYBLOCKPROFILEMEMBERPLAYERDATAACHIEVEMENTSPAWNEDISLANDTYPESINNER_NETHER_WART   SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner = "NETHER_WART"
	SKYBLOCKPROFILEMEMBERPLAYERDATAACHIEVEMENTSPAWNEDISLANDTYPESINNER_POND          SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner = "POND"
	SKYBLOCKPROFILEMEMBERPLAYERDATAACHIEVEMENTSPAWNEDISLANDTYPESINNER_WINTER        SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner = "WINTER"
)

// All allowed values of SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner enum
var AllowedSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInnerEnumValues = []SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner{
	"DESERT",
	"FARMING",
	"MINING_FOREST",
	"NETHER_WART",
	"POND",
	"WINTER",
}

func (v *SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner(value)
	for _, existing := range AllowedSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner", value)
}

// NewSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInnerFromValue returns a pointer to a valid SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInnerFromValue(v string) (*SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner, error) {
	ev := SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner: valid values are %v", v, AllowedSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberPlayerData_achievement_spawned_island_types_inner value
func (v SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) Ptr() *SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner {
	return &v
}

type NullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner struct {
	value *SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner
	isSet bool
}

func (v NullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) Get() *SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner {
	return v.value
}

func (v *NullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) Set(val *SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner(val *SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) *NullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner {
	return &NullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
