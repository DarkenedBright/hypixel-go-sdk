/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberJacobsContest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberJacobsContest{}

// SkyBlockProfileMemberJacobsContest struct for SkyBlockProfileMemberJacobsContest
type SkyBlockProfileMemberJacobsContest struct {
	Contests       *map[string]SkyBlockProfileMemberJacobsContestContestsValue `json:"contests,omitempty"`
	MedalsInv      *SkyBlockProfileMemberJacobsContestMedalsInv                `json:"medals_inv,omitempty"`
	Migration      *bool                                                       `json:"migration,omitempty"`
	Perks          *SkyBlockProfileMemberJacobsContestPerks                    `json:"perks,omitempty"`
	PersonalBests  *map[string]int64                                           `json:"personal_bests,omitempty"`
	Talked         *bool                                                       `json:"talked,omitempty"`
	UniqueBrackets *map[string][]string                                        `json:"unique_brackets,omitempty"`
}

// NewSkyBlockProfileMemberJacobsContest instantiates a new SkyBlockProfileMemberJacobsContest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberJacobsContest() *SkyBlockProfileMemberJacobsContest {
	this := SkyBlockProfileMemberJacobsContest{}
	return &this
}

// NewSkyBlockProfileMemberJacobsContestWithDefaults instantiates a new SkyBlockProfileMemberJacobsContest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberJacobsContestWithDefaults() *SkyBlockProfileMemberJacobsContest {
	this := SkyBlockProfileMemberJacobsContest{}
	return &this
}

// GetContests returns the Contests field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetContests() map[string]SkyBlockProfileMemberJacobsContestContestsValue {
	if o == nil || IsNil(o.Contests) {
		var ret map[string]SkyBlockProfileMemberJacobsContestContestsValue
		return ret
	}
	return *o.Contests
}

// GetContestsOk returns a tuple with the Contests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetContestsOk() (*map[string]SkyBlockProfileMemberJacobsContestContestsValue, bool) {
	if o == nil || IsNil(o.Contests) {
		return nil, false
	}
	return o.Contests, true
}

// HasContests returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasContests() bool {
	if o != nil && !IsNil(o.Contests) {
		return true
	}

	return false
}

// SetContests gets a reference to the given map[string]SkyBlockProfileMemberJacobsContestContestsValue and assigns it to the Contests field.
func (o *SkyBlockProfileMemberJacobsContest) SetContests(v map[string]SkyBlockProfileMemberJacobsContestContestsValue) {
	o.Contests = &v
}

// GetMedalsInv returns the MedalsInv field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetMedalsInv() SkyBlockProfileMemberJacobsContestMedalsInv {
	if o == nil || IsNil(o.MedalsInv) {
		var ret SkyBlockProfileMemberJacobsContestMedalsInv
		return ret
	}
	return *o.MedalsInv
}

// GetMedalsInvOk returns a tuple with the MedalsInv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetMedalsInvOk() (*SkyBlockProfileMemberJacobsContestMedalsInv, bool) {
	if o == nil || IsNil(o.MedalsInv) {
		return nil, false
	}
	return o.MedalsInv, true
}

// HasMedalsInv returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasMedalsInv() bool {
	if o != nil && !IsNil(o.MedalsInv) {
		return true
	}

	return false
}

// SetMedalsInv gets a reference to the given SkyBlockProfileMemberJacobsContestMedalsInv and assigns it to the MedalsInv field.
func (o *SkyBlockProfileMemberJacobsContest) SetMedalsInv(v SkyBlockProfileMemberJacobsContestMedalsInv) {
	o.MedalsInv = &v
}

// GetMigration returns the Migration field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetMigration() bool {
	if o == nil || IsNil(o.Migration) {
		var ret bool
		return ret
	}
	return *o.Migration
}

// GetMigrationOk returns a tuple with the Migration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetMigrationOk() (*bool, bool) {
	if o == nil || IsNil(o.Migration) {
		return nil, false
	}
	return o.Migration, true
}

// HasMigration returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasMigration() bool {
	if o != nil && !IsNil(o.Migration) {
		return true
	}

	return false
}

// SetMigration gets a reference to the given bool and assigns it to the Migration field.
func (o *SkyBlockProfileMemberJacobsContest) SetMigration(v bool) {
	o.Migration = &v
}

// GetPerks returns the Perks field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetPerks() SkyBlockProfileMemberJacobsContestPerks {
	if o == nil || IsNil(o.Perks) {
		var ret SkyBlockProfileMemberJacobsContestPerks
		return ret
	}
	return *o.Perks
}

// GetPerksOk returns a tuple with the Perks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetPerksOk() (*SkyBlockProfileMemberJacobsContestPerks, bool) {
	if o == nil || IsNil(o.Perks) {
		return nil, false
	}
	return o.Perks, true
}

// HasPerks returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasPerks() bool {
	if o != nil && !IsNil(o.Perks) {
		return true
	}

	return false
}

// SetPerks gets a reference to the given SkyBlockProfileMemberJacobsContestPerks and assigns it to the Perks field.
func (o *SkyBlockProfileMemberJacobsContest) SetPerks(v SkyBlockProfileMemberJacobsContestPerks) {
	o.Perks = &v
}

// GetPersonalBests returns the PersonalBests field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetPersonalBests() map[string]int64 {
	if o == nil || IsNil(o.PersonalBests) {
		var ret map[string]int64
		return ret
	}
	return *o.PersonalBests
}

// GetPersonalBestsOk returns a tuple with the PersonalBests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetPersonalBestsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.PersonalBests) {
		return nil, false
	}
	return o.PersonalBests, true
}

// HasPersonalBests returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasPersonalBests() bool {
	if o != nil && !IsNil(o.PersonalBests) {
		return true
	}

	return false
}

// SetPersonalBests gets a reference to the given map[string]int64 and assigns it to the PersonalBests field.
func (o *SkyBlockProfileMemberJacobsContest) SetPersonalBests(v map[string]int64) {
	o.PersonalBests = &v
}

// GetTalked returns the Talked field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetTalked() bool {
	if o == nil || IsNil(o.Talked) {
		var ret bool
		return ret
	}
	return *o.Talked
}

// GetTalkedOk returns a tuple with the Talked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetTalkedOk() (*bool, bool) {
	if o == nil || IsNil(o.Talked) {
		return nil, false
	}
	return o.Talked, true
}

// HasTalked returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasTalked() bool {
	if o != nil && !IsNil(o.Talked) {
		return true
	}

	return false
}

// SetTalked gets a reference to the given bool and assigns it to the Talked field.
func (o *SkyBlockProfileMemberJacobsContest) SetTalked(v bool) {
	o.Talked = &v
}

// GetUniqueBrackets returns the UniqueBrackets field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetUniqueBrackets() map[string][]string {
	if o == nil || IsNil(o.UniqueBrackets) {
		var ret map[string][]string
		return ret
	}
	return *o.UniqueBrackets
}

// GetUniqueBracketsOk returns a tuple with the UniqueBrackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetUniqueBracketsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.UniqueBrackets) {
		return nil, false
	}
	return o.UniqueBrackets, true
}

// HasUniqueBrackets returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasUniqueBrackets() bool {
	if o != nil && !IsNil(o.UniqueBrackets) {
		return true
	}

	return false
}

// SetUniqueBrackets gets a reference to the given map[string][]string and assigns it to the UniqueBrackets field.
func (o *SkyBlockProfileMemberJacobsContest) SetUniqueBrackets(v map[string][]string) {
	o.UniqueBrackets = &v
}

func (o SkyBlockProfileMemberJacobsContest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberJacobsContest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contests) {
		toSerialize["contests"] = o.Contests
	}
	if !IsNil(o.MedalsInv) {
		toSerialize["medals_inv"] = o.MedalsInv
	}
	if !IsNil(o.Migration) {
		toSerialize["migration"] = o.Migration
	}
	if !IsNil(o.Perks) {
		toSerialize["perks"] = o.Perks
	}
	if !IsNil(o.PersonalBests) {
		toSerialize["personal_bests"] = o.PersonalBests
	}
	if !IsNil(o.Talked) {
		toSerialize["talked"] = o.Talked
	}
	if !IsNil(o.UniqueBrackets) {
		toSerialize["unique_brackets"] = o.UniqueBrackets
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberJacobsContest struct {
	value *SkyBlockProfileMemberJacobsContest
	isSet bool
}

func (v NullableSkyBlockProfileMemberJacobsContest) Get() *SkyBlockProfileMemberJacobsContest {
	return v.value
}

func (v *NullableSkyBlockProfileMemberJacobsContest) Set(val *SkyBlockProfileMemberJacobsContest) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberJacobsContest) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberJacobsContest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberJacobsContest(val *SkyBlockProfileMemberJacobsContest) *NullableSkyBlockProfileMemberJacobsContest {
	return &NullableSkyBlockProfileMemberJacobsContest{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberJacobsContest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberJacobsContest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
