/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberJacobsContest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberJacobsContest{}

// SkyBlockProfileMemberJacobsContest struct for SkyBlockProfileMemberJacobsContest
type SkyBlockProfileMemberJacobsContest struct {
	Contests       *map[string]SkyBlockProfileMemberJacobsContestContest `json:"contests,omitempty"`
	MedalsInv      *SkyBlockProfileMemberJacobsContestMedalsInv          `json:"medals_inv,omitempty"`
	Migration      *bool                                                 `json:"migration,omitempty"`
	Perks          *SkyBlockProfileMemberJacobsContestPerks              `json:"perks,omitempty"`
	PersonalBests  *SkyBlockProfileMemberJacobsContestPersonalBests      `json:"personal_bests,omitempty"`
	Talked         *bool                                                 `json:"talked,omitempty"`
	UniqueBrackets *SkyBlockProfileMemberJacobsContestUniqueBrackets     `json:"unique_brackets,omitempty"`
}

// NewSkyBlockProfileMemberJacobsContest instantiates a new SkyBlockProfileMemberJacobsContest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberJacobsContest() *SkyBlockProfileMemberJacobsContest {
	this := SkyBlockProfileMemberJacobsContest{}
	return &this
}

// NewSkyBlockProfileMemberJacobsContestWithDefaults instantiates a new SkyBlockProfileMemberJacobsContest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberJacobsContestWithDefaults() *SkyBlockProfileMemberJacobsContest {
	this := SkyBlockProfileMemberJacobsContest{}
	return &this
}

// GetContests returns the Contests field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetContests() map[string]SkyBlockProfileMemberJacobsContestContest {
	if o == nil || IsNil(o.Contests) {
		var ret map[string]SkyBlockProfileMemberJacobsContestContest
		return ret
	}
	return *o.Contests
}

// GetContestsOk returns a tuple with the Contests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetContestsOk() (*map[string]SkyBlockProfileMemberJacobsContestContest, bool) {
	if o == nil || IsNil(o.Contests) {
		return nil, false
	}
	return o.Contests, true
}

// HasContests returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasContests() bool {
	if o != nil && !IsNil(o.Contests) {
		return true
	}

	return false
}

// SetContests gets a reference to the given map[string]SkyBlockProfileMemberJacobsContestContest and assigns it to the Contests field.
func (o *SkyBlockProfileMemberJacobsContest) SetContests(v map[string]SkyBlockProfileMemberJacobsContestContest) {
	o.Contests = &v
}

// GetMedalsInv returns the MedalsInv field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetMedalsInv() SkyBlockProfileMemberJacobsContestMedalsInv {
	if o == nil || IsNil(o.MedalsInv) {
		var ret SkyBlockProfileMemberJacobsContestMedalsInv
		return ret
	}
	return *o.MedalsInv
}

// GetMedalsInvOk returns a tuple with the MedalsInv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetMedalsInvOk() (*SkyBlockProfileMemberJacobsContestMedalsInv, bool) {
	if o == nil || IsNil(o.MedalsInv) {
		return nil, false
	}
	return o.MedalsInv, true
}

// HasMedalsInv returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasMedalsInv() bool {
	if o != nil && !IsNil(o.MedalsInv) {
		return true
	}

	return false
}

// SetMedalsInv gets a reference to the given SkyBlockProfileMemberJacobsContestMedalsInv and assigns it to the MedalsInv field.
func (o *SkyBlockProfileMemberJacobsContest) SetMedalsInv(v SkyBlockProfileMemberJacobsContestMedalsInv) {
	o.MedalsInv = &v
}

// GetMigration returns the Migration field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetMigration() bool {
	if o == nil || IsNil(o.Migration) {
		var ret bool
		return ret
	}
	return *o.Migration
}

// GetMigrationOk returns a tuple with the Migration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetMigrationOk() (*bool, bool) {
	if o == nil || IsNil(o.Migration) {
		return nil, false
	}
	return o.Migration, true
}

// HasMigration returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasMigration() bool {
	if o != nil && !IsNil(o.Migration) {
		return true
	}

	return false
}

// SetMigration gets a reference to the given bool and assigns it to the Migration field.
func (o *SkyBlockProfileMemberJacobsContest) SetMigration(v bool) {
	o.Migration = &v
}

// GetPerks returns the Perks field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetPerks() SkyBlockProfileMemberJacobsContestPerks {
	if o == nil || IsNil(o.Perks) {
		var ret SkyBlockProfileMemberJacobsContestPerks
		return ret
	}
	return *o.Perks
}

// GetPerksOk returns a tuple with the Perks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetPerksOk() (*SkyBlockProfileMemberJacobsContestPerks, bool) {
	if o == nil || IsNil(o.Perks) {
		return nil, false
	}
	return o.Perks, true
}

// HasPerks returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasPerks() bool {
	if o != nil && !IsNil(o.Perks) {
		return true
	}

	return false
}

// SetPerks gets a reference to the given SkyBlockProfileMemberJacobsContestPerks and assigns it to the Perks field.
func (o *SkyBlockProfileMemberJacobsContest) SetPerks(v SkyBlockProfileMemberJacobsContestPerks) {
	o.Perks = &v
}

// GetPersonalBests returns the PersonalBests field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetPersonalBests() SkyBlockProfileMemberJacobsContestPersonalBests {
	if o == nil || IsNil(o.PersonalBests) {
		var ret SkyBlockProfileMemberJacobsContestPersonalBests
		return ret
	}
	return *o.PersonalBests
}

// GetPersonalBestsOk returns a tuple with the PersonalBests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetPersonalBestsOk() (*SkyBlockProfileMemberJacobsContestPersonalBests, bool) {
	if o == nil || IsNil(o.PersonalBests) {
		return nil, false
	}
	return o.PersonalBests, true
}

// HasPersonalBests returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasPersonalBests() bool {
	if o != nil && !IsNil(o.PersonalBests) {
		return true
	}

	return false
}

// SetPersonalBests gets a reference to the given SkyBlockProfileMemberJacobsContestPersonalBests and assigns it to the PersonalBests field.
func (o *SkyBlockProfileMemberJacobsContest) SetPersonalBests(v SkyBlockProfileMemberJacobsContestPersonalBests) {
	o.PersonalBests = &v
}

// GetTalked returns the Talked field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetTalked() bool {
	if o == nil || IsNil(o.Talked) {
		var ret bool
		return ret
	}
	return *o.Talked
}

// GetTalkedOk returns a tuple with the Talked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetTalkedOk() (*bool, bool) {
	if o == nil || IsNil(o.Talked) {
		return nil, false
	}
	return o.Talked, true
}

// HasTalked returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasTalked() bool {
	if o != nil && !IsNil(o.Talked) {
		return true
	}

	return false
}

// SetTalked gets a reference to the given bool and assigns it to the Talked field.
func (o *SkyBlockProfileMemberJacobsContest) SetTalked(v bool) {
	o.Talked = &v
}

// GetUniqueBrackets returns the UniqueBrackets field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberJacobsContest) GetUniqueBrackets() SkyBlockProfileMemberJacobsContestUniqueBrackets {
	if o == nil || IsNil(o.UniqueBrackets) {
		var ret SkyBlockProfileMemberJacobsContestUniqueBrackets
		return ret
	}
	return *o.UniqueBrackets
}

// GetUniqueBracketsOk returns a tuple with the UniqueBrackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberJacobsContest) GetUniqueBracketsOk() (*SkyBlockProfileMemberJacobsContestUniqueBrackets, bool) {
	if o == nil || IsNil(o.UniqueBrackets) {
		return nil, false
	}
	return o.UniqueBrackets, true
}

// HasUniqueBrackets returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberJacobsContest) HasUniqueBrackets() bool {
	if o != nil && !IsNil(o.UniqueBrackets) {
		return true
	}

	return false
}

// SetUniqueBrackets gets a reference to the given SkyBlockProfileMemberJacobsContestUniqueBrackets and assigns it to the UniqueBrackets field.
func (o *SkyBlockProfileMemberJacobsContest) SetUniqueBrackets(v SkyBlockProfileMemberJacobsContestUniqueBrackets) {
	o.UniqueBrackets = &v
}

func (o SkyBlockProfileMemberJacobsContest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberJacobsContest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contests) {
		toSerialize["contests"] = o.Contests
	}
	if !IsNil(o.MedalsInv) {
		toSerialize["medals_inv"] = o.MedalsInv
	}
	if !IsNil(o.Migration) {
		toSerialize["migration"] = o.Migration
	}
	if !IsNil(o.Perks) {
		toSerialize["perks"] = o.Perks
	}
	if !IsNil(o.PersonalBests) {
		toSerialize["personal_bests"] = o.PersonalBests
	}
	if !IsNil(o.Talked) {
		toSerialize["talked"] = o.Talked
	}
	if !IsNil(o.UniqueBrackets) {
		toSerialize["unique_brackets"] = o.UniqueBrackets
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberJacobsContest struct {
	value *SkyBlockProfileMemberJacobsContest
	isSet bool
}

func (v NullableSkyBlockProfileMemberJacobsContest) Get() *SkyBlockProfileMemberJacobsContest {
	return v.value
}

func (v *NullableSkyBlockProfileMemberJacobsContest) Set(val *SkyBlockProfileMemberJacobsContest) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberJacobsContest) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberJacobsContest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberJacobsContest(val *SkyBlockProfileMemberJacobsContest) *NullableSkyBlockProfileMemberJacobsContest {
	return &NullableSkyBlockProfileMemberJacobsContest{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberJacobsContest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberJacobsContest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
