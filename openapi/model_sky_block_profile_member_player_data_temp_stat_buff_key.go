/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberPlayerDataTempStatBuffKey the model 'SkyBlockProfileMemberPlayerDataTempStatBuffKey'
type SkyBlockProfileMemberPlayerDataTempStatBuffKey string

// List of SkyBlockProfileMemberPlayerDataTempStatBuff_key
const (
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_COLD_RESISTANCE     SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_cold_resistance"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_DEFENSE             SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_defense"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_FARMING_FORTUNE     SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_farming_fortune"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_FEROCITY            SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_ferocity"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_FORAGING_FORTUNE    SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_foraging_fortune"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_HEALTH              SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_health"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_INTELLIGENCE        SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_intelligence"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_MAGIC_FIND          SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_magic_find"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_MINING_FORTUNE      SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_mining_fortune"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_PET_LUCK            SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_pet_luck"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_RIFT_TIME           SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_rift_time"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_SEA_CREATURE_CHANCE SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_sea_creature_chance"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_STRENGTH            SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_strength"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_TRUE_DEFENSE        SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_true_defense"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_VITALITY            SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_vitality"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFKEY_CAKE_WALK_SPEED          SkyBlockProfileMemberPlayerDataTempStatBuffKey = "cake_walk_speed"
)

// All allowed values of SkyBlockProfileMemberPlayerDataTempStatBuffKey enum
var AllowedSkyBlockProfileMemberPlayerDataTempStatBuffKeyEnumValues = []SkyBlockProfileMemberPlayerDataTempStatBuffKey{
	"cake_cold_resistance",
	"cake_defense",
	"cake_farming_fortune",
	"cake_ferocity",
	"cake_foraging_fortune",
	"cake_health",
	"cake_intelligence",
	"cake_magic_find",
	"cake_mining_fortune",
	"cake_pet_luck",
	"cake_rift_time",
	"cake_sea_creature_chance",
	"cake_strength",
	"cake_true_defense",
	"cake_vitality",
	"cake_walk_speed",
}

func (v *SkyBlockProfileMemberPlayerDataTempStatBuffKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberPlayerDataTempStatBuffKey(value)
	for _, existing := range AllowedSkyBlockProfileMemberPlayerDataTempStatBuffKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberPlayerDataTempStatBuffKey", value)
}

// NewSkyBlockProfileMemberPlayerDataTempStatBuffKeyFromValue returns a pointer to a valid SkyBlockProfileMemberPlayerDataTempStatBuffKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberPlayerDataTempStatBuffKeyFromValue(v string) (*SkyBlockProfileMemberPlayerDataTempStatBuffKey, error) {
	ev := SkyBlockProfileMemberPlayerDataTempStatBuffKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberPlayerDataTempStatBuffKey: valid values are %v", v, AllowedSkyBlockProfileMemberPlayerDataTempStatBuffKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberPlayerDataTempStatBuffKey) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberPlayerDataTempStatBuffKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberPlayerDataTempStatBuff_key value
func (v SkyBlockProfileMemberPlayerDataTempStatBuffKey) Ptr() *SkyBlockProfileMemberPlayerDataTempStatBuffKey {
	return &v
}

type NullableSkyBlockProfileMemberPlayerDataTempStatBuffKey struct {
	value *SkyBlockProfileMemberPlayerDataTempStatBuffKey
	isSet bool
}

func (v NullableSkyBlockProfileMemberPlayerDataTempStatBuffKey) Get() *SkyBlockProfileMemberPlayerDataTempStatBuffKey {
	return v.value
}

func (v *NullableSkyBlockProfileMemberPlayerDataTempStatBuffKey) Set(val *SkyBlockProfileMemberPlayerDataTempStatBuffKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberPlayerDataTempStatBuffKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberPlayerDataTempStatBuffKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberPlayerDataTempStatBuffKey(val *SkyBlockProfileMemberPlayerDataTempStatBuffKey) *NullableSkyBlockProfileMemberPlayerDataTempStatBuffKey {
	return &NullableSkyBlockProfileMemberPlayerDataTempStatBuffKey{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberPlayerDataTempStatBuffKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberPlayerDataTempStatBuffKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
