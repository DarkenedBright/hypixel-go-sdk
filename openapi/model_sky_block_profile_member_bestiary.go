/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberBestiary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberBestiary{}

// SkyBlockProfileMemberBestiary struct for SkyBlockProfileMemberBestiary
type SkyBlockProfileMemberBestiary struct {
	Deaths        *map[string]int64                           `json:"deaths,omitempty"`
	Kills         *SkyBlockProfileMemberBestiaryKills         `json:"kills,omitempty"`
	MigratedStats *bool                                       `json:"migrated_stats,omitempty"`
	Migration     *bool                                       `json:"migration,omitempty"`
	Milestone     *SkyBlockProfileMemberBestiaryMilestone     `json:"milestone,omitempty"`
	Miscellaneous *SkyBlockProfileMemberBestiaryMiscellaneous `json:"miscellaneous,omitempty"`
}

// NewSkyBlockProfileMemberBestiary instantiates a new SkyBlockProfileMemberBestiary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberBestiary() *SkyBlockProfileMemberBestiary {
	this := SkyBlockProfileMemberBestiary{}
	return &this
}

// NewSkyBlockProfileMemberBestiaryWithDefaults instantiates a new SkyBlockProfileMemberBestiary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberBestiaryWithDefaults() *SkyBlockProfileMemberBestiary {
	this := SkyBlockProfileMemberBestiary{}
	return &this
}

// GetDeaths returns the Deaths field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberBestiary) GetDeaths() map[string]int64 {
	if o == nil || IsNil(o.Deaths) {
		var ret map[string]int64
		return ret
	}
	return *o.Deaths
}

// GetDeathsOk returns a tuple with the Deaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberBestiary) GetDeathsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.Deaths) {
		return nil, false
	}
	return o.Deaths, true
}

// HasDeaths returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberBestiary) HasDeaths() bool {
	if o != nil && !IsNil(o.Deaths) {
		return true
	}

	return false
}

// SetDeaths gets a reference to the given map[string]int64 and assigns it to the Deaths field.
func (o *SkyBlockProfileMemberBestiary) SetDeaths(v map[string]int64) {
	o.Deaths = &v
}

// GetKills returns the Kills field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberBestiary) GetKills() SkyBlockProfileMemberBestiaryKills {
	if o == nil || IsNil(o.Kills) {
		var ret SkyBlockProfileMemberBestiaryKills
		return ret
	}
	return *o.Kills
}

// GetKillsOk returns a tuple with the Kills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberBestiary) GetKillsOk() (*SkyBlockProfileMemberBestiaryKills, bool) {
	if o == nil || IsNil(o.Kills) {
		return nil, false
	}
	return o.Kills, true
}

// HasKills returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberBestiary) HasKills() bool {
	if o != nil && !IsNil(o.Kills) {
		return true
	}

	return false
}

// SetKills gets a reference to the given SkyBlockProfileMemberBestiaryKills and assigns it to the Kills field.
func (o *SkyBlockProfileMemberBestiary) SetKills(v SkyBlockProfileMemberBestiaryKills) {
	o.Kills = &v
}

// GetMigratedStats returns the MigratedStats field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberBestiary) GetMigratedStats() bool {
	if o == nil || IsNil(o.MigratedStats) {
		var ret bool
		return ret
	}
	return *o.MigratedStats
}

// GetMigratedStatsOk returns a tuple with the MigratedStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberBestiary) GetMigratedStatsOk() (*bool, bool) {
	if o == nil || IsNil(o.MigratedStats) {
		return nil, false
	}
	return o.MigratedStats, true
}

// HasMigratedStats returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberBestiary) HasMigratedStats() bool {
	if o != nil && !IsNil(o.MigratedStats) {
		return true
	}

	return false
}

// SetMigratedStats gets a reference to the given bool and assigns it to the MigratedStats field.
func (o *SkyBlockProfileMemberBestiary) SetMigratedStats(v bool) {
	o.MigratedStats = &v
}

// GetMigration returns the Migration field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberBestiary) GetMigration() bool {
	if o == nil || IsNil(o.Migration) {
		var ret bool
		return ret
	}
	return *o.Migration
}

// GetMigrationOk returns a tuple with the Migration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberBestiary) GetMigrationOk() (*bool, bool) {
	if o == nil || IsNil(o.Migration) {
		return nil, false
	}
	return o.Migration, true
}

// HasMigration returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberBestiary) HasMigration() bool {
	if o != nil && !IsNil(o.Migration) {
		return true
	}

	return false
}

// SetMigration gets a reference to the given bool and assigns it to the Migration field.
func (o *SkyBlockProfileMemberBestiary) SetMigration(v bool) {
	o.Migration = &v
}

// GetMilestone returns the Milestone field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberBestiary) GetMilestone() SkyBlockProfileMemberBestiaryMilestone {
	if o == nil || IsNil(o.Milestone) {
		var ret SkyBlockProfileMemberBestiaryMilestone
		return ret
	}
	return *o.Milestone
}

// GetMilestoneOk returns a tuple with the Milestone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberBestiary) GetMilestoneOk() (*SkyBlockProfileMemberBestiaryMilestone, bool) {
	if o == nil || IsNil(o.Milestone) {
		return nil, false
	}
	return o.Milestone, true
}

// HasMilestone returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberBestiary) HasMilestone() bool {
	if o != nil && !IsNil(o.Milestone) {
		return true
	}

	return false
}

// SetMilestone gets a reference to the given SkyBlockProfileMemberBestiaryMilestone and assigns it to the Milestone field.
func (o *SkyBlockProfileMemberBestiary) SetMilestone(v SkyBlockProfileMemberBestiaryMilestone) {
	o.Milestone = &v
}

// GetMiscellaneous returns the Miscellaneous field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberBestiary) GetMiscellaneous() SkyBlockProfileMemberBestiaryMiscellaneous {
	if o == nil || IsNil(o.Miscellaneous) {
		var ret SkyBlockProfileMemberBestiaryMiscellaneous
		return ret
	}
	return *o.Miscellaneous
}

// GetMiscellaneousOk returns a tuple with the Miscellaneous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberBestiary) GetMiscellaneousOk() (*SkyBlockProfileMemberBestiaryMiscellaneous, bool) {
	if o == nil || IsNil(o.Miscellaneous) {
		return nil, false
	}
	return o.Miscellaneous, true
}

// HasMiscellaneous returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberBestiary) HasMiscellaneous() bool {
	if o != nil && !IsNil(o.Miscellaneous) {
		return true
	}

	return false
}

// SetMiscellaneous gets a reference to the given SkyBlockProfileMemberBestiaryMiscellaneous and assigns it to the Miscellaneous field.
func (o *SkyBlockProfileMemberBestiary) SetMiscellaneous(v SkyBlockProfileMemberBestiaryMiscellaneous) {
	o.Miscellaneous = &v
}

func (o SkyBlockProfileMemberBestiary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberBestiary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Deaths) {
		toSerialize["deaths"] = o.Deaths
	}
	if !IsNil(o.Kills) {
		toSerialize["kills"] = o.Kills
	}
	if !IsNil(o.MigratedStats) {
		toSerialize["migrated_stats"] = o.MigratedStats
	}
	if !IsNil(o.Migration) {
		toSerialize["migration"] = o.Migration
	}
	if !IsNil(o.Milestone) {
		toSerialize["milestone"] = o.Milestone
	}
	if !IsNil(o.Miscellaneous) {
		toSerialize["miscellaneous"] = o.Miscellaneous
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberBestiary struct {
	value *SkyBlockProfileMemberBestiary
	isSet bool
}

func (v NullableSkyBlockProfileMemberBestiary) Get() *SkyBlockProfileMemberBestiary {
	return v.value
}

func (v *NullableSkyBlockProfileMemberBestiary) Set(val *SkyBlockProfileMemberBestiary) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberBestiary) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberBestiary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberBestiary(val *SkyBlockProfileMemberBestiary) *NullableSkyBlockProfileMemberBestiary {
	return &NullableSkyBlockProfileMemberBestiary{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberBestiary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberBestiary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
