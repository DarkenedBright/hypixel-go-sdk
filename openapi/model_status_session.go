/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StatusSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusSession{}

// StatusSession struct for StatusSession
type StatusSession struct {
	GameType *string `json:"gameType,omitempty"`
	Map      *string `json:"map,omitempty"`
	Mode     *string `json:"mode,omitempty"`
	Online   bool    `json:"online"`
}

type _StatusSession StatusSession

// NewStatusSession instantiates a new StatusSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusSession(online bool) *StatusSession {
	this := StatusSession{}
	this.Online = online
	return &this
}

// NewStatusSessionWithDefaults instantiates a new StatusSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusSessionWithDefaults() *StatusSession {
	this := StatusSession{}
	return &this
}

// GetGameType returns the GameType field value if set, zero value otherwise.
func (o *StatusSession) GetGameType() string {
	if o == nil || IsNil(o.GameType) {
		var ret string
		return ret
	}
	return *o.GameType
}

// GetGameTypeOk returns a tuple with the GameType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusSession) GetGameTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GameType) {
		return nil, false
	}
	return o.GameType, true
}

// HasGameType returns a boolean if a field has been set.
func (o *StatusSession) HasGameType() bool {
	if o != nil && !IsNil(o.GameType) {
		return true
	}

	return false
}

// SetGameType gets a reference to the given string and assigns it to the GameType field.
func (o *StatusSession) SetGameType(v string) {
	o.GameType = &v
}

// GetMap returns the Map field value if set, zero value otherwise.
func (o *StatusSession) GetMap() string {
	if o == nil || IsNil(o.Map) {
		var ret string
		return ret
	}
	return *o.Map
}

// GetMapOk returns a tuple with the Map field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusSession) GetMapOk() (*string, bool) {
	if o == nil || IsNil(o.Map) {
		return nil, false
	}
	return o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *StatusSession) HasMap() bool {
	if o != nil && !IsNil(o.Map) {
		return true
	}

	return false
}

// SetMap gets a reference to the given string and assigns it to the Map field.
func (o *StatusSession) SetMap(v string) {
	o.Map = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *StatusSession) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusSession) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *StatusSession) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *StatusSession) SetMode(v string) {
	o.Mode = &v
}

// GetOnline returns the Online field value
func (o *StatusSession) GetOnline() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Online
}

// GetOnlineOk returns a tuple with the Online field value
// and a boolean to check if the value has been set.
func (o *StatusSession) GetOnlineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Online, true
}

// SetOnline sets field value
func (o *StatusSession) SetOnline(v bool) {
	o.Online = v
}

func (o StatusSession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GameType) {
		toSerialize["gameType"] = o.GameType
	}
	if !IsNil(o.Map) {
		toSerialize["map"] = o.Map
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	toSerialize["online"] = o.Online
	return toSerialize, nil
}

func (o *StatusSession) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"online",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatusSession := _StatusSession{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatusSession)

	if err != nil {
		return err
	}

	*o = StatusSession(varStatusSession)

	return err
}

type NullableStatusSession struct {
	value *StatusSession
	isSet bool
}

func (v NullableStatusSession) Get() *StatusSession {
	return v.value
}

func (v *NullableStatusSession) Set(val *StatusSession) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusSession) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusSession(val *StatusSession) *NullableStatusSession {
	return &NullableStatusSession{value: val, isSet: true}
}

func (v NullableStatusSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
