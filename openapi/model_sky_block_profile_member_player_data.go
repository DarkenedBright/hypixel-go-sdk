/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberPlayerData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberPlayerData{}

// SkyBlockProfileMemberPlayerData struct for SkyBlockProfileMemberPlayerData
type SkyBlockProfileMemberPlayerData struct {
	AchievementSpawnedIslandTypes []SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner `json:"achievement_spawned_island_types,omitempty"`
	ActiveEffects                 []SkyBlockProfileMemberPlayerDataActiveEffect                       `json:"active_effects,omitempty"`
	CraftedGenerators             []SkyBlockProfileMemberPlayerDataCraftedGeneratorsInner             `json:"crafted_generators,omitempty"`
	DeathCount                    *int64                                                              `json:"death_count,omitempty"`
	DisabledPotionEffects         []SkyBlockProfileMemberPlayerDataActiveEffectType                   `json:"disabled_potion_effects,omitempty"`
	Experience                    *SkyBlockProfileMemberPlayerDataExperience                          `json:"experience,omitempty"`
	FastestTargetPractice         *float64                                                            `json:"fastest_target_practice,omitempty"`
	FishingTreasureCaught         *int64                                                              `json:"fishing_treasure_caught,omitempty"`
	LastDeath                     *int64                                                              `json:"last_death,omitempty"`
	PausedEffects                 []SkyBlockProfileMemberPlayerDataActiveEffect                       `json:"paused_effects,omitempty"`
	Perks                         *SkyBlockProfileMemberPlayerDataPerks                               `json:"perks,omitempty"`
	ReaperPeppersEaten            *int64                                                              `json:"reaper_peppers_eaten,omitempty"`
	TempStatBuffs                 []SkyBlockProfileMemberPlayerDataTempStatBuff                       `json:"temp_stat_buffs,omitempty"`
	UnlockedCollTiers             []SkyBlockProfileMemberPlayerDataUnlockedCollTiersInner             `json:"unlocked_coll_tiers,omitempty"`
	VisitedModes                  []SkyBlockProfileMemberPlayerDataVisitedModesInner                  `json:"visited_modes,omitempty"`
	VisitedZones                  []SkyBlockProfileMemberPlayerDataVisitedZonesInner                  `json:"visited_zones,omitempty"`
}

// NewSkyBlockProfileMemberPlayerData instantiates a new SkyBlockProfileMemberPlayerData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberPlayerData() *SkyBlockProfileMemberPlayerData {
	this := SkyBlockProfileMemberPlayerData{}
	return &this
}

// NewSkyBlockProfileMemberPlayerDataWithDefaults instantiates a new SkyBlockProfileMemberPlayerData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberPlayerDataWithDefaults() *SkyBlockProfileMemberPlayerData {
	this := SkyBlockProfileMemberPlayerData{}
	return &this
}

// GetAchievementSpawnedIslandTypes returns the AchievementSpawnedIslandTypes field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetAchievementSpawnedIslandTypes() []SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner {
	if o == nil || IsNil(o.AchievementSpawnedIslandTypes) {
		var ret []SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner
		return ret
	}
	return o.AchievementSpawnedIslandTypes
}

// GetAchievementSpawnedIslandTypesOk returns a tuple with the AchievementSpawnedIslandTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetAchievementSpawnedIslandTypesOk() ([]SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner, bool) {
	if o == nil || IsNil(o.AchievementSpawnedIslandTypes) {
		return nil, false
	}
	return o.AchievementSpawnedIslandTypes, true
}

// HasAchievementSpawnedIslandTypes returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasAchievementSpawnedIslandTypes() bool {
	if o != nil && !IsNil(o.AchievementSpawnedIslandTypes) {
		return true
	}

	return false
}

// SetAchievementSpawnedIslandTypes gets a reference to the given []SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner and assigns it to the AchievementSpawnedIslandTypes field.
func (o *SkyBlockProfileMemberPlayerData) SetAchievementSpawnedIslandTypes(v []SkyBlockProfileMemberPlayerDataAchievementSpawnedIslandTypesInner) {
	o.AchievementSpawnedIslandTypes = v
}

// GetActiveEffects returns the ActiveEffects field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetActiveEffects() []SkyBlockProfileMemberPlayerDataActiveEffect {
	if o == nil || IsNil(o.ActiveEffects) {
		var ret []SkyBlockProfileMemberPlayerDataActiveEffect
		return ret
	}
	return o.ActiveEffects
}

// GetActiveEffectsOk returns a tuple with the ActiveEffects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetActiveEffectsOk() ([]SkyBlockProfileMemberPlayerDataActiveEffect, bool) {
	if o == nil || IsNil(o.ActiveEffects) {
		return nil, false
	}
	return o.ActiveEffects, true
}

// HasActiveEffects returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasActiveEffects() bool {
	if o != nil && !IsNil(o.ActiveEffects) {
		return true
	}

	return false
}

// SetActiveEffects gets a reference to the given []SkyBlockProfileMemberPlayerDataActiveEffect and assigns it to the ActiveEffects field.
func (o *SkyBlockProfileMemberPlayerData) SetActiveEffects(v []SkyBlockProfileMemberPlayerDataActiveEffect) {
	o.ActiveEffects = v
}

// GetCraftedGenerators returns the CraftedGenerators field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetCraftedGenerators() []SkyBlockProfileMemberPlayerDataCraftedGeneratorsInner {
	if o == nil || IsNil(o.CraftedGenerators) {
		var ret []SkyBlockProfileMemberPlayerDataCraftedGeneratorsInner
		return ret
	}
	return o.CraftedGenerators
}

// GetCraftedGeneratorsOk returns a tuple with the CraftedGenerators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetCraftedGeneratorsOk() ([]SkyBlockProfileMemberPlayerDataCraftedGeneratorsInner, bool) {
	if o == nil || IsNil(o.CraftedGenerators) {
		return nil, false
	}
	return o.CraftedGenerators, true
}

// HasCraftedGenerators returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasCraftedGenerators() bool {
	if o != nil && !IsNil(o.CraftedGenerators) {
		return true
	}

	return false
}

// SetCraftedGenerators gets a reference to the given []SkyBlockProfileMemberPlayerDataCraftedGeneratorsInner and assigns it to the CraftedGenerators field.
func (o *SkyBlockProfileMemberPlayerData) SetCraftedGenerators(v []SkyBlockProfileMemberPlayerDataCraftedGeneratorsInner) {
	o.CraftedGenerators = v
}

// GetDeathCount returns the DeathCount field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetDeathCount() int64 {
	if o == nil || IsNil(o.DeathCount) {
		var ret int64
		return ret
	}
	return *o.DeathCount
}

// GetDeathCountOk returns a tuple with the DeathCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetDeathCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DeathCount) {
		return nil, false
	}
	return o.DeathCount, true
}

// HasDeathCount returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasDeathCount() bool {
	if o != nil && !IsNil(o.DeathCount) {
		return true
	}

	return false
}

// SetDeathCount gets a reference to the given int64 and assigns it to the DeathCount field.
func (o *SkyBlockProfileMemberPlayerData) SetDeathCount(v int64) {
	o.DeathCount = &v
}

// GetDisabledPotionEffects returns the DisabledPotionEffects field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetDisabledPotionEffects() []SkyBlockProfileMemberPlayerDataActiveEffectType {
	if o == nil || IsNil(o.DisabledPotionEffects) {
		var ret []SkyBlockProfileMemberPlayerDataActiveEffectType
		return ret
	}
	return o.DisabledPotionEffects
}

// GetDisabledPotionEffectsOk returns a tuple with the DisabledPotionEffects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetDisabledPotionEffectsOk() ([]SkyBlockProfileMemberPlayerDataActiveEffectType, bool) {
	if o == nil || IsNil(o.DisabledPotionEffects) {
		return nil, false
	}
	return o.DisabledPotionEffects, true
}

// HasDisabledPotionEffects returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasDisabledPotionEffects() bool {
	if o != nil && !IsNil(o.DisabledPotionEffects) {
		return true
	}

	return false
}

// SetDisabledPotionEffects gets a reference to the given []SkyBlockProfileMemberPlayerDataActiveEffectType and assigns it to the DisabledPotionEffects field.
func (o *SkyBlockProfileMemberPlayerData) SetDisabledPotionEffects(v []SkyBlockProfileMemberPlayerDataActiveEffectType) {
	o.DisabledPotionEffects = v
}

// GetExperience returns the Experience field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetExperience() SkyBlockProfileMemberPlayerDataExperience {
	if o == nil || IsNil(o.Experience) {
		var ret SkyBlockProfileMemberPlayerDataExperience
		return ret
	}
	return *o.Experience
}

// GetExperienceOk returns a tuple with the Experience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetExperienceOk() (*SkyBlockProfileMemberPlayerDataExperience, bool) {
	if o == nil || IsNil(o.Experience) {
		return nil, false
	}
	return o.Experience, true
}

// HasExperience returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasExperience() bool {
	if o != nil && !IsNil(o.Experience) {
		return true
	}

	return false
}

// SetExperience gets a reference to the given SkyBlockProfileMemberPlayerDataExperience and assigns it to the Experience field.
func (o *SkyBlockProfileMemberPlayerData) SetExperience(v SkyBlockProfileMemberPlayerDataExperience) {
	o.Experience = &v
}

// GetFastestTargetPractice returns the FastestTargetPractice field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetFastestTargetPractice() float64 {
	if o == nil || IsNil(o.FastestTargetPractice) {
		var ret float64
		return ret
	}
	return *o.FastestTargetPractice
}

// GetFastestTargetPracticeOk returns a tuple with the FastestTargetPractice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetFastestTargetPracticeOk() (*float64, bool) {
	if o == nil || IsNil(o.FastestTargetPractice) {
		return nil, false
	}
	return o.FastestTargetPractice, true
}

// HasFastestTargetPractice returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasFastestTargetPractice() bool {
	if o != nil && !IsNil(o.FastestTargetPractice) {
		return true
	}

	return false
}

// SetFastestTargetPractice gets a reference to the given float64 and assigns it to the FastestTargetPractice field.
func (o *SkyBlockProfileMemberPlayerData) SetFastestTargetPractice(v float64) {
	o.FastestTargetPractice = &v
}

// GetFishingTreasureCaught returns the FishingTreasureCaught field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetFishingTreasureCaught() int64 {
	if o == nil || IsNil(o.FishingTreasureCaught) {
		var ret int64
		return ret
	}
	return *o.FishingTreasureCaught
}

// GetFishingTreasureCaughtOk returns a tuple with the FishingTreasureCaught field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetFishingTreasureCaughtOk() (*int64, bool) {
	if o == nil || IsNil(o.FishingTreasureCaught) {
		return nil, false
	}
	return o.FishingTreasureCaught, true
}

// HasFishingTreasureCaught returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasFishingTreasureCaught() bool {
	if o != nil && !IsNil(o.FishingTreasureCaught) {
		return true
	}

	return false
}

// SetFishingTreasureCaught gets a reference to the given int64 and assigns it to the FishingTreasureCaught field.
func (o *SkyBlockProfileMemberPlayerData) SetFishingTreasureCaught(v int64) {
	o.FishingTreasureCaught = &v
}

// GetLastDeath returns the LastDeath field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetLastDeath() int64 {
	if o == nil || IsNil(o.LastDeath) {
		var ret int64
		return ret
	}
	return *o.LastDeath
}

// GetLastDeathOk returns a tuple with the LastDeath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetLastDeathOk() (*int64, bool) {
	if o == nil || IsNil(o.LastDeath) {
		return nil, false
	}
	return o.LastDeath, true
}

// HasLastDeath returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasLastDeath() bool {
	if o != nil && !IsNil(o.LastDeath) {
		return true
	}

	return false
}

// SetLastDeath gets a reference to the given int64 and assigns it to the LastDeath field.
func (o *SkyBlockProfileMemberPlayerData) SetLastDeath(v int64) {
	o.LastDeath = &v
}

// GetPausedEffects returns the PausedEffects field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetPausedEffects() []SkyBlockProfileMemberPlayerDataActiveEffect {
	if o == nil || IsNil(o.PausedEffects) {
		var ret []SkyBlockProfileMemberPlayerDataActiveEffect
		return ret
	}
	return o.PausedEffects
}

// GetPausedEffectsOk returns a tuple with the PausedEffects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetPausedEffectsOk() ([]SkyBlockProfileMemberPlayerDataActiveEffect, bool) {
	if o == nil || IsNil(o.PausedEffects) {
		return nil, false
	}
	return o.PausedEffects, true
}

// HasPausedEffects returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasPausedEffects() bool {
	if o != nil && !IsNil(o.PausedEffects) {
		return true
	}

	return false
}

// SetPausedEffects gets a reference to the given []SkyBlockProfileMemberPlayerDataActiveEffect and assigns it to the PausedEffects field.
func (o *SkyBlockProfileMemberPlayerData) SetPausedEffects(v []SkyBlockProfileMemberPlayerDataActiveEffect) {
	o.PausedEffects = v
}

// GetPerks returns the Perks field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetPerks() SkyBlockProfileMemberPlayerDataPerks {
	if o == nil || IsNil(o.Perks) {
		var ret SkyBlockProfileMemberPlayerDataPerks
		return ret
	}
	return *o.Perks
}

// GetPerksOk returns a tuple with the Perks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetPerksOk() (*SkyBlockProfileMemberPlayerDataPerks, bool) {
	if o == nil || IsNil(o.Perks) {
		return nil, false
	}
	return o.Perks, true
}

// HasPerks returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasPerks() bool {
	if o != nil && !IsNil(o.Perks) {
		return true
	}

	return false
}

// SetPerks gets a reference to the given SkyBlockProfileMemberPlayerDataPerks and assigns it to the Perks field.
func (o *SkyBlockProfileMemberPlayerData) SetPerks(v SkyBlockProfileMemberPlayerDataPerks) {
	o.Perks = &v
}

// GetReaperPeppersEaten returns the ReaperPeppersEaten field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetReaperPeppersEaten() int64 {
	if o == nil || IsNil(o.ReaperPeppersEaten) {
		var ret int64
		return ret
	}
	return *o.ReaperPeppersEaten
}

// GetReaperPeppersEatenOk returns a tuple with the ReaperPeppersEaten field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetReaperPeppersEatenOk() (*int64, bool) {
	if o == nil || IsNil(o.ReaperPeppersEaten) {
		return nil, false
	}
	return o.ReaperPeppersEaten, true
}

// HasReaperPeppersEaten returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasReaperPeppersEaten() bool {
	if o != nil && !IsNil(o.ReaperPeppersEaten) {
		return true
	}

	return false
}

// SetReaperPeppersEaten gets a reference to the given int64 and assigns it to the ReaperPeppersEaten field.
func (o *SkyBlockProfileMemberPlayerData) SetReaperPeppersEaten(v int64) {
	o.ReaperPeppersEaten = &v
}

// GetTempStatBuffs returns the TempStatBuffs field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetTempStatBuffs() []SkyBlockProfileMemberPlayerDataTempStatBuff {
	if o == nil || IsNil(o.TempStatBuffs) {
		var ret []SkyBlockProfileMemberPlayerDataTempStatBuff
		return ret
	}
	return o.TempStatBuffs
}

// GetTempStatBuffsOk returns a tuple with the TempStatBuffs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetTempStatBuffsOk() ([]SkyBlockProfileMemberPlayerDataTempStatBuff, bool) {
	if o == nil || IsNil(o.TempStatBuffs) {
		return nil, false
	}
	return o.TempStatBuffs, true
}

// HasTempStatBuffs returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasTempStatBuffs() bool {
	if o != nil && !IsNil(o.TempStatBuffs) {
		return true
	}

	return false
}

// SetTempStatBuffs gets a reference to the given []SkyBlockProfileMemberPlayerDataTempStatBuff and assigns it to the TempStatBuffs field.
func (o *SkyBlockProfileMemberPlayerData) SetTempStatBuffs(v []SkyBlockProfileMemberPlayerDataTempStatBuff) {
	o.TempStatBuffs = v
}

// GetUnlockedCollTiers returns the UnlockedCollTiers field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetUnlockedCollTiers() []SkyBlockProfileMemberPlayerDataUnlockedCollTiersInner {
	if o == nil || IsNil(o.UnlockedCollTiers) {
		var ret []SkyBlockProfileMemberPlayerDataUnlockedCollTiersInner
		return ret
	}
	return o.UnlockedCollTiers
}

// GetUnlockedCollTiersOk returns a tuple with the UnlockedCollTiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetUnlockedCollTiersOk() ([]SkyBlockProfileMemberPlayerDataUnlockedCollTiersInner, bool) {
	if o == nil || IsNil(o.UnlockedCollTiers) {
		return nil, false
	}
	return o.UnlockedCollTiers, true
}

// HasUnlockedCollTiers returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasUnlockedCollTiers() bool {
	if o != nil && !IsNil(o.UnlockedCollTiers) {
		return true
	}

	return false
}

// SetUnlockedCollTiers gets a reference to the given []SkyBlockProfileMemberPlayerDataUnlockedCollTiersInner and assigns it to the UnlockedCollTiers field.
func (o *SkyBlockProfileMemberPlayerData) SetUnlockedCollTiers(v []SkyBlockProfileMemberPlayerDataUnlockedCollTiersInner) {
	o.UnlockedCollTiers = v
}

// GetVisitedModes returns the VisitedModes field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetVisitedModes() []SkyBlockProfileMemberPlayerDataVisitedModesInner {
	if o == nil || IsNil(o.VisitedModes) {
		var ret []SkyBlockProfileMemberPlayerDataVisitedModesInner
		return ret
	}
	return o.VisitedModes
}

// GetVisitedModesOk returns a tuple with the VisitedModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetVisitedModesOk() ([]SkyBlockProfileMemberPlayerDataVisitedModesInner, bool) {
	if o == nil || IsNil(o.VisitedModes) {
		return nil, false
	}
	return o.VisitedModes, true
}

// HasVisitedModes returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasVisitedModes() bool {
	if o != nil && !IsNil(o.VisitedModes) {
		return true
	}

	return false
}

// SetVisitedModes gets a reference to the given []SkyBlockProfileMemberPlayerDataVisitedModesInner and assigns it to the VisitedModes field.
func (o *SkyBlockProfileMemberPlayerData) SetVisitedModes(v []SkyBlockProfileMemberPlayerDataVisitedModesInner) {
	o.VisitedModes = v
}

// GetVisitedZones returns the VisitedZones field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerData) GetVisitedZones() []SkyBlockProfileMemberPlayerDataVisitedZonesInner {
	if o == nil || IsNil(o.VisitedZones) {
		var ret []SkyBlockProfileMemberPlayerDataVisitedZonesInner
		return ret
	}
	return o.VisitedZones
}

// GetVisitedZonesOk returns a tuple with the VisitedZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerData) GetVisitedZonesOk() ([]SkyBlockProfileMemberPlayerDataVisitedZonesInner, bool) {
	if o == nil || IsNil(o.VisitedZones) {
		return nil, false
	}
	return o.VisitedZones, true
}

// HasVisitedZones returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerData) HasVisitedZones() bool {
	if o != nil && !IsNil(o.VisitedZones) {
		return true
	}

	return false
}

// SetVisitedZones gets a reference to the given []SkyBlockProfileMemberPlayerDataVisitedZonesInner and assigns it to the VisitedZones field.
func (o *SkyBlockProfileMemberPlayerData) SetVisitedZones(v []SkyBlockProfileMemberPlayerDataVisitedZonesInner) {
	o.VisitedZones = v
}

func (o SkyBlockProfileMemberPlayerData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberPlayerData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AchievementSpawnedIslandTypes) {
		toSerialize["achievement_spawned_island_types"] = o.AchievementSpawnedIslandTypes
	}
	if !IsNil(o.ActiveEffects) {
		toSerialize["active_effects"] = o.ActiveEffects
	}
	if !IsNil(o.CraftedGenerators) {
		toSerialize["crafted_generators"] = o.CraftedGenerators
	}
	if !IsNil(o.DeathCount) {
		toSerialize["death_count"] = o.DeathCount
	}
	if !IsNil(o.DisabledPotionEffects) {
		toSerialize["disabled_potion_effects"] = o.DisabledPotionEffects
	}
	if !IsNil(o.Experience) {
		toSerialize["experience"] = o.Experience
	}
	if !IsNil(o.FastestTargetPractice) {
		toSerialize["fastest_target_practice"] = o.FastestTargetPractice
	}
	if !IsNil(o.FishingTreasureCaught) {
		toSerialize["fishing_treasure_caught"] = o.FishingTreasureCaught
	}
	if !IsNil(o.LastDeath) {
		toSerialize["last_death"] = o.LastDeath
	}
	if !IsNil(o.PausedEffects) {
		toSerialize["paused_effects"] = o.PausedEffects
	}
	if !IsNil(o.Perks) {
		toSerialize["perks"] = o.Perks
	}
	if !IsNil(o.ReaperPeppersEaten) {
		toSerialize["reaper_peppers_eaten"] = o.ReaperPeppersEaten
	}
	if !IsNil(o.TempStatBuffs) {
		toSerialize["temp_stat_buffs"] = o.TempStatBuffs
	}
	if !IsNil(o.UnlockedCollTiers) {
		toSerialize["unlocked_coll_tiers"] = o.UnlockedCollTiers
	}
	if !IsNil(o.VisitedModes) {
		toSerialize["visited_modes"] = o.VisitedModes
	}
	if !IsNil(o.VisitedZones) {
		toSerialize["visited_zones"] = o.VisitedZones
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberPlayerData struct {
	value *SkyBlockProfileMemberPlayerData
	isSet bool
}

func (v NullableSkyBlockProfileMemberPlayerData) Get() *SkyBlockProfileMemberPlayerData {
	return v.value
}

func (v *NullableSkyBlockProfileMemberPlayerData) Set(val *SkyBlockProfileMemberPlayerData) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberPlayerData) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberPlayerData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberPlayerData(val *SkyBlockProfileMemberPlayerData) *NullableSkyBlockProfileMemberPlayerData {
	return &NullableSkyBlockProfileMemberPlayerData{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberPlayerData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberPlayerData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
