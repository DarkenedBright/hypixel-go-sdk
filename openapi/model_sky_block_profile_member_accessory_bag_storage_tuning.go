/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberAccessoryBagStorageTuning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberAccessoryBagStorageTuning{}

// SkyBlockProfileMemberAccessoryBagStorageTuning struct for SkyBlockProfileMemberAccessoryBagStorageTuning
type SkyBlockProfileMemberAccessoryBagStorageTuning struct {
	HighestUnlockedSlot NullableInt64                                              `json:"highest_unlocked_slot,omitempty"`
	Slot0               NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot `json:"slot_0,omitempty"`
	Slot1               NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot `json:"slot_1,omitempty"`
	Slot2               NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot `json:"slot_2,omitempty"`
	Slot3               NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot `json:"slot_3,omitempty"`
	Slot4               NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot `json:"slot_4,omitempty"`
}

// NewSkyBlockProfileMemberAccessoryBagStorageTuning instantiates a new SkyBlockProfileMemberAccessoryBagStorageTuning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberAccessoryBagStorageTuning() *SkyBlockProfileMemberAccessoryBagStorageTuning {
	this := SkyBlockProfileMemberAccessoryBagStorageTuning{}
	return &this
}

// NewSkyBlockProfileMemberAccessoryBagStorageTuningWithDefaults instantiates a new SkyBlockProfileMemberAccessoryBagStorageTuning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberAccessoryBagStorageTuningWithDefaults() *SkyBlockProfileMemberAccessoryBagStorageTuning {
	this := SkyBlockProfileMemberAccessoryBagStorageTuning{}
	return &this
}

// GetHighestUnlockedSlot returns the HighestUnlockedSlot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetHighestUnlockedSlot() int64 {
	if o == nil || IsNil(o.HighestUnlockedSlot.Get()) {
		var ret int64
		return ret
	}
	return *o.HighestUnlockedSlot.Get()
}

// GetHighestUnlockedSlotOk returns a tuple with the HighestUnlockedSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetHighestUnlockedSlotOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HighestUnlockedSlot.Get(), o.HighestUnlockedSlot.IsSet()
}

// HasHighestUnlockedSlot returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) HasHighestUnlockedSlot() bool {
	if o != nil && o.HighestUnlockedSlot.IsSet() {
		return true
	}

	return false
}

// SetHighestUnlockedSlot gets a reference to the given NullableInt64 and assigns it to the HighestUnlockedSlot field.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetHighestUnlockedSlot(v int64) {
	o.HighestUnlockedSlot.Set(&v)
}

// SetHighestUnlockedSlotNil sets the value for HighestUnlockedSlot to be an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetHighestUnlockedSlotNil() {
	o.HighestUnlockedSlot.Set(nil)
}

// UnsetHighestUnlockedSlot ensures that no value is present for HighestUnlockedSlot, not even an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) UnsetHighestUnlockedSlot() {
	o.HighestUnlockedSlot.Unset()
}

// GetSlot0 returns the Slot0 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot0() SkyBlockProfileMemberAccessoryBagStorageTuningSlot {
	if o == nil || IsNil(o.Slot0.Get()) {
		var ret SkyBlockProfileMemberAccessoryBagStorageTuningSlot
		return ret
	}
	return *o.Slot0.Get()
}

// GetSlot0Ok returns a tuple with the Slot0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot0Ok() (*SkyBlockProfileMemberAccessoryBagStorageTuningSlot, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slot0.Get(), o.Slot0.IsSet()
}

// HasSlot0 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) HasSlot0() bool {
	if o != nil && o.Slot0.IsSet() {
		return true
	}

	return false
}

// SetSlot0 gets a reference to the given NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot and assigns it to the Slot0 field.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot0(v SkyBlockProfileMemberAccessoryBagStorageTuningSlot) {
	o.Slot0.Set(&v)
}

// SetSlot0Nil sets the value for Slot0 to be an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot0Nil() {
	o.Slot0.Set(nil)
}

// UnsetSlot0 ensures that no value is present for Slot0, not even an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) UnsetSlot0() {
	o.Slot0.Unset()
}

// GetSlot1 returns the Slot1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot1() SkyBlockProfileMemberAccessoryBagStorageTuningSlot {
	if o == nil || IsNil(o.Slot1.Get()) {
		var ret SkyBlockProfileMemberAccessoryBagStorageTuningSlot
		return ret
	}
	return *o.Slot1.Get()
}

// GetSlot1Ok returns a tuple with the Slot1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot1Ok() (*SkyBlockProfileMemberAccessoryBagStorageTuningSlot, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slot1.Get(), o.Slot1.IsSet()
}

// HasSlot1 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) HasSlot1() bool {
	if o != nil && o.Slot1.IsSet() {
		return true
	}

	return false
}

// SetSlot1 gets a reference to the given NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot and assigns it to the Slot1 field.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot1(v SkyBlockProfileMemberAccessoryBagStorageTuningSlot) {
	o.Slot1.Set(&v)
}

// SetSlot1Nil sets the value for Slot1 to be an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot1Nil() {
	o.Slot1.Set(nil)
}

// UnsetSlot1 ensures that no value is present for Slot1, not even an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) UnsetSlot1() {
	o.Slot1.Unset()
}

// GetSlot2 returns the Slot2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot2() SkyBlockProfileMemberAccessoryBagStorageTuningSlot {
	if o == nil || IsNil(o.Slot2.Get()) {
		var ret SkyBlockProfileMemberAccessoryBagStorageTuningSlot
		return ret
	}
	return *o.Slot2.Get()
}

// GetSlot2Ok returns a tuple with the Slot2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot2Ok() (*SkyBlockProfileMemberAccessoryBagStorageTuningSlot, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slot2.Get(), o.Slot2.IsSet()
}

// HasSlot2 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) HasSlot2() bool {
	if o != nil && o.Slot2.IsSet() {
		return true
	}

	return false
}

// SetSlot2 gets a reference to the given NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot and assigns it to the Slot2 field.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot2(v SkyBlockProfileMemberAccessoryBagStorageTuningSlot) {
	o.Slot2.Set(&v)
}

// SetSlot2Nil sets the value for Slot2 to be an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot2Nil() {
	o.Slot2.Set(nil)
}

// UnsetSlot2 ensures that no value is present for Slot2, not even an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) UnsetSlot2() {
	o.Slot2.Unset()
}

// GetSlot3 returns the Slot3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot3() SkyBlockProfileMemberAccessoryBagStorageTuningSlot {
	if o == nil || IsNil(o.Slot3.Get()) {
		var ret SkyBlockProfileMemberAccessoryBagStorageTuningSlot
		return ret
	}
	return *o.Slot3.Get()
}

// GetSlot3Ok returns a tuple with the Slot3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot3Ok() (*SkyBlockProfileMemberAccessoryBagStorageTuningSlot, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slot3.Get(), o.Slot3.IsSet()
}

// HasSlot3 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) HasSlot3() bool {
	if o != nil && o.Slot3.IsSet() {
		return true
	}

	return false
}

// SetSlot3 gets a reference to the given NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot and assigns it to the Slot3 field.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot3(v SkyBlockProfileMemberAccessoryBagStorageTuningSlot) {
	o.Slot3.Set(&v)
}

// SetSlot3Nil sets the value for Slot3 to be an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot3Nil() {
	o.Slot3.Set(nil)
}

// UnsetSlot3 ensures that no value is present for Slot3, not even an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) UnsetSlot3() {
	o.Slot3.Unset()
}

// GetSlot4 returns the Slot4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot4() SkyBlockProfileMemberAccessoryBagStorageTuningSlot {
	if o == nil || IsNil(o.Slot4.Get()) {
		var ret SkyBlockProfileMemberAccessoryBagStorageTuningSlot
		return ret
	}
	return *o.Slot4.Get()
}

// GetSlot4Ok returns a tuple with the Slot4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) GetSlot4Ok() (*SkyBlockProfileMemberAccessoryBagStorageTuningSlot, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slot4.Get(), o.Slot4.IsSet()
}

// HasSlot4 returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) HasSlot4() bool {
	if o != nil && o.Slot4.IsSet() {
		return true
	}

	return false
}

// SetSlot4 gets a reference to the given NullableSkyBlockProfileMemberAccessoryBagStorageTuningSlot and assigns it to the Slot4 field.
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot4(v SkyBlockProfileMemberAccessoryBagStorageTuningSlot) {
	o.Slot4.Set(&v)
}

// SetSlot4Nil sets the value for Slot4 to be an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) SetSlot4Nil() {
	o.Slot4.Set(nil)
}

// UnsetSlot4 ensures that no value is present for Slot4, not even an explicit nil
func (o *SkyBlockProfileMemberAccessoryBagStorageTuning) UnsetSlot4() {
	o.Slot4.Unset()
}

func (o SkyBlockProfileMemberAccessoryBagStorageTuning) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberAccessoryBagStorageTuning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HighestUnlockedSlot.IsSet() {
		toSerialize["highest_unlocked_slot"] = o.HighestUnlockedSlot.Get()
	}
	if o.Slot0.IsSet() {
		toSerialize["slot_0"] = o.Slot0.Get()
	}
	if o.Slot1.IsSet() {
		toSerialize["slot_1"] = o.Slot1.Get()
	}
	if o.Slot2.IsSet() {
		toSerialize["slot_2"] = o.Slot2.Get()
	}
	if o.Slot3.IsSet() {
		toSerialize["slot_3"] = o.Slot3.Get()
	}
	if o.Slot4.IsSet() {
		toSerialize["slot_4"] = o.Slot4.Get()
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberAccessoryBagStorageTuning struct {
	value *SkyBlockProfileMemberAccessoryBagStorageTuning
	isSet bool
}

func (v NullableSkyBlockProfileMemberAccessoryBagStorageTuning) Get() *SkyBlockProfileMemberAccessoryBagStorageTuning {
	return v.value
}

func (v *NullableSkyBlockProfileMemberAccessoryBagStorageTuning) Set(val *SkyBlockProfileMemberAccessoryBagStorageTuning) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberAccessoryBagStorageTuning) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberAccessoryBagStorageTuning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberAccessoryBagStorageTuning(val *SkyBlockProfileMemberAccessoryBagStorageTuning) *NullableSkyBlockProfileMemberAccessoryBagStorageTuning {
	return &NullableSkyBlockProfileMemberAccessoryBagStorageTuning{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberAccessoryBagStorageTuning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberAccessoryBagStorageTuning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
