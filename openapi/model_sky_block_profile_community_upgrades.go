/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockProfileCommunityUpgrades type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileCommunityUpgrades{}

// SkyBlockProfileCommunityUpgrades struct for SkyBlockProfileCommunityUpgrades
type SkyBlockProfileCommunityUpgrades struct {
	CurrentlyUpgrading *SkyBlockProfileCommunityUpgradesCurrentlyUpgrading `json:"currently_upgrading,omitempty"`
	UpgradeStates      []SkyBlockProfileCommunityUpgradesUpgradeState      `json:"upgrade_states"`
}

type _SkyBlockProfileCommunityUpgrades SkyBlockProfileCommunityUpgrades

// NewSkyBlockProfileCommunityUpgrades instantiates a new SkyBlockProfileCommunityUpgrades object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileCommunityUpgrades(upgradeStates []SkyBlockProfileCommunityUpgradesUpgradeState) *SkyBlockProfileCommunityUpgrades {
	this := SkyBlockProfileCommunityUpgrades{}
	this.UpgradeStates = upgradeStates
	return &this
}

// NewSkyBlockProfileCommunityUpgradesWithDefaults instantiates a new SkyBlockProfileCommunityUpgrades object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileCommunityUpgradesWithDefaults() *SkyBlockProfileCommunityUpgrades {
	this := SkyBlockProfileCommunityUpgrades{}
	return &this
}

// GetCurrentlyUpgrading returns the CurrentlyUpgrading field value if set, zero value otherwise.
func (o *SkyBlockProfileCommunityUpgrades) GetCurrentlyUpgrading() SkyBlockProfileCommunityUpgradesCurrentlyUpgrading {
	if o == nil || IsNil(o.CurrentlyUpgrading) {
		var ret SkyBlockProfileCommunityUpgradesCurrentlyUpgrading
		return ret
	}
	return *o.CurrentlyUpgrading
}

// GetCurrentlyUpgradingOk returns a tuple with the CurrentlyUpgrading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileCommunityUpgrades) GetCurrentlyUpgradingOk() (*SkyBlockProfileCommunityUpgradesCurrentlyUpgrading, bool) {
	if o == nil || IsNil(o.CurrentlyUpgrading) {
		return nil, false
	}
	return o.CurrentlyUpgrading, true
}

// HasCurrentlyUpgrading returns a boolean if a field has been set.
func (o *SkyBlockProfileCommunityUpgrades) HasCurrentlyUpgrading() bool {
	if o != nil && !IsNil(o.CurrentlyUpgrading) {
		return true
	}

	return false
}

// SetCurrentlyUpgrading gets a reference to the given SkyBlockProfileCommunityUpgradesCurrentlyUpgrading and assigns it to the CurrentlyUpgrading field.
func (o *SkyBlockProfileCommunityUpgrades) SetCurrentlyUpgrading(v SkyBlockProfileCommunityUpgradesCurrentlyUpgrading) {
	o.CurrentlyUpgrading = &v
}

// GetUpgradeStates returns the UpgradeStates field value
func (o *SkyBlockProfileCommunityUpgrades) GetUpgradeStates() []SkyBlockProfileCommunityUpgradesUpgradeState {
	if o == nil {
		var ret []SkyBlockProfileCommunityUpgradesUpgradeState
		return ret
	}

	return o.UpgradeStates
}

// GetUpgradeStatesOk returns a tuple with the UpgradeStates field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileCommunityUpgrades) GetUpgradeStatesOk() ([]SkyBlockProfileCommunityUpgradesUpgradeState, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpgradeStates, true
}

// SetUpgradeStates sets field value
func (o *SkyBlockProfileCommunityUpgrades) SetUpgradeStates(v []SkyBlockProfileCommunityUpgradesUpgradeState) {
	o.UpgradeStates = v
}

func (o SkyBlockProfileCommunityUpgrades) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileCommunityUpgrades) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentlyUpgrading) {
		toSerialize["currently_upgrading"] = o.CurrentlyUpgrading
	}
	toSerialize["upgrade_states"] = o.UpgradeStates
	return toSerialize, nil
}

func (o *SkyBlockProfileCommunityUpgrades) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"upgrade_states",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockProfileCommunityUpgrades := _SkyBlockProfileCommunityUpgrades{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockProfileCommunityUpgrades)

	if err != nil {
		return err
	}

	*o = SkyBlockProfileCommunityUpgrades(varSkyBlockProfileCommunityUpgrades)

	return err
}

type NullableSkyBlockProfileCommunityUpgrades struct {
	value *SkyBlockProfileCommunityUpgrades
	isSet bool
}

func (v NullableSkyBlockProfileCommunityUpgrades) Get() *SkyBlockProfileCommunityUpgrades {
	return v.value
}

func (v *NullableSkyBlockProfileCommunityUpgrades) Set(val *SkyBlockProfileCommunityUpgrades) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileCommunityUpgrades) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileCommunityUpgrades) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileCommunityUpgrades(val *SkyBlockProfileCommunityUpgrades) *NullableSkyBlockProfileCommunityUpgrades {
	return &NullableSkyBlockProfileCommunityUpgrades{value: val, isSet: true}
}

func (v NullableSkyBlockProfileCommunityUpgrades) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileCommunityUpgrades) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
