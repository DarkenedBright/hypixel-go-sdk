/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockFireSale type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockFireSale{}

// SkyBlockFireSale struct for SkyBlockFireSale
type SkyBlockFireSale struct {
	Amount int64  `json:"amount"`
	End    int64  `json:"end"`
	ItemId string `json:"item_id"`
	Price  int64  `json:"price"`
	Start  int64  `json:"start"`
}

type _SkyBlockFireSale SkyBlockFireSale

// NewSkyBlockFireSale instantiates a new SkyBlockFireSale object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockFireSale(amount int64, end int64, itemId string, price int64, start int64) *SkyBlockFireSale {
	this := SkyBlockFireSale{}
	this.Amount = amount
	this.End = end
	this.ItemId = itemId
	this.Price = price
	this.Start = start
	return &this
}

// NewSkyBlockFireSaleWithDefaults instantiates a new SkyBlockFireSale object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockFireSaleWithDefaults() *SkyBlockFireSale {
	this := SkyBlockFireSale{}
	return &this
}

// GetAmount returns the Amount field value
func (o *SkyBlockFireSale) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SkyBlockFireSale) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SkyBlockFireSale) SetAmount(v int64) {
	o.Amount = v
}

// GetEnd returns the End field value
func (o *SkyBlockFireSale) GetEnd() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *SkyBlockFireSale) GetEndOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *SkyBlockFireSale) SetEnd(v int64) {
	o.End = v
}

// GetItemId returns the ItemId field value
func (o *SkyBlockFireSale) GetItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *SkyBlockFireSale) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *SkyBlockFireSale) SetItemId(v string) {
	o.ItemId = v
}

// GetPrice returns the Price field value
func (o *SkyBlockFireSale) GetPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *SkyBlockFireSale) GetPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *SkyBlockFireSale) SetPrice(v int64) {
	o.Price = v
}

// GetStart returns the Start field value
func (o *SkyBlockFireSale) GetStart() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *SkyBlockFireSale) GetStartOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *SkyBlockFireSale) SetStart(v int64) {
	o.Start = v
}

func (o SkyBlockFireSale) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockFireSale) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["end"] = o.End
	toSerialize["item_id"] = o.ItemId
	toSerialize["price"] = o.Price
	toSerialize["start"] = o.Start
	return toSerialize, nil
}

func (o *SkyBlockFireSale) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"end",
		"item_id",
		"price",
		"start",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockFireSale := _SkyBlockFireSale{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockFireSale)

	if err != nil {
		return err
	}

	*o = SkyBlockFireSale(varSkyBlockFireSale)

	return err
}

type NullableSkyBlockFireSale struct {
	value *SkyBlockFireSale
	isSet bool
}

func (v NullableSkyBlockFireSale) Get() *SkyBlockFireSale {
	return v.value
}

func (v *NullableSkyBlockFireSale) Set(val *SkyBlockFireSale) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockFireSale) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockFireSale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockFireSale(val *SkyBlockFireSale) *NullableSkyBlockFireSale {
	return &NullableSkyBlockFireSale{value: val, isSet: true}
}

func (v NullableSkyBlockFireSale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockFireSale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
