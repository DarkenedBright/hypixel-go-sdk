/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockBingo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockBingo{}

// SkyBlockBingo struct for SkyBlockBingo
type SkyBlockBingo struct {
	Events  []SkyBlockBingoEvent `json:"events"`
	Success bool                 `json:"success"`
}

type _SkyBlockBingo SkyBlockBingo

// NewSkyBlockBingo instantiates a new SkyBlockBingo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockBingo(events []SkyBlockBingoEvent, success bool) *SkyBlockBingo {
	this := SkyBlockBingo{}
	this.Events = events
	this.Success = success
	return &this
}

// NewSkyBlockBingoWithDefaults instantiates a new SkyBlockBingo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockBingoWithDefaults() *SkyBlockBingo {
	this := SkyBlockBingo{}
	return &this
}

// GetEvents returns the Events field value
func (o *SkyBlockBingo) GetEvents() []SkyBlockBingoEvent {
	if o == nil {
		var ret []SkyBlockBingoEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *SkyBlockBingo) GetEventsOk() ([]SkyBlockBingoEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *SkyBlockBingo) SetEvents(v []SkyBlockBingoEvent) {
	o.Events = v
}

// GetSuccess returns the Success field value
func (o *SkyBlockBingo) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *SkyBlockBingo) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *SkyBlockBingo) SetSuccess(v bool) {
	o.Success = v
}

func (o SkyBlockBingo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockBingo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	toSerialize["success"] = o.Success
	return toSerialize, nil
}

func (o *SkyBlockBingo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockBingo := _SkyBlockBingo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockBingo)

	if err != nil {
		return err
	}

	*o = SkyBlockBingo(varSkyBlockBingo)

	return err
}

type NullableSkyBlockBingo struct {
	value *SkyBlockBingo
	isSet bool
}

func (v NullableSkyBlockBingo) Get() *SkyBlockBingo {
	return v.value
}

func (v *NullableSkyBlockBingo) Set(val *SkyBlockBingo) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockBingo) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockBingo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockBingo(val *SkyBlockBingo) *NullableSkyBlockBingo {
	return &NullableSkyBlockBingo{value: val, isSet: true}
}

func (v NullableSkyBlockBingo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockBingo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
