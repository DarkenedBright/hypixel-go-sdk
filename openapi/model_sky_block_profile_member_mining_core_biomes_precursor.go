/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockProfileMemberMiningCoreBiomesPrecursor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberMiningCoreBiomesPrecursor{}

// SkyBlockProfileMemberMiningCoreBiomesPrecursor struct for SkyBlockProfileMemberMiningCoreBiomesPrecursor
type SkyBlockProfileMemberMiningCoreBiomesPrecursor struct {
	ClaimingWithPrecursorApparatus bool                                                                `json:"claiming_with_precursor_apparatus"`
	PartsDelivered                 []SkyBlockProfileMemberMiningCoreBiomesPrecursorPartsDeliveredInner `json:"parts_delivered,omitempty"`
	TalkedToProfessor              bool                                                                `json:"talked_to_professor"`
}

type _SkyBlockProfileMemberMiningCoreBiomesPrecursor SkyBlockProfileMemberMiningCoreBiomesPrecursor

// NewSkyBlockProfileMemberMiningCoreBiomesPrecursor instantiates a new SkyBlockProfileMemberMiningCoreBiomesPrecursor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberMiningCoreBiomesPrecursor(claimingWithPrecursorApparatus bool, talkedToProfessor bool) *SkyBlockProfileMemberMiningCoreBiomesPrecursor {
	this := SkyBlockProfileMemberMiningCoreBiomesPrecursor{}
	this.ClaimingWithPrecursorApparatus = claimingWithPrecursorApparatus
	this.TalkedToProfessor = talkedToProfessor
	return &this
}

// NewSkyBlockProfileMemberMiningCoreBiomesPrecursorWithDefaults instantiates a new SkyBlockProfileMemberMiningCoreBiomesPrecursor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberMiningCoreBiomesPrecursorWithDefaults() *SkyBlockProfileMemberMiningCoreBiomesPrecursor {
	this := SkyBlockProfileMemberMiningCoreBiomesPrecursor{}
	return &this
}

// GetClaimingWithPrecursorApparatus returns the ClaimingWithPrecursorApparatus field value
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) GetClaimingWithPrecursorApparatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ClaimingWithPrecursorApparatus
}

// GetClaimingWithPrecursorApparatusOk returns a tuple with the ClaimingWithPrecursorApparatus field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) GetClaimingWithPrecursorApparatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClaimingWithPrecursorApparatus, true
}

// SetClaimingWithPrecursorApparatus sets field value
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) SetClaimingWithPrecursorApparatus(v bool) {
	o.ClaimingWithPrecursorApparatus = v
}

// GetPartsDelivered returns the PartsDelivered field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) GetPartsDelivered() []SkyBlockProfileMemberMiningCoreBiomesPrecursorPartsDeliveredInner {
	if o == nil || IsNil(o.PartsDelivered) {
		var ret []SkyBlockProfileMemberMiningCoreBiomesPrecursorPartsDeliveredInner
		return ret
	}
	return o.PartsDelivered
}

// GetPartsDeliveredOk returns a tuple with the PartsDelivered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) GetPartsDeliveredOk() ([]SkyBlockProfileMemberMiningCoreBiomesPrecursorPartsDeliveredInner, bool) {
	if o == nil || IsNil(o.PartsDelivered) {
		return nil, false
	}
	return o.PartsDelivered, true
}

// HasPartsDelivered returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) HasPartsDelivered() bool {
	if o != nil && !IsNil(o.PartsDelivered) {
		return true
	}

	return false
}

// SetPartsDelivered gets a reference to the given []SkyBlockProfileMemberMiningCoreBiomesPrecursorPartsDeliveredInner and assigns it to the PartsDelivered field.
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) SetPartsDelivered(v []SkyBlockProfileMemberMiningCoreBiomesPrecursorPartsDeliveredInner) {
	o.PartsDelivered = v
}

// GetTalkedToProfessor returns the TalkedToProfessor field value
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) GetTalkedToProfessor() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TalkedToProfessor
}

// GetTalkedToProfessorOk returns a tuple with the TalkedToProfessor field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) GetTalkedToProfessorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TalkedToProfessor, true
}

// SetTalkedToProfessor sets field value
func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) SetTalkedToProfessor(v bool) {
	o.TalkedToProfessor = v
}

func (o SkyBlockProfileMemberMiningCoreBiomesPrecursor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberMiningCoreBiomesPrecursor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["claiming_with_precursor_apparatus"] = o.ClaimingWithPrecursorApparatus
	if !IsNil(o.PartsDelivered) {
		toSerialize["parts_delivered"] = o.PartsDelivered
	}
	toSerialize["talked_to_professor"] = o.TalkedToProfessor
	return toSerialize, nil
}

func (o *SkyBlockProfileMemberMiningCoreBiomesPrecursor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"claiming_with_precursor_apparatus",
		"talked_to_professor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockProfileMemberMiningCoreBiomesPrecursor := _SkyBlockProfileMemberMiningCoreBiomesPrecursor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockProfileMemberMiningCoreBiomesPrecursor)

	if err != nil {
		return err
	}

	*o = SkyBlockProfileMemberMiningCoreBiomesPrecursor(varSkyBlockProfileMemberMiningCoreBiomesPrecursor)

	return err
}

type NullableSkyBlockProfileMemberMiningCoreBiomesPrecursor struct {
	value *SkyBlockProfileMemberMiningCoreBiomesPrecursor
	isSet bool
}

func (v NullableSkyBlockProfileMemberMiningCoreBiomesPrecursor) Get() *SkyBlockProfileMemberMiningCoreBiomesPrecursor {
	return v.value
}

func (v *NullableSkyBlockProfileMemberMiningCoreBiomesPrecursor) Set(val *SkyBlockProfileMemberMiningCoreBiomesPrecursor) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberMiningCoreBiomesPrecursor) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberMiningCoreBiomesPrecursor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberMiningCoreBiomesPrecursor(val *SkyBlockProfileMemberMiningCoreBiomesPrecursor) *NullableSkyBlockProfileMemberMiningCoreBiomesPrecursor {
	return &NullableSkyBlockProfileMemberMiningCoreBiomesPrecursor{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberMiningCoreBiomesPrecursor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberMiningCoreBiomesPrecursor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
