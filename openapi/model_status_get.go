/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StatusGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusGet{}

// StatusGet struct for StatusGet
type StatusGet struct {
	Session StatusGetSession `json:"session"`
	Success bool             `json:"success"`
	Uuid    string           `json:"uuid"`
}

type _StatusGet StatusGet

// NewStatusGet instantiates a new StatusGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusGet(session StatusGetSession, success bool, uuid string) *StatusGet {
	this := StatusGet{}
	this.Session = session
	this.Success = success
	this.Uuid = uuid
	return &this
}

// NewStatusGetWithDefaults instantiates a new StatusGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusGetWithDefaults() *StatusGet {
	this := StatusGet{}
	return &this
}

// GetSession returns the Session field value
func (o *StatusGet) GetSession() StatusGetSession {
	if o == nil {
		var ret StatusGetSession
		return ret
	}

	return o.Session
}

// GetSessionOk returns a tuple with the Session field value
// and a boolean to check if the value has been set.
func (o *StatusGet) GetSessionOk() (*StatusGetSession, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Session, true
}

// SetSession sets field value
func (o *StatusGet) SetSession(v StatusGetSession) {
	o.Session = v
}

// GetSuccess returns the Success field value
func (o *StatusGet) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *StatusGet) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *StatusGet) SetSuccess(v bool) {
	o.Success = v
}

// GetUuid returns the Uuid field value
func (o *StatusGet) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *StatusGet) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *StatusGet) SetUuid(v string) {
	o.Uuid = v
}

func (o StatusGet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["session"] = o.Session
	toSerialize["success"] = o.Success
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *StatusGet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"session",
		"success",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatusGet := _StatusGet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatusGet)

	if err != nil {
		return err
	}

	*o = StatusGet(varStatusGet)

	return err
}

type NullableStatusGet struct {
	value *StatusGet
	isSet bool
}

func (v NullableStatusGet) Get() *StatusGet {
	return v.value
}

func (v *NullableStatusGet) Set(val *StatusGet) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusGet) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusGet(val *StatusGet) *NullableStatusGet {
	return &NullableStatusGet{value: val, isSet: true}
}

func (v NullableStatusGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
