/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockProfileMemberPlayerStatsMythosBurrowData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberPlayerStatsMythosBurrowData{}

// SkyBlockProfileMemberPlayerStatsMythosBurrowData struct for SkyBlockProfileMemberPlayerStatsMythosBurrowData
type SkyBlockProfileMemberPlayerStatsMythosBurrowData struct {
	COMMON    *float64 `json:"COMMON,omitempty"`
	EPIC      *float64 `json:"EPIC,omitempty"`
	LEGENDARY *float64 `json:"LEGENDARY,omitempty"`
	RARE      *float64 `json:"RARE,omitempty"`
	UNCOMMON  *float64 `json:"UNCOMMON,omitempty"`
	None      *float64 `json:"none,omitempty"`
	Null      *float64 `json:"null,omitempty"`
	Total     float64  `json:"total"`
}

type _SkyBlockProfileMemberPlayerStatsMythosBurrowData SkyBlockProfileMemberPlayerStatsMythosBurrowData

// NewSkyBlockProfileMemberPlayerStatsMythosBurrowData instantiates a new SkyBlockProfileMemberPlayerStatsMythosBurrowData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberPlayerStatsMythosBurrowData(total float64) *SkyBlockProfileMemberPlayerStatsMythosBurrowData {
	this := SkyBlockProfileMemberPlayerStatsMythosBurrowData{}
	this.Total = total
	return &this
}

// NewSkyBlockProfileMemberPlayerStatsMythosBurrowDataWithDefaults instantiates a new SkyBlockProfileMemberPlayerStatsMythosBurrowData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberPlayerStatsMythosBurrowDataWithDefaults() *SkyBlockProfileMemberPlayerStatsMythosBurrowData {
	this := SkyBlockProfileMemberPlayerStatsMythosBurrowData{}
	return &this
}

// GetCOMMON returns the COMMON field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetCOMMON() float64 {
	if o == nil || IsNil(o.COMMON) {
		var ret float64
		return ret
	}
	return *o.COMMON
}

// GetCOMMONOk returns a tuple with the COMMON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetCOMMONOk() (*float64, bool) {
	if o == nil || IsNil(o.COMMON) {
		return nil, false
	}
	return o.COMMON, true
}

// HasCOMMON returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) HasCOMMON() bool {
	if o != nil && !IsNil(o.COMMON) {
		return true
	}

	return false
}

// SetCOMMON gets a reference to the given float64 and assigns it to the COMMON field.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) SetCOMMON(v float64) {
	o.COMMON = &v
}

// GetEPIC returns the EPIC field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetEPIC() float64 {
	if o == nil || IsNil(o.EPIC) {
		var ret float64
		return ret
	}
	return *o.EPIC
}

// GetEPICOk returns a tuple with the EPIC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetEPICOk() (*float64, bool) {
	if o == nil || IsNil(o.EPIC) {
		return nil, false
	}
	return o.EPIC, true
}

// HasEPIC returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) HasEPIC() bool {
	if o != nil && !IsNil(o.EPIC) {
		return true
	}

	return false
}

// SetEPIC gets a reference to the given float64 and assigns it to the EPIC field.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) SetEPIC(v float64) {
	o.EPIC = &v
}

// GetLEGENDARY returns the LEGENDARY field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetLEGENDARY() float64 {
	if o == nil || IsNil(o.LEGENDARY) {
		var ret float64
		return ret
	}
	return *o.LEGENDARY
}

// GetLEGENDARYOk returns a tuple with the LEGENDARY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetLEGENDARYOk() (*float64, bool) {
	if o == nil || IsNil(o.LEGENDARY) {
		return nil, false
	}
	return o.LEGENDARY, true
}

// HasLEGENDARY returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) HasLEGENDARY() bool {
	if o != nil && !IsNil(o.LEGENDARY) {
		return true
	}

	return false
}

// SetLEGENDARY gets a reference to the given float64 and assigns it to the LEGENDARY field.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) SetLEGENDARY(v float64) {
	o.LEGENDARY = &v
}

// GetRARE returns the RARE field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetRARE() float64 {
	if o == nil || IsNil(o.RARE) {
		var ret float64
		return ret
	}
	return *o.RARE
}

// GetRAREOk returns a tuple with the RARE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetRAREOk() (*float64, bool) {
	if o == nil || IsNil(o.RARE) {
		return nil, false
	}
	return o.RARE, true
}

// HasRARE returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) HasRARE() bool {
	if o != nil && !IsNil(o.RARE) {
		return true
	}

	return false
}

// SetRARE gets a reference to the given float64 and assigns it to the RARE field.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) SetRARE(v float64) {
	o.RARE = &v
}

// GetUNCOMMON returns the UNCOMMON field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetUNCOMMON() float64 {
	if o == nil || IsNil(o.UNCOMMON) {
		var ret float64
		return ret
	}
	return *o.UNCOMMON
}

// GetUNCOMMONOk returns a tuple with the UNCOMMON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetUNCOMMONOk() (*float64, bool) {
	if o == nil || IsNil(o.UNCOMMON) {
		return nil, false
	}
	return o.UNCOMMON, true
}

// HasUNCOMMON returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) HasUNCOMMON() bool {
	if o != nil && !IsNil(o.UNCOMMON) {
		return true
	}

	return false
}

// SetUNCOMMON gets a reference to the given float64 and assigns it to the UNCOMMON field.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) SetUNCOMMON(v float64) {
	o.UNCOMMON = &v
}

// GetNone returns the None field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetNone() float64 {
	if o == nil || IsNil(o.None) {
		var ret float64
		return ret
	}
	return *o.None
}

// GetNoneOk returns a tuple with the None field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetNoneOk() (*float64, bool) {
	if o == nil || IsNil(o.None) {
		return nil, false
	}
	return o.None, true
}

// HasNone returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) HasNone() bool {
	if o != nil && !IsNil(o.None) {
		return true
	}

	return false
}

// SetNone gets a reference to the given float64 and assigns it to the None field.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) SetNone(v float64) {
	o.None = &v
}

// GetNull returns the Null field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetNull() float64 {
	if o == nil || IsNil(o.Null) {
		var ret float64
		return ret
	}
	return *o.Null
}

// GetNullOk returns a tuple with the Null field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetNullOk() (*float64, bool) {
	if o == nil || IsNil(o.Null) {
		return nil, false
	}
	return o.Null, true
}

// HasNull returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) HasNull() bool {
	if o != nil && !IsNil(o.Null) {
		return true
	}

	return false
}

// SetNull gets a reference to the given float64 and assigns it to the Null field.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) SetNull(v float64) {
	o.Null = &v
}

// GetTotal returns the Total field value
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetTotal() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) SetTotal(v float64) {
	o.Total = v
}

func (o SkyBlockProfileMemberPlayerStatsMythosBurrowData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberPlayerStatsMythosBurrowData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.COMMON) {
		toSerialize["COMMON"] = o.COMMON
	}
	if !IsNil(o.EPIC) {
		toSerialize["EPIC"] = o.EPIC
	}
	if !IsNil(o.LEGENDARY) {
		toSerialize["LEGENDARY"] = o.LEGENDARY
	}
	if !IsNil(o.RARE) {
		toSerialize["RARE"] = o.RARE
	}
	if !IsNil(o.UNCOMMON) {
		toSerialize["UNCOMMON"] = o.UNCOMMON
	}
	if !IsNil(o.None) {
		toSerialize["none"] = o.None
	}
	if !IsNil(o.Null) {
		toSerialize["null"] = o.Null
	}
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *SkyBlockProfileMemberPlayerStatsMythosBurrowData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockProfileMemberPlayerStatsMythosBurrowData := _SkyBlockProfileMemberPlayerStatsMythosBurrowData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockProfileMemberPlayerStatsMythosBurrowData)

	if err != nil {
		return err
	}

	*o = SkyBlockProfileMemberPlayerStatsMythosBurrowData(varSkyBlockProfileMemberPlayerStatsMythosBurrowData)

	return err
}

type NullableSkyBlockProfileMemberPlayerStatsMythosBurrowData struct {
	value *SkyBlockProfileMemberPlayerStatsMythosBurrowData
	isSet bool
}

func (v NullableSkyBlockProfileMemberPlayerStatsMythosBurrowData) Get() *SkyBlockProfileMemberPlayerStatsMythosBurrowData {
	return v.value
}

func (v *NullableSkyBlockProfileMemberPlayerStatsMythosBurrowData) Set(val *SkyBlockProfileMemberPlayerStatsMythosBurrowData) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberPlayerStatsMythosBurrowData) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberPlayerStatsMythosBurrowData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberPlayerStatsMythosBurrowData(val *SkyBlockProfileMemberPlayerStatsMythosBurrowData) *NullableSkyBlockProfileMemberPlayerStatsMythosBurrowData {
	return &NullableSkyBlockProfileMemberPlayerStatsMythosBurrowData{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberPlayerStatsMythosBurrowData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberPlayerStatsMythosBurrowData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
