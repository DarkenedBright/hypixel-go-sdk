/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SkyBlockProfileMemberPlayerDataTempStatBuffStatId the model 'SkyBlockProfileMemberPlayerDataTempStatBuffStatId'
type SkyBlockProfileMemberPlayerDataTempStatBuffStatId string

// List of SkyBlockProfileMemberPlayerDataTempStatBuff_stat_id
const (
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_COLD_RESISTANCE     SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "cold_resistance"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_DEFENSE             SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "defense"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_FARMING_FORTUNE     SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "farming_fortune"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_FEROCITY            SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "ferocity"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_FORAGING_FORTUNE    SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "foraging_fortune"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_HEALTH              SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "health"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_INTELLIGENCE        SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "intelligence"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_MAGIC_FIND          SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "magic_find"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_MINING_FORTUNE      SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "mining_fortune"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_PET_LUCK            SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "pet_luck"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_RIFT_TIME           SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "rift_time"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_SEA_CREATURE_CHANCE SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "sea_creature_chance"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_STRENGTH            SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "strength"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_TRUE_DEFENSE        SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "true_defense"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_VITALITY            SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "vitality"
	SKYBLOCKPROFILEMEMBERPLAYERDATATEMPSTATBUFFSTATID_WALK_SPEED          SkyBlockProfileMemberPlayerDataTempStatBuffStatId = "walk_speed"
)

// All allowed values of SkyBlockProfileMemberPlayerDataTempStatBuffStatId enum
var AllowedSkyBlockProfileMemberPlayerDataTempStatBuffStatIdEnumValues = []SkyBlockProfileMemberPlayerDataTempStatBuffStatId{
	"cold_resistance",
	"defense",
	"farming_fortune",
	"ferocity",
	"foraging_fortune",
	"health",
	"intelligence",
	"magic_find",
	"mining_fortune",
	"pet_luck",
	"rift_time",
	"sea_creature_chance",
	"strength",
	"true_defense",
	"vitality",
	"walk_speed",
}

func (v *SkyBlockProfileMemberPlayerDataTempStatBuffStatId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkyBlockProfileMemberPlayerDataTempStatBuffStatId(value)
	for _, existing := range AllowedSkyBlockProfileMemberPlayerDataTempStatBuffStatIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkyBlockProfileMemberPlayerDataTempStatBuffStatId", value)
}

// NewSkyBlockProfileMemberPlayerDataTempStatBuffStatIdFromValue returns a pointer to a valid SkyBlockProfileMemberPlayerDataTempStatBuffStatId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkyBlockProfileMemberPlayerDataTempStatBuffStatIdFromValue(v string) (*SkyBlockProfileMemberPlayerDataTempStatBuffStatId, error) {
	ev := SkyBlockProfileMemberPlayerDataTempStatBuffStatId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkyBlockProfileMemberPlayerDataTempStatBuffStatId: valid values are %v", v, AllowedSkyBlockProfileMemberPlayerDataTempStatBuffStatIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkyBlockProfileMemberPlayerDataTempStatBuffStatId) IsValid() bool {
	for _, existing := range AllowedSkyBlockProfileMemberPlayerDataTempStatBuffStatIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkyBlockProfileMemberPlayerDataTempStatBuff_stat_id value
func (v SkyBlockProfileMemberPlayerDataTempStatBuffStatId) Ptr() *SkyBlockProfileMemberPlayerDataTempStatBuffStatId {
	return &v
}

type NullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId struct {
	value *SkyBlockProfileMemberPlayerDataTempStatBuffStatId
	isSet bool
}

func (v NullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId) Get() *SkyBlockProfileMemberPlayerDataTempStatBuffStatId {
	return v.value
}

func (v *NullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId) Set(val *SkyBlockProfileMemberPlayerDataTempStatBuffStatId) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId(val *SkyBlockProfileMemberPlayerDataTempStatBuffStatId) *NullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId {
	return &NullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberPlayerDataTempStatBuffStatId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
