/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberItemData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberItemData{}

// SkyBlockProfileMemberItemData struct for SkyBlockProfileMemberItemData
type SkyBlockProfileMemberItemData struct {
	FavoriteArrow          *string `json:"favorite_arrow,omitempty"`
	Soulflow               *int64  `json:"soulflow,omitempty"`
	TeleporterPillConsumed *bool   `json:"teleporter_pill_consumed,omitempty"`
}

// NewSkyBlockProfileMemberItemData instantiates a new SkyBlockProfileMemberItemData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberItemData() *SkyBlockProfileMemberItemData {
	this := SkyBlockProfileMemberItemData{}
	return &this
}

// NewSkyBlockProfileMemberItemDataWithDefaults instantiates a new SkyBlockProfileMemberItemData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberItemDataWithDefaults() *SkyBlockProfileMemberItemData {
	this := SkyBlockProfileMemberItemData{}
	return &this
}

// GetFavoriteArrow returns the FavoriteArrow field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberItemData) GetFavoriteArrow() string {
	if o == nil || IsNil(o.FavoriteArrow) {
		var ret string
		return ret
	}
	return *o.FavoriteArrow
}

// GetFavoriteArrowOk returns a tuple with the FavoriteArrow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberItemData) GetFavoriteArrowOk() (*string, bool) {
	if o == nil || IsNil(o.FavoriteArrow) {
		return nil, false
	}
	return o.FavoriteArrow, true
}

// HasFavoriteArrow returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberItemData) HasFavoriteArrow() bool {
	if o != nil && !IsNil(o.FavoriteArrow) {
		return true
	}

	return false
}

// SetFavoriteArrow gets a reference to the given string and assigns it to the FavoriteArrow field.
func (o *SkyBlockProfileMemberItemData) SetFavoriteArrow(v string) {
	o.FavoriteArrow = &v
}

// GetSoulflow returns the Soulflow field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberItemData) GetSoulflow() int64 {
	if o == nil || IsNil(o.Soulflow) {
		var ret int64
		return ret
	}
	return *o.Soulflow
}

// GetSoulflowOk returns a tuple with the Soulflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberItemData) GetSoulflowOk() (*int64, bool) {
	if o == nil || IsNil(o.Soulflow) {
		return nil, false
	}
	return o.Soulflow, true
}

// HasSoulflow returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberItemData) HasSoulflow() bool {
	if o != nil && !IsNil(o.Soulflow) {
		return true
	}

	return false
}

// SetSoulflow gets a reference to the given int64 and assigns it to the Soulflow field.
func (o *SkyBlockProfileMemberItemData) SetSoulflow(v int64) {
	o.Soulflow = &v
}

// GetTeleporterPillConsumed returns the TeleporterPillConsumed field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberItemData) GetTeleporterPillConsumed() bool {
	if o == nil || IsNil(o.TeleporterPillConsumed) {
		var ret bool
		return ret
	}
	return *o.TeleporterPillConsumed
}

// GetTeleporterPillConsumedOk returns a tuple with the TeleporterPillConsumed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberItemData) GetTeleporterPillConsumedOk() (*bool, bool) {
	if o == nil || IsNil(o.TeleporterPillConsumed) {
		return nil, false
	}
	return o.TeleporterPillConsumed, true
}

// HasTeleporterPillConsumed returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberItemData) HasTeleporterPillConsumed() bool {
	if o != nil && !IsNil(o.TeleporterPillConsumed) {
		return true
	}

	return false
}

// SetTeleporterPillConsumed gets a reference to the given bool and assigns it to the TeleporterPillConsumed field.
func (o *SkyBlockProfileMemberItemData) SetTeleporterPillConsumed(v bool) {
	o.TeleporterPillConsumed = &v
}

func (o SkyBlockProfileMemberItemData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberItemData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FavoriteArrow) {
		toSerialize["favorite_arrow"] = o.FavoriteArrow
	}
	if !IsNil(o.Soulflow) {
		toSerialize["soulflow"] = o.Soulflow
	}
	if !IsNil(o.TeleporterPillConsumed) {
		toSerialize["teleporter_pill_consumed"] = o.TeleporterPillConsumed
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberItemData struct {
	value *SkyBlockProfileMemberItemData
	isSet bool
}

func (v NullableSkyBlockProfileMemberItemData) Get() *SkyBlockProfileMemberItemData {
	return v.value
}

func (v *NullableSkyBlockProfileMemberItemData) Set(val *SkyBlockProfileMemberItemData) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberItemData) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberItemData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberItemData(val *SkyBlockProfileMemberItemData) *NullableSkyBlockProfileMemberItemData {
	return &NullableSkyBlockProfileMemberItemData{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberItemData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberItemData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
