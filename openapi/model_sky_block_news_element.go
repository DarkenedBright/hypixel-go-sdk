/*
Hypixel Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkyBlockNewsElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockNewsElement{}

// SkyBlockNewsElement struct for SkyBlockNewsElement
type SkyBlockNewsElement struct {
	Item  SkyBlockNewsElementItem `json:"item"`
	Link  string                  `json:"link"`
	Text  string                  `json:"text"`
	Title string                  `json:"title"`
}

type _SkyBlockNewsElement SkyBlockNewsElement

// NewSkyBlockNewsElement instantiates a new SkyBlockNewsElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockNewsElement(item SkyBlockNewsElementItem, link string, text string, title string) *SkyBlockNewsElement {
	this := SkyBlockNewsElement{}
	this.Item = item
	this.Link = link
	this.Text = text
	this.Title = title
	return &this
}

// NewSkyBlockNewsElementWithDefaults instantiates a new SkyBlockNewsElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockNewsElementWithDefaults() *SkyBlockNewsElement {
	this := SkyBlockNewsElement{}
	return &this
}

// GetItem returns the Item field value
func (o *SkyBlockNewsElement) GetItem() SkyBlockNewsElementItem {
	if o == nil {
		var ret SkyBlockNewsElementItem
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *SkyBlockNewsElement) GetItemOk() (*SkyBlockNewsElementItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *SkyBlockNewsElement) SetItem(v SkyBlockNewsElementItem) {
	o.Item = v
}

// GetLink returns the Link field value
func (o *SkyBlockNewsElement) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *SkyBlockNewsElement) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *SkyBlockNewsElement) SetLink(v string) {
	o.Link = v
}

// GetText returns the Text field value
func (o *SkyBlockNewsElement) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *SkyBlockNewsElement) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *SkyBlockNewsElement) SetText(v string) {
	o.Text = v
}

// GetTitle returns the Title field value
func (o *SkyBlockNewsElement) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SkyBlockNewsElement) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SkyBlockNewsElement) SetTitle(v string) {
	o.Title = v
}

func (o SkyBlockNewsElement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockNewsElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["item"] = o.Item
	toSerialize["link"] = o.Link
	toSerialize["text"] = o.Text
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *SkyBlockNewsElement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"item",
		"link",
		"text",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkyBlockNewsElement := _SkyBlockNewsElement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkyBlockNewsElement)

	if err != nil {
		return err
	}

	*o = SkyBlockNewsElement(varSkyBlockNewsElement)

	return err
}

type NullableSkyBlockNewsElement struct {
	value *SkyBlockNewsElement
	isSet bool
}

func (v NullableSkyBlockNewsElement) Get() *SkyBlockNewsElement {
	return v.value
}

func (v *NullableSkyBlockNewsElement) Set(val *SkyBlockNewsElement) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockNewsElement) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockNewsElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockNewsElement(val *SkyBlockNewsElement) *NullableSkyBlockNewsElement {
	return &NullableSkyBlockNewsElement{value: val, isSet: true}
}

func (v NullableSkyBlockNewsElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockNewsElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
