/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberRift type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberRift{}

// SkyBlockProfileMemberRift struct for SkyBlockProfileMemberRift
type SkyBlockProfileMemberRift struct {
	BlackLagoon *SkyBlockProfileMemberRiftBlackLagoon `json:"black_lagoon,omitempty"`
	DeadCats *SkyBlockProfileMemberRiftDeadCats `json:"dead_cats,omitempty"`
	Enigma *SkyBlockProfileMemberRiftEnigma `json:"enigma,omitempty"`
	Gallery *SkyBlockProfileMemberRiftGallery `json:"gallery,omitempty"`
	VillagePlaza *SkyBlockProfileMemberRiftVillagePlaza `json:"village_plaza,omitempty"`
	WitherCage *SkyBlockProfileMemberRiftWitherCage `json:"wither_cage,omitempty"`
	WizardTower *SkyBlockProfileMemberRiftWizardTower `json:"wizard_tower,omitempty"`
}

// NewSkyBlockProfileMemberRift instantiates a new SkyBlockProfileMemberRift object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberRift() *SkyBlockProfileMemberRift {
	this := SkyBlockProfileMemberRift{}
	return &this
}

// NewSkyBlockProfileMemberRiftWithDefaults instantiates a new SkyBlockProfileMemberRift object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberRiftWithDefaults() *SkyBlockProfileMemberRift {
	this := SkyBlockProfileMemberRift{}
	return &this
}

// GetBlackLagoon returns the BlackLagoon field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRift) GetBlackLagoon() SkyBlockProfileMemberRiftBlackLagoon {
	if o == nil || IsNil(o.BlackLagoon) {
		var ret SkyBlockProfileMemberRiftBlackLagoon
		return ret
	}
	return *o.BlackLagoon
}

// GetBlackLagoonOk returns a tuple with the BlackLagoon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRift) GetBlackLagoonOk() (*SkyBlockProfileMemberRiftBlackLagoon, bool) {
	if o == nil || IsNil(o.BlackLagoon) {
		return nil, false
	}
	return o.BlackLagoon, true
}

// HasBlackLagoon returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRift) HasBlackLagoon() bool {
	if o != nil && !IsNil(o.BlackLagoon) {
		return true
	}

	return false
}

// SetBlackLagoon gets a reference to the given SkyBlockProfileMemberRiftBlackLagoon and assigns it to the BlackLagoon field.
func (o *SkyBlockProfileMemberRift) SetBlackLagoon(v SkyBlockProfileMemberRiftBlackLagoon) {
	o.BlackLagoon = &v
}

// GetDeadCats returns the DeadCats field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRift) GetDeadCats() SkyBlockProfileMemberRiftDeadCats {
	if o == nil || IsNil(o.DeadCats) {
		var ret SkyBlockProfileMemberRiftDeadCats
		return ret
	}
	return *o.DeadCats
}

// GetDeadCatsOk returns a tuple with the DeadCats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRift) GetDeadCatsOk() (*SkyBlockProfileMemberRiftDeadCats, bool) {
	if o == nil || IsNil(o.DeadCats) {
		return nil, false
	}
	return o.DeadCats, true
}

// HasDeadCats returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRift) HasDeadCats() bool {
	if o != nil && !IsNil(o.DeadCats) {
		return true
	}

	return false
}

// SetDeadCats gets a reference to the given SkyBlockProfileMemberRiftDeadCats and assigns it to the DeadCats field.
func (o *SkyBlockProfileMemberRift) SetDeadCats(v SkyBlockProfileMemberRiftDeadCats) {
	o.DeadCats = &v
}

// GetEnigma returns the Enigma field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRift) GetEnigma() SkyBlockProfileMemberRiftEnigma {
	if o == nil || IsNil(o.Enigma) {
		var ret SkyBlockProfileMemberRiftEnigma
		return ret
	}
	return *o.Enigma
}

// GetEnigmaOk returns a tuple with the Enigma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRift) GetEnigmaOk() (*SkyBlockProfileMemberRiftEnigma, bool) {
	if o == nil || IsNil(o.Enigma) {
		return nil, false
	}
	return o.Enigma, true
}

// HasEnigma returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRift) HasEnigma() bool {
	if o != nil && !IsNil(o.Enigma) {
		return true
	}

	return false
}

// SetEnigma gets a reference to the given SkyBlockProfileMemberRiftEnigma and assigns it to the Enigma field.
func (o *SkyBlockProfileMemberRift) SetEnigma(v SkyBlockProfileMemberRiftEnigma) {
	o.Enigma = &v
}

// GetGallery returns the Gallery field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRift) GetGallery() SkyBlockProfileMemberRiftGallery {
	if o == nil || IsNil(o.Gallery) {
		var ret SkyBlockProfileMemberRiftGallery
		return ret
	}
	return *o.Gallery
}

// GetGalleryOk returns a tuple with the Gallery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRift) GetGalleryOk() (*SkyBlockProfileMemberRiftGallery, bool) {
	if o == nil || IsNil(o.Gallery) {
		return nil, false
	}
	return o.Gallery, true
}

// HasGallery returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRift) HasGallery() bool {
	if o != nil && !IsNil(o.Gallery) {
		return true
	}

	return false
}

// SetGallery gets a reference to the given SkyBlockProfileMemberRiftGallery and assigns it to the Gallery field.
func (o *SkyBlockProfileMemberRift) SetGallery(v SkyBlockProfileMemberRiftGallery) {
	o.Gallery = &v
}

// GetVillagePlaza returns the VillagePlaza field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRift) GetVillagePlaza() SkyBlockProfileMemberRiftVillagePlaza {
	if o == nil || IsNil(o.VillagePlaza) {
		var ret SkyBlockProfileMemberRiftVillagePlaza
		return ret
	}
	return *o.VillagePlaza
}

// GetVillagePlazaOk returns a tuple with the VillagePlaza field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRift) GetVillagePlazaOk() (*SkyBlockProfileMemberRiftVillagePlaza, bool) {
	if o == nil || IsNil(o.VillagePlaza) {
		return nil, false
	}
	return o.VillagePlaza, true
}

// HasVillagePlaza returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRift) HasVillagePlaza() bool {
	if o != nil && !IsNil(o.VillagePlaza) {
		return true
	}

	return false
}

// SetVillagePlaza gets a reference to the given SkyBlockProfileMemberRiftVillagePlaza and assigns it to the VillagePlaza field.
func (o *SkyBlockProfileMemberRift) SetVillagePlaza(v SkyBlockProfileMemberRiftVillagePlaza) {
	o.VillagePlaza = &v
}

// GetWitherCage returns the WitherCage field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRift) GetWitherCage() SkyBlockProfileMemberRiftWitherCage {
	if o == nil || IsNil(o.WitherCage) {
		var ret SkyBlockProfileMemberRiftWitherCage
		return ret
	}
	return *o.WitherCage
}

// GetWitherCageOk returns a tuple with the WitherCage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRift) GetWitherCageOk() (*SkyBlockProfileMemberRiftWitherCage, bool) {
	if o == nil || IsNil(o.WitherCage) {
		return nil, false
	}
	return o.WitherCage, true
}

// HasWitherCage returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRift) HasWitherCage() bool {
	if o != nil && !IsNil(o.WitherCage) {
		return true
	}

	return false
}

// SetWitherCage gets a reference to the given SkyBlockProfileMemberRiftWitherCage and assigns it to the WitherCage field.
func (o *SkyBlockProfileMemberRift) SetWitherCage(v SkyBlockProfileMemberRiftWitherCage) {
	o.WitherCage = &v
}

// GetWizardTower returns the WizardTower field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRift) GetWizardTower() SkyBlockProfileMemberRiftWizardTower {
	if o == nil || IsNil(o.WizardTower) {
		var ret SkyBlockProfileMemberRiftWizardTower
		return ret
	}
	return *o.WizardTower
}

// GetWizardTowerOk returns a tuple with the WizardTower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRift) GetWizardTowerOk() (*SkyBlockProfileMemberRiftWizardTower, bool) {
	if o == nil || IsNil(o.WizardTower) {
		return nil, false
	}
	return o.WizardTower, true
}

// HasWizardTower returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRift) HasWizardTower() bool {
	if o != nil && !IsNil(o.WizardTower) {
		return true
	}

	return false
}

// SetWizardTower gets a reference to the given SkyBlockProfileMemberRiftWizardTower and assigns it to the WizardTower field.
func (o *SkyBlockProfileMemberRift) SetWizardTower(v SkyBlockProfileMemberRiftWizardTower) {
	o.WizardTower = &v
}

func (o SkyBlockProfileMemberRift) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberRift) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlackLagoon) {
		toSerialize["black_lagoon"] = o.BlackLagoon
	}
	if !IsNil(o.DeadCats) {
		toSerialize["dead_cats"] = o.DeadCats
	}
	if !IsNil(o.Enigma) {
		toSerialize["enigma"] = o.Enigma
	}
	if !IsNil(o.Gallery) {
		toSerialize["gallery"] = o.Gallery
	}
	if !IsNil(o.VillagePlaza) {
		toSerialize["village_plaza"] = o.VillagePlaza
	}
	if !IsNil(o.WitherCage) {
		toSerialize["wither_cage"] = o.WitherCage
	}
	if !IsNil(o.WizardTower) {
		toSerialize["wizard_tower"] = o.WizardTower
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberRift struct {
	value *SkyBlockProfileMemberRift
	isSet bool
}

func (v NullableSkyBlockProfileMemberRift) Get() *SkyBlockProfileMemberRift {
	return v.value
}

func (v *NullableSkyBlockProfileMemberRift) Set(val *SkyBlockProfileMemberRift) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberRift) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberRift) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberRift(val *SkyBlockProfileMemberRift) *NullableSkyBlockProfileMemberRift {
	return &NullableSkyBlockProfileMemberRift{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberRift) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberRift) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


