/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Game type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Game{}

// Game Information about a specific game. When a field is not present you should fallback to the provided default if there is one, required fields will always exist.
type Game struct {
	// The backend ID of the game.
	Id int32 `json:"id"`
	// The display name of the game.
	Name string `json:"name"`
	// The key used for database storage, such as for stats.
	DatabaseName string `json:"databaseName"`
	// A map of mode key to display name
	ModeNames map[string]interface{} `json:"modeNames,omitempty"`
	// True if the game is retired and no longer playable.
	Retired *bool `json:"retired,omitempty"`
	// True if the game is legacy and part of the Classic Lobby.
	Legacy *bool `json:"legacy,omitempty"`
}

type _Game Game

// NewGame instantiates a new Game object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGame(id int32, name string, databaseName string) *Game {
	this := Game{}
	this.Id = id
	this.Name = name
	this.DatabaseName = databaseName
	var retired bool = false
	this.Retired = &retired
	var legacy bool = false
	this.Legacy = &legacy
	return &this
}

// NewGameWithDefaults instantiates a new Game object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameWithDefaults() *Game {
	this := Game{}
	var retired bool = false
	this.Retired = &retired
	var legacy bool = false
	this.Legacy = &legacy
	return &this
}

// GetId returns the Id field value
func (o *Game) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Game) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Game) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Game) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Game) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Game) SetName(v string) {
	o.Name = v
}

// GetDatabaseName returns the DatabaseName field value
func (o *Game) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *Game) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *Game) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetModeNames returns the ModeNames field value if set, zero value otherwise.
func (o *Game) GetModeNames() map[string]interface{} {
	if o == nil || IsNil(o.ModeNames) {
		var ret map[string]interface{}
		return ret
	}
	return o.ModeNames
}

// GetModeNamesOk returns a tuple with the ModeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetModeNamesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ModeNames) {
		return map[string]interface{}{}, false
	}
	return o.ModeNames, true
}

// HasModeNames returns a boolean if a field has been set.
func (o *Game) HasModeNames() bool {
	if o != nil && !IsNil(o.ModeNames) {
		return true
	}

	return false
}

// SetModeNames gets a reference to the given map[string]interface{} and assigns it to the ModeNames field.
func (o *Game) SetModeNames(v map[string]interface{}) {
	o.ModeNames = v
}

// GetRetired returns the Retired field value if set, zero value otherwise.
func (o *Game) GetRetired() bool {
	if o == nil || IsNil(o.Retired) {
		var ret bool
		return ret
	}
	return *o.Retired
}

// GetRetiredOk returns a tuple with the Retired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetRetiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Retired) {
		return nil, false
	}
	return o.Retired, true
}

// HasRetired returns a boolean if a field has been set.
func (o *Game) HasRetired() bool {
	if o != nil && !IsNil(o.Retired) {
		return true
	}

	return false
}

// SetRetired gets a reference to the given bool and assigns it to the Retired field.
func (o *Game) SetRetired(v bool) {
	o.Retired = &v
}

// GetLegacy returns the Legacy field value if set, zero value otherwise.
func (o *Game) GetLegacy() bool {
	if o == nil || IsNil(o.Legacy) {
		var ret bool
		return ret
	}
	return *o.Legacy
}

// GetLegacyOk returns a tuple with the Legacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetLegacyOk() (*bool, bool) {
	if o == nil || IsNil(o.Legacy) {
		return nil, false
	}
	return o.Legacy, true
}

// HasLegacy returns a boolean if a field has been set.
func (o *Game) HasLegacy() bool {
	if o != nil && !IsNil(o.Legacy) {
		return true
	}

	return false
}

// SetLegacy gets a reference to the given bool and assigns it to the Legacy field.
func (o *Game) SetLegacy(v bool) {
	o.Legacy = &v
}

func (o Game) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Game) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["databaseName"] = o.DatabaseName
	if !IsNil(o.ModeNames) {
		toSerialize["modeNames"] = o.ModeNames
	}
	if !IsNil(o.Retired) {
		toSerialize["retired"] = o.Retired
	}
	if !IsNil(o.Legacy) {
		toSerialize["legacy"] = o.Legacy
	}
	return toSerialize, nil
}

func (o *Game) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"databaseName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGame := _Game{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGame)

	if err != nil {
		return err
	}

	*o = Game(varGame)

	return err
}

type NullableGame struct {
	value *Game
	isSet bool
}

func (v NullableGame) Get() *Game {
	return v.value
}

func (v *NullableGame) Set(val *Game) {
	v.value = val
	v.isSet = true
}

func (v NullableGame) IsSet() bool {
	return v.isSet
}

func (v *NullableGame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGame(val *Game) *NullableGame {
	return &NullableGame{value: val, isSet: true}
}

func (v NullableGame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


