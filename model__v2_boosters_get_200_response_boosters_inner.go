/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// V2BoostersGet200ResponseBoostersInner - struct for V2BoostersGet200ResponseBoostersInner
type V2BoostersGet200ResponseBoostersInner struct {
	ActiveBooster *ActiveBooster
	QueuedBooster *QueuedBooster
}

// ActiveBoosterAsV2BoostersGet200ResponseBoostersInner is a convenience function that returns ActiveBooster wrapped in V2BoostersGet200ResponseBoostersInner
func ActiveBoosterAsV2BoostersGet200ResponseBoostersInner(v *ActiveBooster) V2BoostersGet200ResponseBoostersInner {
	return V2BoostersGet200ResponseBoostersInner{
		ActiveBooster: v,
	}
}

// QueuedBoosterAsV2BoostersGet200ResponseBoostersInner is a convenience function that returns QueuedBooster wrapped in V2BoostersGet200ResponseBoostersInner
func QueuedBoosterAsV2BoostersGet200ResponseBoostersInner(v *QueuedBooster) V2BoostersGet200ResponseBoostersInner {
	return V2BoostersGet200ResponseBoostersInner{
		QueuedBooster: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *V2BoostersGet200ResponseBoostersInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActiveBooster
	err = newStrictDecoder(data).Decode(&dst.ActiveBooster)
	if err == nil {
		jsonActiveBooster, _ := json.Marshal(dst.ActiveBooster)
		if string(jsonActiveBooster) == "{}" { // empty struct
			dst.ActiveBooster = nil
		} else {
			if err = validator.Validate(dst.ActiveBooster); err != nil {
				dst.ActiveBooster = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActiveBooster = nil
	}

	// try to unmarshal data into QueuedBooster
	err = newStrictDecoder(data).Decode(&dst.QueuedBooster)
	if err == nil {
		jsonQueuedBooster, _ := json.Marshal(dst.QueuedBooster)
		if string(jsonQueuedBooster) == "{}" { // empty struct
			dst.QueuedBooster = nil
		} else {
			if err = validator.Validate(dst.QueuedBooster); err != nil {
				dst.QueuedBooster = nil
			} else {
				match++
			}
		}
	} else {
		dst.QueuedBooster = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActiveBooster = nil
		dst.QueuedBooster = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V2BoostersGet200ResponseBoostersInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V2BoostersGet200ResponseBoostersInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V2BoostersGet200ResponseBoostersInner) MarshalJSON() ([]byte, error) {
	if src.ActiveBooster != nil {
		return json.Marshal(&src.ActiveBooster)
	}

	if src.QueuedBooster != nil {
		return json.Marshal(&src.QueuedBooster)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V2BoostersGet200ResponseBoostersInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActiveBooster != nil {
		return obj.ActiveBooster
	}

	if obj.QueuedBooster != nil {
		return obj.QueuedBooster
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj V2BoostersGet200ResponseBoostersInner) GetActualInstanceValue() (interface{}) {
	if obj.ActiveBooster != nil {
		return *obj.ActiveBooster
	}

	if obj.QueuedBooster != nil {
		return *obj.QueuedBooster
	}

	// all schemas are nil
	return nil
}

type NullableV2BoostersGet200ResponseBoostersInner struct {
	value *V2BoostersGet200ResponseBoostersInner
	isSet bool
}

func (v NullableV2BoostersGet200ResponseBoostersInner) Get() *V2BoostersGet200ResponseBoostersInner {
	return v.value
}

func (v *NullableV2BoostersGet200ResponseBoostersInner) Set(val *V2BoostersGet200ResponseBoostersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV2BoostersGet200ResponseBoostersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV2BoostersGet200ResponseBoostersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2BoostersGet200ResponseBoostersInner(val *V2BoostersGet200ResponseBoostersInner) *NullableV2BoostersGet200ResponseBoostersInner {
	return &NullableV2BoostersGet200ResponseBoostersInner{value: val, isSet: true}
}

func (v NullableV2BoostersGet200ResponseBoostersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2BoostersGet200ResponseBoostersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


