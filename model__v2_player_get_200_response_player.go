/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V2PlayerGet200ResponsePlayer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2PlayerGet200ResponsePlayer{}

// V2PlayerGet200ResponsePlayer struct for V2PlayerGet200ResponsePlayer
type V2PlayerGet200ResponsePlayer struct {
	Uuid *string `json:"uuid,omitempty"`
	Displayname NullableString `json:"displayname,omitempty"`
	Rank NullableString `json:"rank,omitempty"`
	PackageRank NullableString `json:"packageRank,omitempty"`
	NewPackageRank NullableString `json:"newPackageRank,omitempty"`
	MonthlyPackageRank NullableString `json:"monthlyPackageRank,omitempty"`
	FirstLogin NullableFloat32 `json:"firstLogin,omitempty"`
	LastLogin NullableFloat32 `json:"lastLogin,omitempty"`
	LastLogout NullableFloat32 `json:"lastLogout,omitempty"`
	Stats map[string]interface{} `json:"stats,omitempty"`
}

// NewV2PlayerGet200ResponsePlayer instantiates a new V2PlayerGet200ResponsePlayer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2PlayerGet200ResponsePlayer() *V2PlayerGet200ResponsePlayer {
	this := V2PlayerGet200ResponsePlayer{}
	return &this
}

// NewV2PlayerGet200ResponsePlayerWithDefaults instantiates a new V2PlayerGet200ResponsePlayer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2PlayerGet200ResponsePlayerWithDefaults() *V2PlayerGet200ResponsePlayer {
	this := V2PlayerGet200ResponsePlayer{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *V2PlayerGet200ResponsePlayer) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2PlayerGet200ResponsePlayer) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *V2PlayerGet200ResponsePlayer) SetUuid(v string) {
	o.Uuid = &v
}

// GetDisplayname returns the Displayname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V2PlayerGet200ResponsePlayer) GetDisplayname() string {
	if o == nil || IsNil(o.Displayname.Get()) {
		var ret string
		return ret
	}
	return *o.Displayname.Get()
}

// GetDisplaynameOk returns a tuple with the Displayname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V2PlayerGet200ResponsePlayer) GetDisplaynameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Displayname.Get(), o.Displayname.IsSet()
}

// HasDisplayname returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasDisplayname() bool {
	if o != nil && o.Displayname.IsSet() {
		return true
	}

	return false
}

// SetDisplayname gets a reference to the given NullableString and assigns it to the Displayname field.
func (o *V2PlayerGet200ResponsePlayer) SetDisplayname(v string) {
	o.Displayname.Set(&v)
}
// SetDisplaynameNil sets the value for Displayname to be an explicit nil
func (o *V2PlayerGet200ResponsePlayer) SetDisplaynameNil() {
	o.Displayname.Set(nil)
}

// UnsetDisplayname ensures that no value is present for Displayname, not even an explicit nil
func (o *V2PlayerGet200ResponsePlayer) UnsetDisplayname() {
	o.Displayname.Unset()
}

// GetRank returns the Rank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V2PlayerGet200ResponsePlayer) GetRank() string {
	if o == nil || IsNil(o.Rank.Get()) {
		var ret string
		return ret
	}
	return *o.Rank.Get()
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V2PlayerGet200ResponsePlayer) GetRankOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rank.Get(), o.Rank.IsSet()
}

// HasRank returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasRank() bool {
	if o != nil && o.Rank.IsSet() {
		return true
	}

	return false
}

// SetRank gets a reference to the given NullableString and assigns it to the Rank field.
func (o *V2PlayerGet200ResponsePlayer) SetRank(v string) {
	o.Rank.Set(&v)
}
// SetRankNil sets the value for Rank to be an explicit nil
func (o *V2PlayerGet200ResponsePlayer) SetRankNil() {
	o.Rank.Set(nil)
}

// UnsetRank ensures that no value is present for Rank, not even an explicit nil
func (o *V2PlayerGet200ResponsePlayer) UnsetRank() {
	o.Rank.Unset()
}

// GetPackageRank returns the PackageRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V2PlayerGet200ResponsePlayer) GetPackageRank() string {
	if o == nil || IsNil(o.PackageRank.Get()) {
		var ret string
		return ret
	}
	return *o.PackageRank.Get()
}

// GetPackageRankOk returns a tuple with the PackageRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V2PlayerGet200ResponsePlayer) GetPackageRankOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PackageRank.Get(), o.PackageRank.IsSet()
}

// HasPackageRank returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasPackageRank() bool {
	if o != nil && o.PackageRank.IsSet() {
		return true
	}

	return false
}

// SetPackageRank gets a reference to the given NullableString and assigns it to the PackageRank field.
func (o *V2PlayerGet200ResponsePlayer) SetPackageRank(v string) {
	o.PackageRank.Set(&v)
}
// SetPackageRankNil sets the value for PackageRank to be an explicit nil
func (o *V2PlayerGet200ResponsePlayer) SetPackageRankNil() {
	o.PackageRank.Set(nil)
}

// UnsetPackageRank ensures that no value is present for PackageRank, not even an explicit nil
func (o *V2PlayerGet200ResponsePlayer) UnsetPackageRank() {
	o.PackageRank.Unset()
}

// GetNewPackageRank returns the NewPackageRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V2PlayerGet200ResponsePlayer) GetNewPackageRank() string {
	if o == nil || IsNil(o.NewPackageRank.Get()) {
		var ret string
		return ret
	}
	return *o.NewPackageRank.Get()
}

// GetNewPackageRankOk returns a tuple with the NewPackageRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V2PlayerGet200ResponsePlayer) GetNewPackageRankOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewPackageRank.Get(), o.NewPackageRank.IsSet()
}

// HasNewPackageRank returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasNewPackageRank() bool {
	if o != nil && o.NewPackageRank.IsSet() {
		return true
	}

	return false
}

// SetNewPackageRank gets a reference to the given NullableString and assigns it to the NewPackageRank field.
func (o *V2PlayerGet200ResponsePlayer) SetNewPackageRank(v string) {
	o.NewPackageRank.Set(&v)
}
// SetNewPackageRankNil sets the value for NewPackageRank to be an explicit nil
func (o *V2PlayerGet200ResponsePlayer) SetNewPackageRankNil() {
	o.NewPackageRank.Set(nil)
}

// UnsetNewPackageRank ensures that no value is present for NewPackageRank, not even an explicit nil
func (o *V2PlayerGet200ResponsePlayer) UnsetNewPackageRank() {
	o.NewPackageRank.Unset()
}

// GetMonthlyPackageRank returns the MonthlyPackageRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V2PlayerGet200ResponsePlayer) GetMonthlyPackageRank() string {
	if o == nil || IsNil(o.MonthlyPackageRank.Get()) {
		var ret string
		return ret
	}
	return *o.MonthlyPackageRank.Get()
}

// GetMonthlyPackageRankOk returns a tuple with the MonthlyPackageRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V2PlayerGet200ResponsePlayer) GetMonthlyPackageRankOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MonthlyPackageRank.Get(), o.MonthlyPackageRank.IsSet()
}

// HasMonthlyPackageRank returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasMonthlyPackageRank() bool {
	if o != nil && o.MonthlyPackageRank.IsSet() {
		return true
	}

	return false
}

// SetMonthlyPackageRank gets a reference to the given NullableString and assigns it to the MonthlyPackageRank field.
func (o *V2PlayerGet200ResponsePlayer) SetMonthlyPackageRank(v string) {
	o.MonthlyPackageRank.Set(&v)
}
// SetMonthlyPackageRankNil sets the value for MonthlyPackageRank to be an explicit nil
func (o *V2PlayerGet200ResponsePlayer) SetMonthlyPackageRankNil() {
	o.MonthlyPackageRank.Set(nil)
}

// UnsetMonthlyPackageRank ensures that no value is present for MonthlyPackageRank, not even an explicit nil
func (o *V2PlayerGet200ResponsePlayer) UnsetMonthlyPackageRank() {
	o.MonthlyPackageRank.Unset()
}

// GetFirstLogin returns the FirstLogin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V2PlayerGet200ResponsePlayer) GetFirstLogin() float32 {
	if o == nil || IsNil(o.FirstLogin.Get()) {
		var ret float32
		return ret
	}
	return *o.FirstLogin.Get()
}

// GetFirstLoginOk returns a tuple with the FirstLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V2PlayerGet200ResponsePlayer) GetFirstLoginOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstLogin.Get(), o.FirstLogin.IsSet()
}

// HasFirstLogin returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasFirstLogin() bool {
	if o != nil && o.FirstLogin.IsSet() {
		return true
	}

	return false
}

// SetFirstLogin gets a reference to the given NullableFloat32 and assigns it to the FirstLogin field.
func (o *V2PlayerGet200ResponsePlayer) SetFirstLogin(v float32) {
	o.FirstLogin.Set(&v)
}
// SetFirstLoginNil sets the value for FirstLogin to be an explicit nil
func (o *V2PlayerGet200ResponsePlayer) SetFirstLoginNil() {
	o.FirstLogin.Set(nil)
}

// UnsetFirstLogin ensures that no value is present for FirstLogin, not even an explicit nil
func (o *V2PlayerGet200ResponsePlayer) UnsetFirstLogin() {
	o.FirstLogin.Unset()
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V2PlayerGet200ResponsePlayer) GetLastLogin() float32 {
	if o == nil || IsNil(o.LastLogin.Get()) {
		var ret float32
		return ret
	}
	return *o.LastLogin.Get()
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V2PlayerGet200ResponsePlayer) GetLastLoginOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastLogin.Get(), o.LastLogin.IsSet()
}

// HasLastLogin returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasLastLogin() bool {
	if o != nil && o.LastLogin.IsSet() {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given NullableFloat32 and assigns it to the LastLogin field.
func (o *V2PlayerGet200ResponsePlayer) SetLastLogin(v float32) {
	o.LastLogin.Set(&v)
}
// SetLastLoginNil sets the value for LastLogin to be an explicit nil
func (o *V2PlayerGet200ResponsePlayer) SetLastLoginNil() {
	o.LastLogin.Set(nil)
}

// UnsetLastLogin ensures that no value is present for LastLogin, not even an explicit nil
func (o *V2PlayerGet200ResponsePlayer) UnsetLastLogin() {
	o.LastLogin.Unset()
}

// GetLastLogout returns the LastLogout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V2PlayerGet200ResponsePlayer) GetLastLogout() float32 {
	if o == nil || IsNil(o.LastLogout.Get()) {
		var ret float32
		return ret
	}
	return *o.LastLogout.Get()
}

// GetLastLogoutOk returns a tuple with the LastLogout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V2PlayerGet200ResponsePlayer) GetLastLogoutOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastLogout.Get(), o.LastLogout.IsSet()
}

// HasLastLogout returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasLastLogout() bool {
	if o != nil && o.LastLogout.IsSet() {
		return true
	}

	return false
}

// SetLastLogout gets a reference to the given NullableFloat32 and assigns it to the LastLogout field.
func (o *V2PlayerGet200ResponsePlayer) SetLastLogout(v float32) {
	o.LastLogout.Set(&v)
}
// SetLastLogoutNil sets the value for LastLogout to be an explicit nil
func (o *V2PlayerGet200ResponsePlayer) SetLastLogoutNil() {
	o.LastLogout.Set(nil)
}

// UnsetLastLogout ensures that no value is present for LastLogout, not even an explicit nil
func (o *V2PlayerGet200ResponsePlayer) UnsetLastLogout() {
	o.LastLogout.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V2PlayerGet200ResponsePlayer) GetStats() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V2PlayerGet200ResponsePlayer) GetStatsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Stats) {
		return map[string]interface{}{}, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *V2PlayerGet200ResponsePlayer) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given map[string]interface{} and assigns it to the Stats field.
func (o *V2PlayerGet200ResponsePlayer) SetStats(v map[string]interface{}) {
	o.Stats = v
}

func (o V2PlayerGet200ResponsePlayer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2PlayerGet200ResponsePlayer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Displayname.IsSet() {
		toSerialize["displayname"] = o.Displayname.Get()
	}
	if o.Rank.IsSet() {
		toSerialize["rank"] = o.Rank.Get()
	}
	if o.PackageRank.IsSet() {
		toSerialize["packageRank"] = o.PackageRank.Get()
	}
	if o.NewPackageRank.IsSet() {
		toSerialize["newPackageRank"] = o.NewPackageRank.Get()
	}
	if o.MonthlyPackageRank.IsSet() {
		toSerialize["monthlyPackageRank"] = o.MonthlyPackageRank.Get()
	}
	if o.FirstLogin.IsSet() {
		toSerialize["firstLogin"] = o.FirstLogin.Get()
	}
	if o.LastLogin.IsSet() {
		toSerialize["lastLogin"] = o.LastLogin.Get()
	}
	if o.LastLogout.IsSet() {
		toSerialize["lastLogout"] = o.LastLogout.Get()
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	return toSerialize, nil
}

type NullableV2PlayerGet200ResponsePlayer struct {
	value *V2PlayerGet200ResponsePlayer
	isSet bool
}

func (v NullableV2PlayerGet200ResponsePlayer) Get() *V2PlayerGet200ResponsePlayer {
	return v.value
}

func (v *NullableV2PlayerGet200ResponsePlayer) Set(val *V2PlayerGet200ResponsePlayer) {
	v.value = val
	v.isSet = true
}

func (v NullableV2PlayerGet200ResponsePlayer) IsSet() bool {
	return v.isSet
}

func (v *NullableV2PlayerGet200ResponsePlayer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2PlayerGet200ResponsePlayer(val *V2PlayerGet200ResponsePlayer) *NullableV2PlayerGet200ResponsePlayer {
	return &NullableV2PlayerGet200ResponsePlayer{value: val, isSet: true}
}

func (v NullableV2PlayerGet200ResponsePlayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2PlayerGet200ResponsePlayer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


