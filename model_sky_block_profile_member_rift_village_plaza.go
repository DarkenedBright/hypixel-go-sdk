/*
Hypixel Public API

# Introduction This is the official Hypixel API documentation. [Hypixel Website](https://hypixel.net/) - [GitHub Repo](https://github.com/HypixelDev/PublicAPI) - [API Help Forum](https://hypixel.net/forums/api-help.111/)  All use of the API must conform to the [API policies](https://developer.hypixel.net/policies), violation of these policies may lead to applications being revoked or users banned from the API. ## Limits API keys are limited to a maximum amount of requests per 5 minute intervals. These limits will depend on the type of application that the key is assigned to.  Endpoints which require the use of an API key will also respond with headers to assist with managing the rate limit: - 'RateLimit-Limit' - The limit of requests per minute for the provided API key. - 'RateLimit-Remaining' - The remaining amount of requests allowed for the current minute. - 'RateLimit-Reset' - The amount of seconds until the next minute and the reset of the API key usages.  ## GameTypes | ID | Type Name      | Database Name | Clean Name           |  |----|----------------|---------------|----------------------|  | 2  | QUAKECRAFT     | Quake         | Quake                |  | 3  | WALLS          | Walls         | Walls                |  | 4  | PAINTBALL      | Paintball     | Paintball            |  | 5  | SURVIVAL_GAMES | HungerGames   | Blitz Survival Games |  | 6  | TNTGAMES       | TNTGames      | TNT Games            |  | 7  | VAMPIREZ       | VampireZ      | VampireZ             |  | 13 | WALLS3         | Walls3        | Mega Walls           |  | 14 | ARCADE         | Arcade        | Arcade               |  | 17 | ARENA          | Arena         | Arena                |  | 20 | UHC            | UHC           | UHC Champions        |  | 21 | MCGO           | MCGO          | Cops and Crims       |  | 23 | BATTLEGROUND   | Battleground  | Warlords             |  | 24 | SUPER_SMASH    | SuperSmash    | Smash Heroes         |  | 25 | GINGERBREAD    | GingerBread   | Turbo Kart Racers    |  | 26 | HOUSING        | Housing       | Housing              |  | 51 | SKYWARS        | SkyWars       | SkyWars              |  | 52 | TRUE_COMBAT    | TrueCombat    | Crazy Walls          |  | 54 | SPEED_UHC      | SpeedUHC      | Speed UHC            |  | 55 | SKYCLASH       | SkyClash      | SkyClash             |  | 56 | LEGACY         | Legacy        | Classic Games        |  | 57 | PROTOTYPE      | Prototype     | Prototype            |  | 58 | BEDWARS        | Bedwars       | Bed Wars             |  | 59 | MURDER_MYSTERY | MurderMystery | Murder Mystery       |  | 60 | BUILD_BATTLE   | BuildBattle   | Build Battle         |  | 61 | DUELS          | Duels         | Duels                |  | 63 | SKYBLOCK       | SkyBlock      | SkyBlock             |  | 64 | PIT            | Pit           | Pit                  |  | 65 | REPLAY         | Replay        | Replay               |  | 67 | SMP            | SMP           | SMP                  |  | 68 | WOOL_GAMES     | WoolGames     | Wool Wars            |  ### Storage Games store their respective stats and data in a Player's `stats` collection. The game's specific data is held within a JSON object named after it's `Database Name` (seen above.) ### GameType Notes * Clean names are what is displayed to the user when referencing the name. * Database names or IDs are used when the API references a specific GameType. ## Notes  ### Date and Time Generally dates are stored as a Unix Epoch times in milliseconds. ### Response Format Responses are served in JSON format. ### UUID Parameters All uuid parameters support both dashed and undashed versions. ### SkyBlock items and inventories Items and inventory data are stored as a base64 encoded string containing gzipped nbt data. If a method is missing important information about an item or inventory, you should try checking this! >Note: the base64 string may contain a unicode escape for non-alphabetical symbols, and some programming languages may have silent defects when interpreting the string.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkyBlockProfileMemberRiftVillagePlaza type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkyBlockProfileMemberRiftVillagePlaza{}

// SkyBlockProfileMemberRiftVillagePlaza struct for SkyBlockProfileMemberRiftVillagePlaza
type SkyBlockProfileMemberRiftVillagePlaza struct {
	BarryCenter *SkyBlockProfileMemberRiftVillagePlazaBarryCenter `json:"barry_center,omitempty"`
	BarterBank map[string]interface{} `json:"barter_bank,omitempty"`
	Cowboy *SkyBlockProfileMemberRiftVillagePlazaCowboy `json:"cowboy,omitempty"`
	GotScammed *bool `json:"got_scammed,omitempty"`
	Lonely *SkyBlockProfileMemberRiftVillagePlazaLonely `json:"lonely,omitempty"`
	Murder *SkyBlockProfileMemberRiftVillagePlazaMurder `json:"murder,omitempty"`
	Seraphine *SkyBlockProfileMemberRiftVillagePlazaSeraphine `json:"seraphine,omitempty"`
}

// NewSkyBlockProfileMemberRiftVillagePlaza instantiates a new SkyBlockProfileMemberRiftVillagePlaza object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkyBlockProfileMemberRiftVillagePlaza() *SkyBlockProfileMemberRiftVillagePlaza {
	this := SkyBlockProfileMemberRiftVillagePlaza{}
	return &this
}

// NewSkyBlockProfileMemberRiftVillagePlazaWithDefaults instantiates a new SkyBlockProfileMemberRiftVillagePlaza object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkyBlockProfileMemberRiftVillagePlazaWithDefaults() *SkyBlockProfileMemberRiftVillagePlaza {
	this := SkyBlockProfileMemberRiftVillagePlaza{}
	return &this
}

// GetBarryCenter returns the BarryCenter field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetBarryCenter() SkyBlockProfileMemberRiftVillagePlazaBarryCenter {
	if o == nil || IsNil(o.BarryCenter) {
		var ret SkyBlockProfileMemberRiftVillagePlazaBarryCenter
		return ret
	}
	return *o.BarryCenter
}

// GetBarryCenterOk returns a tuple with the BarryCenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetBarryCenterOk() (*SkyBlockProfileMemberRiftVillagePlazaBarryCenter, bool) {
	if o == nil || IsNil(o.BarryCenter) {
		return nil, false
	}
	return o.BarryCenter, true
}

// HasBarryCenter returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) HasBarryCenter() bool {
	if o != nil && !IsNil(o.BarryCenter) {
		return true
	}

	return false
}

// SetBarryCenter gets a reference to the given SkyBlockProfileMemberRiftVillagePlazaBarryCenter and assigns it to the BarryCenter field.
func (o *SkyBlockProfileMemberRiftVillagePlaza) SetBarryCenter(v SkyBlockProfileMemberRiftVillagePlazaBarryCenter) {
	o.BarryCenter = &v
}

// GetBarterBank returns the BarterBank field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetBarterBank() map[string]interface{} {
	if o == nil || IsNil(o.BarterBank) {
		var ret map[string]interface{}
		return ret
	}
	return o.BarterBank
}

// GetBarterBankOk returns a tuple with the BarterBank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetBarterBankOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BarterBank) {
		return map[string]interface{}{}, false
	}
	return o.BarterBank, true
}

// HasBarterBank returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) HasBarterBank() bool {
	if o != nil && !IsNil(o.BarterBank) {
		return true
	}

	return false
}

// SetBarterBank gets a reference to the given map[string]interface{} and assigns it to the BarterBank field.
func (o *SkyBlockProfileMemberRiftVillagePlaza) SetBarterBank(v map[string]interface{}) {
	o.BarterBank = v
}

// GetCowboy returns the Cowboy field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetCowboy() SkyBlockProfileMemberRiftVillagePlazaCowboy {
	if o == nil || IsNil(o.Cowboy) {
		var ret SkyBlockProfileMemberRiftVillagePlazaCowboy
		return ret
	}
	return *o.Cowboy
}

// GetCowboyOk returns a tuple with the Cowboy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetCowboyOk() (*SkyBlockProfileMemberRiftVillagePlazaCowboy, bool) {
	if o == nil || IsNil(o.Cowboy) {
		return nil, false
	}
	return o.Cowboy, true
}

// HasCowboy returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) HasCowboy() bool {
	if o != nil && !IsNil(o.Cowboy) {
		return true
	}

	return false
}

// SetCowboy gets a reference to the given SkyBlockProfileMemberRiftVillagePlazaCowboy and assigns it to the Cowboy field.
func (o *SkyBlockProfileMemberRiftVillagePlaza) SetCowboy(v SkyBlockProfileMemberRiftVillagePlazaCowboy) {
	o.Cowboy = &v
}

// GetGotScammed returns the GotScammed field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetGotScammed() bool {
	if o == nil || IsNil(o.GotScammed) {
		var ret bool
		return ret
	}
	return *o.GotScammed
}

// GetGotScammedOk returns a tuple with the GotScammed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetGotScammedOk() (*bool, bool) {
	if o == nil || IsNil(o.GotScammed) {
		return nil, false
	}
	return o.GotScammed, true
}

// HasGotScammed returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) HasGotScammed() bool {
	if o != nil && !IsNil(o.GotScammed) {
		return true
	}

	return false
}

// SetGotScammed gets a reference to the given bool and assigns it to the GotScammed field.
func (o *SkyBlockProfileMemberRiftVillagePlaza) SetGotScammed(v bool) {
	o.GotScammed = &v
}

// GetLonely returns the Lonely field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetLonely() SkyBlockProfileMemberRiftVillagePlazaLonely {
	if o == nil || IsNil(o.Lonely) {
		var ret SkyBlockProfileMemberRiftVillagePlazaLonely
		return ret
	}
	return *o.Lonely
}

// GetLonelyOk returns a tuple with the Lonely field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetLonelyOk() (*SkyBlockProfileMemberRiftVillagePlazaLonely, bool) {
	if o == nil || IsNil(o.Lonely) {
		return nil, false
	}
	return o.Lonely, true
}

// HasLonely returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) HasLonely() bool {
	if o != nil && !IsNil(o.Lonely) {
		return true
	}

	return false
}

// SetLonely gets a reference to the given SkyBlockProfileMemberRiftVillagePlazaLonely and assigns it to the Lonely field.
func (o *SkyBlockProfileMemberRiftVillagePlaza) SetLonely(v SkyBlockProfileMemberRiftVillagePlazaLonely) {
	o.Lonely = &v
}

// GetMurder returns the Murder field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetMurder() SkyBlockProfileMemberRiftVillagePlazaMurder {
	if o == nil || IsNil(o.Murder) {
		var ret SkyBlockProfileMemberRiftVillagePlazaMurder
		return ret
	}
	return *o.Murder
}

// GetMurderOk returns a tuple with the Murder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetMurderOk() (*SkyBlockProfileMemberRiftVillagePlazaMurder, bool) {
	if o == nil || IsNil(o.Murder) {
		return nil, false
	}
	return o.Murder, true
}

// HasMurder returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) HasMurder() bool {
	if o != nil && !IsNil(o.Murder) {
		return true
	}

	return false
}

// SetMurder gets a reference to the given SkyBlockProfileMemberRiftVillagePlazaMurder and assigns it to the Murder field.
func (o *SkyBlockProfileMemberRiftVillagePlaza) SetMurder(v SkyBlockProfileMemberRiftVillagePlazaMurder) {
	o.Murder = &v
}

// GetSeraphine returns the Seraphine field value if set, zero value otherwise.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetSeraphine() SkyBlockProfileMemberRiftVillagePlazaSeraphine {
	if o == nil || IsNil(o.Seraphine) {
		var ret SkyBlockProfileMemberRiftVillagePlazaSeraphine
		return ret
	}
	return *o.Seraphine
}

// GetSeraphineOk returns a tuple with the Seraphine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) GetSeraphineOk() (*SkyBlockProfileMemberRiftVillagePlazaSeraphine, bool) {
	if o == nil || IsNil(o.Seraphine) {
		return nil, false
	}
	return o.Seraphine, true
}

// HasSeraphine returns a boolean if a field has been set.
func (o *SkyBlockProfileMemberRiftVillagePlaza) HasSeraphine() bool {
	if o != nil && !IsNil(o.Seraphine) {
		return true
	}

	return false
}

// SetSeraphine gets a reference to the given SkyBlockProfileMemberRiftVillagePlazaSeraphine and assigns it to the Seraphine field.
func (o *SkyBlockProfileMemberRiftVillagePlaza) SetSeraphine(v SkyBlockProfileMemberRiftVillagePlazaSeraphine) {
	o.Seraphine = &v
}

func (o SkyBlockProfileMemberRiftVillagePlaza) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkyBlockProfileMemberRiftVillagePlaza) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BarryCenter) {
		toSerialize["barry_center"] = o.BarryCenter
	}
	if !IsNil(o.BarterBank) {
		toSerialize["barter_bank"] = o.BarterBank
	}
	if !IsNil(o.Cowboy) {
		toSerialize["cowboy"] = o.Cowboy
	}
	if !IsNil(o.GotScammed) {
		toSerialize["got_scammed"] = o.GotScammed
	}
	if !IsNil(o.Lonely) {
		toSerialize["lonely"] = o.Lonely
	}
	if !IsNil(o.Murder) {
		toSerialize["murder"] = o.Murder
	}
	if !IsNil(o.Seraphine) {
		toSerialize["seraphine"] = o.Seraphine
	}
	return toSerialize, nil
}

type NullableSkyBlockProfileMemberRiftVillagePlaza struct {
	value *SkyBlockProfileMemberRiftVillagePlaza
	isSet bool
}

func (v NullableSkyBlockProfileMemberRiftVillagePlaza) Get() *SkyBlockProfileMemberRiftVillagePlaza {
	return v.value
}

func (v *NullableSkyBlockProfileMemberRiftVillagePlaza) Set(val *SkyBlockProfileMemberRiftVillagePlaza) {
	v.value = val
	v.isSet = true
}

func (v NullableSkyBlockProfileMemberRiftVillagePlaza) IsSet() bool {
	return v.isSet
}

func (v *NullableSkyBlockProfileMemberRiftVillagePlaza) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkyBlockProfileMemberRiftVillagePlaza(val *SkyBlockProfileMemberRiftVillagePlaza) *NullableSkyBlockProfileMemberRiftVillagePlaza {
	return &NullableSkyBlockProfileMemberRiftVillagePlaza{value: val, isSet: true}
}

func (v NullableSkyBlockProfileMemberRiftVillagePlaza) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkyBlockProfileMemberRiftVillagePlaza) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


